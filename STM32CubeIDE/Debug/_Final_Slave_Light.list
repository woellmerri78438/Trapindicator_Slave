
_Final_Slave_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108bc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000814  08010a00  08010a00  00020a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011214  08011214  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08011214  08011214  00021214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801121c  0801121c  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801121c  0801121c  0002121c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011220  08011220  00021220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08011224  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  200001f4  08011418  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000944  08011418  00030944  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024bc4  00000000  00000000  0003021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000632c  00000000  00000000  00054de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002220  00000000  00000000  0005b110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f80  00000000  00000000  0005d330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022951  00000000  00000000  0005f2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002733d  00000000  00000000  00081c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbdf9  00000000  00000000  000a8f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00164d37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ba4  00000000  00000000  00164d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f4 	.word	0x200001f4
 800015c:	00000000 	.word	0x00000000
 8000160:	080109e4 	.word	0x080109e4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f8 	.word	0x200001f8
 800017c:	080109e4 	.word	0x080109e4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	; 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_fmul>:
 8000e14:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e1c:	bf1e      	ittt	ne
 8000e1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e22:	ea92 0f0c 	teqne	r2, ip
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d06f      	beq.n	8000f0c <__aeabi_fmul+0xf8>
 8000e2c:	441a      	add	r2, r3
 8000e2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e32:	0240      	lsls	r0, r0, #9
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e3a:	d01e      	beq.n	8000e7a <__aeabi_fmul+0x66>
 8000e3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e48:	fba0 3101 	umull	r3, r1, r0, r1
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e50:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e54:	bf3e      	ittt	cc
 8000e56:	0049      	lslcc	r1, r1, #1
 8000e58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	ea40 0001 	orr.w	r0, r0, r1
 8000e62:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e66:	2afd      	cmp	r2, #253	; 0xfd
 8000e68:	d81d      	bhi.n	8000ea6 <__aeabi_fmul+0x92>
 8000e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e72:	bf08      	it	eq
 8000e74:	f020 0001 	biceq.w	r0, r0, #1
 8000e78:	4770      	bx	lr
 8000e7a:	f090 0f00 	teq	r0, #0
 8000e7e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e82:	bf08      	it	eq
 8000e84:	0249      	lsleq	r1, r1, #9
 8000e86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8e:	3a7f      	subs	r2, #127	; 0x7f
 8000e90:	bfc2      	ittt	gt
 8000e92:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9a:	4770      	bxgt	lr
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	dc5d      	bgt.n	8000f64 <__aeabi_fmul+0x150>
 8000ea8:	f112 0f19 	cmn.w	r2, #25
 8000eac:	bfdc      	itt	le
 8000eae:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eb2:	4770      	bxle	lr
 8000eb4:	f1c2 0200 	rsb	r2, r2, #0
 8000eb8:	0041      	lsls	r1, r0, #1
 8000eba:	fa21 f102 	lsr.w	r1, r1, r2
 8000ebe:	f1c2 0220 	rsb	r2, r2, #32
 8000ec2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eca:	f140 0000 	adc.w	r0, r0, #0
 8000ece:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ed2:	bf08      	it	eq
 8000ed4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed8:	4770      	bx	lr
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xce>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fmul+0xe6>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e78f      	b.n	8000e2c <__aeabi_fmul+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	bf18      	it	ne
 8000f16:	ea93 0f0c 	teqne	r3, ip
 8000f1a:	d00a      	beq.n	8000f32 <__aeabi_fmul+0x11e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	d1d8      	bne.n	8000eda <__aeabi_fmul+0xc6>
 8000f28:	ea80 0001 	eor.w	r0, r0, r1
 8000f2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f090 0f00 	teq	r0, #0
 8000f36:	bf17      	itett	ne
 8000f38:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f3c:	4608      	moveq	r0, r1
 8000f3e:	f091 0f00 	teqne	r1, #0
 8000f42:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f46:	d014      	beq.n	8000f72 <__aeabi_fmul+0x15e>
 8000f48:	ea92 0f0c 	teq	r2, ip
 8000f4c:	d101      	bne.n	8000f52 <__aeabi_fmul+0x13e>
 8000f4e:	0242      	lsls	r2, r0, #9
 8000f50:	d10f      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f52:	ea93 0f0c 	teq	r3, ip
 8000f56:	d103      	bne.n	8000f60 <__aeabi_fmul+0x14c>
 8000f58:	024b      	lsls	r3, r1, #9
 8000f5a:	bf18      	it	ne
 8000f5c:	4608      	movne	r0, r1
 8000f5e:	d108      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f60:	ea80 0001 	eor.w	r0, r0, r1
 8000f64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f70:	4770      	bx	lr
 8000f72:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f76:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f7a:	4770      	bx	lr

08000f7c <__aeabi_fdiv>:
 8000f7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f84:	bf1e      	ittt	ne
 8000f86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f8a:	ea92 0f0c 	teqne	r2, ip
 8000f8e:	ea93 0f0c 	teqne	r3, ip
 8000f92:	d069      	beq.n	8001068 <__aeabi_fdiv+0xec>
 8000f94:	eba2 0203 	sub.w	r2, r2, r3
 8000f98:	ea80 0c01 	eor.w	ip, r0, r1
 8000f9c:	0249      	lsls	r1, r1, #9
 8000f9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fa2:	d037      	beq.n	8001014 <__aeabi_fdiv+0x98>
 8000fa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fa8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	bf38      	it	cc
 8000fb8:	005b      	lslcc	r3, r3, #1
 8000fba:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fbe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	bf24      	itt	cs
 8000fc6:	1a5b      	subcs	r3, r3, r1
 8000fc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd0:	bf24      	itt	cs
 8000fd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fde:	bf24      	itt	cs
 8000fe0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fec:	bf24      	itt	cs
 8000fee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ff2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	bf18      	it	ne
 8000ffa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffe:	d1e0      	bne.n	8000fc2 <__aeabi_fdiv+0x46>
 8001000:	2afd      	cmp	r2, #253	; 0xfd
 8001002:	f63f af50 	bhi.w	8000ea6 <__aeabi_fmul+0x92>
 8001006:	428b      	cmp	r3, r1
 8001008:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800100c:	bf08      	it	eq
 800100e:	f020 0001 	biceq.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001018:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800101c:	327f      	adds	r2, #127	; 0x7f
 800101e:	bfc2      	ittt	gt
 8001020:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001024:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001028:	4770      	bxgt	lr
 800102a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	3a01      	subs	r2, #1
 8001034:	e737      	b.n	8000ea6 <__aeabi_fmul+0x92>
 8001036:	f092 0f00 	teq	r2, #0
 800103a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0040      	lsleq	r0, r0, #1
 8001042:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001046:	3a01      	subeq	r2, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xc2>
 800104a:	ea40 000c 	orr.w	r0, r0, ip
 800104e:	f093 0f00 	teq	r3, #0
 8001052:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001056:	bf02      	ittt	eq
 8001058:	0049      	lsleq	r1, r1, #1
 800105a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800105e:	3b01      	subeq	r3, #1
 8001060:	d0f9      	beq.n	8001056 <__aeabi_fdiv+0xda>
 8001062:	ea41 010c 	orr.w	r1, r1, ip
 8001066:	e795      	b.n	8000f94 <__aeabi_fdiv+0x18>
 8001068:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800106c:	ea92 0f0c 	teq	r2, ip
 8001070:	d108      	bne.n	8001084 <__aeabi_fdiv+0x108>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	f47f af7d 	bne.w	8000f72 <__aeabi_fmul+0x15e>
 8001078:	ea93 0f0c 	teq	r3, ip
 800107c:	f47f af70 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 8001080:	4608      	mov	r0, r1
 8001082:	e776      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001084:	ea93 0f0c 	teq	r3, ip
 8001088:	d104      	bne.n	8001094 <__aeabi_fdiv+0x118>
 800108a:	024b      	lsls	r3, r1, #9
 800108c:	f43f af4c 	beq.w	8000f28 <__aeabi_fmul+0x114>
 8001090:	4608      	mov	r0, r1
 8001092:	e76e      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001094:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001098:	bf18      	it	ne
 800109a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800109e:	d1ca      	bne.n	8001036 <__aeabi_fdiv+0xba>
 80010a0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010a4:	f47f af5c 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 80010a8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010ac:	f47f af3c 	bne.w	8000f28 <__aeabi_fmul+0x114>
 80010b0:	e75f      	b.n	8000f72 <__aeabi_fmul+0x15e>
 80010b2:	bf00      	nop

080010b4 <__gesf2>:
 80010b4:	f04f 3cff 	mov.w	ip, #4294967295
 80010b8:	e006      	b.n	80010c8 <__cmpsf2+0x4>
 80010ba:	bf00      	nop

080010bc <__lesf2>:
 80010bc:	f04f 0c01 	mov.w	ip, #1
 80010c0:	e002      	b.n	80010c8 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__cmpsf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d8:	bf18      	it	ne
 80010da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010de:	d011      	beq.n	8001104 <__cmpsf2+0x40>
 80010e0:	b001      	add	sp, #4
 80010e2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010e6:	bf18      	it	ne
 80010e8:	ea90 0f01 	teqne	r0, r1
 80010ec:	bf58      	it	pl
 80010ee:	ebb2 0003 	subspl.w	r0, r2, r3
 80010f2:	bf88      	it	hi
 80010f4:	17c8      	asrhi	r0, r1, #31
 80010f6:	bf38      	it	cc
 80010f8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010fc:	bf18      	it	ne
 80010fe:	f040 0001 	orrne.w	r0, r0, #1
 8001102:	4770      	bx	lr
 8001104:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001108:	d102      	bne.n	8001110 <__cmpsf2+0x4c>
 800110a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110e:	d105      	bne.n	800111c <__cmpsf2+0x58>
 8001110:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001114:	d1e4      	bne.n	80010e0 <__cmpsf2+0x1c>
 8001116:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800111a:	d0e1      	beq.n	80010e0 <__cmpsf2+0x1c>
 800111c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <__aeabi_cfrcmple>:
 8001124:	4684      	mov	ip, r0
 8001126:	4608      	mov	r0, r1
 8001128:	4661      	mov	r1, ip
 800112a:	e7ff      	b.n	800112c <__aeabi_cfcmpeq>

0800112c <__aeabi_cfcmpeq>:
 800112c:	b50f      	push	{r0, r1, r2, r3, lr}
 800112e:	f7ff ffc9 	bl	80010c4 <__cmpsf2>
 8001132:	2800      	cmp	r0, #0
 8001134:	bf48      	it	mi
 8001136:	f110 0f00 	cmnmi.w	r0, #0
 800113a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800113c <__aeabi_fcmpeq>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff fff4 	bl	800112c <__aeabi_cfcmpeq>
 8001144:	bf0c      	ite	eq
 8001146:	2001      	moveq	r0, #1
 8001148:	2000      	movne	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_fcmplt>:
 8001150:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001154:	f7ff ffea 	bl	800112c <__aeabi_cfcmpeq>
 8001158:	bf34      	ite	cc
 800115a:	2001      	movcc	r0, #1
 800115c:	2000      	movcs	r0, #0
 800115e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001162:	bf00      	nop

08001164 <__aeabi_fcmple>:
 8001164:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001168:	f7ff ffe0 	bl	800112c <__aeabi_cfcmpeq>
 800116c:	bf94      	ite	ls
 800116e:	2001      	movls	r0, #1
 8001170:	2000      	movhi	r0, #0
 8001172:	f85d fb08 	ldr.w	pc, [sp], #8
 8001176:	bf00      	nop

08001178 <__aeabi_fcmpge>:
 8001178:	f84d ed08 	str.w	lr, [sp, #-8]!
 800117c:	f7ff ffd2 	bl	8001124 <__aeabi_cfrcmple>
 8001180:	bf94      	ite	ls
 8001182:	2001      	movls	r0, #1
 8001184:	2000      	movhi	r0, #0
 8001186:	f85d fb08 	ldr.w	pc, [sp], #8
 800118a:	bf00      	nop

0800118c <__aeabi_fcmpgt>:
 800118c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001190:	f7ff ffc8 	bl	8001124 <__aeabi_cfrcmple>
 8001194:	bf34      	ite	cc
 8001196:	2001      	movcc	r0, #1
 8001198:	2000      	movcs	r0, #0
 800119a:	f85d fb08 	ldr.w	pc, [sp], #8
 800119e:	bf00      	nop

080011a0 <__aeabi_uldivmod>:
 80011a0:	b953      	cbnz	r3, 80011b8 <__aeabi_uldivmod+0x18>
 80011a2:	b94a      	cbnz	r2, 80011b8 <__aeabi_uldivmod+0x18>
 80011a4:	2900      	cmp	r1, #0
 80011a6:	bf08      	it	eq
 80011a8:	2800      	cmpeq	r0, #0
 80011aa:	bf1c      	itt	ne
 80011ac:	f04f 31ff 	movne.w	r1, #4294967295
 80011b0:	f04f 30ff 	movne.w	r0, #4294967295
 80011b4:	f000 b974 	b.w	80014a0 <__aeabi_idiv0>
 80011b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80011bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011c0:	f000 f806 	bl	80011d0 <__udivmoddi4>
 80011c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011cc:	b004      	add	sp, #16
 80011ce:	4770      	bx	lr

080011d0 <__udivmoddi4>:
 80011d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011d4:	9e08      	ldr	r6, [sp, #32]
 80011d6:	460d      	mov	r5, r1
 80011d8:	4604      	mov	r4, r0
 80011da:	4688      	mov	r8, r1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d14d      	bne.n	800127c <__udivmoddi4+0xac>
 80011e0:	428a      	cmp	r2, r1
 80011e2:	4694      	mov	ip, r2
 80011e4:	d968      	bls.n	80012b8 <__udivmoddi4+0xe8>
 80011e6:	fab2 f282 	clz	r2, r2
 80011ea:	b152      	cbz	r2, 8001202 <__udivmoddi4+0x32>
 80011ec:	fa01 f302 	lsl.w	r3, r1, r2
 80011f0:	f1c2 0120 	rsb	r1, r2, #32
 80011f4:	fa20 f101 	lsr.w	r1, r0, r1
 80011f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80011fc:	ea41 0803 	orr.w	r8, r1, r3
 8001200:	4094      	lsls	r4, r2
 8001202:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8001206:	0c21      	lsrs	r1, r4, #16
 8001208:	fbb8 fef5 	udiv	lr, r8, r5
 800120c:	fa1f f78c 	uxth.w	r7, ip
 8001210:	fb05 831e 	mls	r3, r5, lr, r8
 8001214:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001218:	fb0e f107 	mul.w	r1, lr, r7
 800121c:	4299      	cmp	r1, r3
 800121e:	d90b      	bls.n	8001238 <__udivmoddi4+0x68>
 8001220:	eb1c 0303 	adds.w	r3, ip, r3
 8001224:	f10e 30ff 	add.w	r0, lr, #4294967295
 8001228:	f080 811e 	bcs.w	8001468 <__udivmoddi4+0x298>
 800122c:	4299      	cmp	r1, r3
 800122e:	f240 811b 	bls.w	8001468 <__udivmoddi4+0x298>
 8001232:	f1ae 0e02 	sub.w	lr, lr, #2
 8001236:	4463      	add	r3, ip
 8001238:	1a5b      	subs	r3, r3, r1
 800123a:	b2a4      	uxth	r4, r4
 800123c:	fbb3 f0f5 	udiv	r0, r3, r5
 8001240:	fb05 3310 	mls	r3, r5, r0, r3
 8001244:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001248:	fb00 f707 	mul.w	r7, r0, r7
 800124c:	42a7      	cmp	r7, r4
 800124e:	d90a      	bls.n	8001266 <__udivmoddi4+0x96>
 8001250:	eb1c 0404 	adds.w	r4, ip, r4
 8001254:	f100 33ff 	add.w	r3, r0, #4294967295
 8001258:	f080 8108 	bcs.w	800146c <__udivmoddi4+0x29c>
 800125c:	42a7      	cmp	r7, r4
 800125e:	f240 8105 	bls.w	800146c <__udivmoddi4+0x29c>
 8001262:	4464      	add	r4, ip
 8001264:	3802      	subs	r0, #2
 8001266:	1be4      	subs	r4, r4, r7
 8001268:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800126c:	2100      	movs	r1, #0
 800126e:	b11e      	cbz	r6, 8001278 <__udivmoddi4+0xa8>
 8001270:	40d4      	lsrs	r4, r2
 8001272:	2300      	movs	r3, #0
 8001274:	e9c6 4300 	strd	r4, r3, [r6]
 8001278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800127c:	428b      	cmp	r3, r1
 800127e:	d908      	bls.n	8001292 <__udivmoddi4+0xc2>
 8001280:	2e00      	cmp	r6, #0
 8001282:	f000 80ee 	beq.w	8001462 <__udivmoddi4+0x292>
 8001286:	2100      	movs	r1, #0
 8001288:	e9c6 0500 	strd	r0, r5, [r6]
 800128c:	4608      	mov	r0, r1
 800128e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001292:	fab3 f183 	clz	r1, r3
 8001296:	2900      	cmp	r1, #0
 8001298:	d14a      	bne.n	8001330 <__udivmoddi4+0x160>
 800129a:	42ab      	cmp	r3, r5
 800129c:	d302      	bcc.n	80012a4 <__udivmoddi4+0xd4>
 800129e:	4282      	cmp	r2, r0
 80012a0:	f200 80f9 	bhi.w	8001496 <__udivmoddi4+0x2c6>
 80012a4:	1a84      	subs	r4, r0, r2
 80012a6:	eb65 0303 	sbc.w	r3, r5, r3
 80012aa:	2001      	movs	r0, #1
 80012ac:	4698      	mov	r8, r3
 80012ae:	2e00      	cmp	r6, #0
 80012b0:	d0e2      	beq.n	8001278 <__udivmoddi4+0xa8>
 80012b2:	e9c6 4800 	strd	r4, r8, [r6]
 80012b6:	e7df      	b.n	8001278 <__udivmoddi4+0xa8>
 80012b8:	b902      	cbnz	r2, 80012bc <__udivmoddi4+0xec>
 80012ba:	deff      	udf	#255	; 0xff
 80012bc:	fab2 f282 	clz	r2, r2
 80012c0:	2a00      	cmp	r2, #0
 80012c2:	f040 8091 	bne.w	80013e8 <__udivmoddi4+0x218>
 80012c6:	eba1 050c 	sub.w	r5, r1, ip
 80012ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012ce:	fa1f fe8c 	uxth.w	lr, ip
 80012d2:	2101      	movs	r1, #1
 80012d4:	fbb5 f3f7 	udiv	r3, r5, r7
 80012d8:	fb07 5013 	mls	r0, r7, r3, r5
 80012dc:	0c25      	lsrs	r5, r4, #16
 80012de:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80012e2:	fb0e f003 	mul.w	r0, lr, r3
 80012e6:	42a8      	cmp	r0, r5
 80012e8:	d908      	bls.n	80012fc <__udivmoddi4+0x12c>
 80012ea:	eb1c 0505 	adds.w	r5, ip, r5
 80012ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80012f2:	d202      	bcs.n	80012fa <__udivmoddi4+0x12a>
 80012f4:	42a8      	cmp	r0, r5
 80012f6:	f200 80cb 	bhi.w	8001490 <__udivmoddi4+0x2c0>
 80012fa:	4643      	mov	r3, r8
 80012fc:	1a2d      	subs	r5, r5, r0
 80012fe:	b2a4      	uxth	r4, r4
 8001300:	fbb5 f0f7 	udiv	r0, r5, r7
 8001304:	fb07 5510 	mls	r5, r7, r0, r5
 8001308:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800130c:	fb0e fe00 	mul.w	lr, lr, r0
 8001310:	45a6      	cmp	lr, r4
 8001312:	d908      	bls.n	8001326 <__udivmoddi4+0x156>
 8001314:	eb1c 0404 	adds.w	r4, ip, r4
 8001318:	f100 35ff 	add.w	r5, r0, #4294967295
 800131c:	d202      	bcs.n	8001324 <__udivmoddi4+0x154>
 800131e:	45a6      	cmp	lr, r4
 8001320:	f200 80bb 	bhi.w	800149a <__udivmoddi4+0x2ca>
 8001324:	4628      	mov	r0, r5
 8001326:	eba4 040e 	sub.w	r4, r4, lr
 800132a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800132e:	e79e      	b.n	800126e <__udivmoddi4+0x9e>
 8001330:	f1c1 0720 	rsb	r7, r1, #32
 8001334:	408b      	lsls	r3, r1
 8001336:	fa22 fc07 	lsr.w	ip, r2, r7
 800133a:	ea4c 0c03 	orr.w	ip, ip, r3
 800133e:	fa20 f407 	lsr.w	r4, r0, r7
 8001342:	fa05 f301 	lsl.w	r3, r5, r1
 8001346:	431c      	orrs	r4, r3
 8001348:	40fd      	lsrs	r5, r7
 800134a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800134e:	fa00 f301 	lsl.w	r3, r0, r1
 8001352:	fbb5 f8f9 	udiv	r8, r5, r9
 8001356:	0c20      	lsrs	r0, r4, #16
 8001358:	fa1f fe8c 	uxth.w	lr, ip
 800135c:	fb09 5518 	mls	r5, r9, r8, r5
 8001360:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8001364:	fb08 f00e 	mul.w	r0, r8, lr
 8001368:	42a8      	cmp	r0, r5
 800136a:	fa02 f201 	lsl.w	r2, r2, r1
 800136e:	d90b      	bls.n	8001388 <__udivmoddi4+0x1b8>
 8001370:	eb1c 0505 	adds.w	r5, ip, r5
 8001374:	f108 3aff 	add.w	sl, r8, #4294967295
 8001378:	f080 8088 	bcs.w	800148c <__udivmoddi4+0x2bc>
 800137c:	42a8      	cmp	r0, r5
 800137e:	f240 8085 	bls.w	800148c <__udivmoddi4+0x2bc>
 8001382:	f1a8 0802 	sub.w	r8, r8, #2
 8001386:	4465      	add	r5, ip
 8001388:	1a2d      	subs	r5, r5, r0
 800138a:	b2a4      	uxth	r4, r4
 800138c:	fbb5 f0f9 	udiv	r0, r5, r9
 8001390:	fb09 5510 	mls	r5, r9, r0, r5
 8001394:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8001398:	fb00 fe0e 	mul.w	lr, r0, lr
 800139c:	45ae      	cmp	lr, r5
 800139e:	d908      	bls.n	80013b2 <__udivmoddi4+0x1e2>
 80013a0:	eb1c 0505 	adds.w	r5, ip, r5
 80013a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80013a8:	d26c      	bcs.n	8001484 <__udivmoddi4+0x2b4>
 80013aa:	45ae      	cmp	lr, r5
 80013ac:	d96a      	bls.n	8001484 <__udivmoddi4+0x2b4>
 80013ae:	3802      	subs	r0, #2
 80013b0:	4465      	add	r5, ip
 80013b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80013b6:	fba0 9402 	umull	r9, r4, r0, r2
 80013ba:	eba5 050e 	sub.w	r5, r5, lr
 80013be:	42a5      	cmp	r5, r4
 80013c0:	46c8      	mov	r8, r9
 80013c2:	46a6      	mov	lr, r4
 80013c4:	d356      	bcc.n	8001474 <__udivmoddi4+0x2a4>
 80013c6:	d053      	beq.n	8001470 <__udivmoddi4+0x2a0>
 80013c8:	b15e      	cbz	r6, 80013e2 <__udivmoddi4+0x212>
 80013ca:	ebb3 0208 	subs.w	r2, r3, r8
 80013ce:	eb65 050e 	sbc.w	r5, r5, lr
 80013d2:	fa05 f707 	lsl.w	r7, r5, r7
 80013d6:	fa22 f301 	lsr.w	r3, r2, r1
 80013da:	40cd      	lsrs	r5, r1
 80013dc:	431f      	orrs	r7, r3
 80013de:	e9c6 7500 	strd	r7, r5, [r6]
 80013e2:	2100      	movs	r1, #0
 80013e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013e8:	f1c2 0320 	rsb	r3, r2, #32
 80013ec:	fa20 f103 	lsr.w	r1, r0, r3
 80013f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80013f4:	fa25 f303 	lsr.w	r3, r5, r3
 80013f8:	4095      	lsls	r5, r2
 80013fa:	430d      	orrs	r5, r1
 80013fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001400:	fa1f fe8c 	uxth.w	lr, ip
 8001404:	fbb3 f1f7 	udiv	r1, r3, r7
 8001408:	fb07 3011 	mls	r0, r7, r1, r3
 800140c:	0c2b      	lsrs	r3, r5, #16
 800140e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001412:	fb01 f00e 	mul.w	r0, r1, lr
 8001416:	4298      	cmp	r0, r3
 8001418:	fa04 f402 	lsl.w	r4, r4, r2
 800141c:	d908      	bls.n	8001430 <__udivmoddi4+0x260>
 800141e:	eb1c 0303 	adds.w	r3, ip, r3
 8001422:	f101 38ff 	add.w	r8, r1, #4294967295
 8001426:	d22f      	bcs.n	8001488 <__udivmoddi4+0x2b8>
 8001428:	4298      	cmp	r0, r3
 800142a:	d92d      	bls.n	8001488 <__udivmoddi4+0x2b8>
 800142c:	3902      	subs	r1, #2
 800142e:	4463      	add	r3, ip
 8001430:	1a1b      	subs	r3, r3, r0
 8001432:	b2ad      	uxth	r5, r5
 8001434:	fbb3 f0f7 	udiv	r0, r3, r7
 8001438:	fb07 3310 	mls	r3, r7, r0, r3
 800143c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001440:	fb00 f30e 	mul.w	r3, r0, lr
 8001444:	42ab      	cmp	r3, r5
 8001446:	d908      	bls.n	800145a <__udivmoddi4+0x28a>
 8001448:	eb1c 0505 	adds.w	r5, ip, r5
 800144c:	f100 38ff 	add.w	r8, r0, #4294967295
 8001450:	d216      	bcs.n	8001480 <__udivmoddi4+0x2b0>
 8001452:	42ab      	cmp	r3, r5
 8001454:	d914      	bls.n	8001480 <__udivmoddi4+0x2b0>
 8001456:	3802      	subs	r0, #2
 8001458:	4465      	add	r5, ip
 800145a:	1aed      	subs	r5, r5, r3
 800145c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001460:	e738      	b.n	80012d4 <__udivmoddi4+0x104>
 8001462:	4631      	mov	r1, r6
 8001464:	4630      	mov	r0, r6
 8001466:	e707      	b.n	8001278 <__udivmoddi4+0xa8>
 8001468:	4686      	mov	lr, r0
 800146a:	e6e5      	b.n	8001238 <__udivmoddi4+0x68>
 800146c:	4618      	mov	r0, r3
 800146e:	e6fa      	b.n	8001266 <__udivmoddi4+0x96>
 8001470:	454b      	cmp	r3, r9
 8001472:	d2a9      	bcs.n	80013c8 <__udivmoddi4+0x1f8>
 8001474:	ebb9 0802 	subs.w	r8, r9, r2
 8001478:	eb64 0e0c 	sbc.w	lr, r4, ip
 800147c:	3801      	subs	r0, #1
 800147e:	e7a3      	b.n	80013c8 <__udivmoddi4+0x1f8>
 8001480:	4640      	mov	r0, r8
 8001482:	e7ea      	b.n	800145a <__udivmoddi4+0x28a>
 8001484:	4620      	mov	r0, r4
 8001486:	e794      	b.n	80013b2 <__udivmoddi4+0x1e2>
 8001488:	4641      	mov	r1, r8
 800148a:	e7d1      	b.n	8001430 <__udivmoddi4+0x260>
 800148c:	46d0      	mov	r8, sl
 800148e:	e77b      	b.n	8001388 <__udivmoddi4+0x1b8>
 8001490:	3b02      	subs	r3, #2
 8001492:	4465      	add	r5, ip
 8001494:	e732      	b.n	80012fc <__udivmoddi4+0x12c>
 8001496:	4608      	mov	r0, r1
 8001498:	e709      	b.n	80012ae <__udivmoddi4+0xde>
 800149a:	4464      	add	r4, ip
 800149c:	3802      	subs	r0, #2
 800149e:	e742      	b.n	8001326 <__udivmoddi4+0x156>

080014a0 <__aeabi_idiv0>:
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop

080014a4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4013      	ands	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c8:	68fb      	ldr	r3, [r7, #12]
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80014dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014f8:	68fb      	ldr	r3, [r7, #12]
}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */
	ADC_ChannelConfTypeDef sConfig = {0};
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001514:	4b2c      	ldr	r3, [pc, #176]	; (80015c8 <MX_ADC_Init+0xc4>)
 8001516:	4a2d      	ldr	r2, [pc, #180]	; (80015cc <MX_ADC_Init+0xc8>)
 8001518:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800151a:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <MX_ADC_Init+0xc4>)
 800151c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001520:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001522:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <MX_ADC_Init+0xc4>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <MX_ADC_Init+0xc4>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <MX_ADC_Init+0xc4>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001534:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <MX_ADC_Init+0xc4>)
 8001536:	2204      	movs	r2, #4
 8001538:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <MX_ADC_Init+0xc4>)
 800153c:	2200      	movs	r2, #0
 800153e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <MX_ADC_Init+0xc4>)
 8001542:	2200      	movs	r2, #0
 8001544:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <MX_ADC_Init+0xc4>)
 8001548:	2200      	movs	r2, #0
 800154a:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <MX_ADC_Init+0xc4>)
 800154e:	2201      	movs	r2, #1
 8001550:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <MX_ADC_Init+0xc4>)
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800155a:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_ADC_Init+0xc4>)
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <MX_ADC_Init+0xc4>)
 8001562:	2200      	movs	r2, #0
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_ADC_Init+0xc4>)
 8001568:	2200      	movs	r2, #0
 800156a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <MX_ADC_Init+0xc4>)
 8001570:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_ADC_Init+0xc4>)
 8001578:	2206      	movs	r2, #6
 800157a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_ADC_Init+0xc4>)
 800157e:	2200      	movs	r2, #0
 8001580:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_ADC_Init+0xc4>)
 8001584:	2200      	movs	r2, #0
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_ADC_Init+0xc4>)
 800158c:	2200      	movs	r2, #0
 800158e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001590:	480d      	ldr	r0, [pc, #52]	; (80015c8 <MX_ADC_Init+0xc4>)
 8001592:	f002 f85d 	bl	8003650 <HAL_ADC_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_ADC_Init+0x9c>
  {
    Error_Handler();
 800159c:	f000 fa8a 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_ADC_Init+0xcc>)
 80015a2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_ADC_Init+0xc4>)
 80015b2:	f002 faeb 	bl	8003b8c <HAL_ADC_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_ADC_Init+0xbc>
	  {
	    Error_Handler();
 80015bc:	f000 fa7a 	bl	8001ab4 <Error_Handler>
	  }
  /* USER CODE END ADC_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000210 	.word	0x20000210
 80015cc:	40012400 	.word	0x40012400
 80015d0:	0c000008 	.word	0x0c000008

080015d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <HAL_ADC_MspInit+0x50>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d112      	bne.n	800161c <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80015f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015fa:	f7ff ff6b 	bl	80014d4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	2002      	movs	r0, #2
 8001600:	f7ff ff50 	bl	80014a4 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB4     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001604:	2310      	movs	r3, #16
 8001606:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001608:	2303      	movs	r3, #3
 800160a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	4619      	mov	r1, r3
 8001616:	4804      	ldr	r0, [pc, #16]	; (8001628 <HAL_ADC_MspInit+0x54>)
 8001618:	f003 f970 	bl	80048fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800161c:	bf00      	nop
 800161e:	3720      	adds	r7, #32
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40012400 	.word	0x40012400
 8001628:	48000400 	.word	0x48000400
 800162c:	00000000 	.word	0x00000000

08001630 <Berechnung_Akkustand>:
/* Berechnung des Akkustands
 * Einstellen der Parameter (R1,R2)
 * Übergabe: /
 * Rückgabe: berechneter Akkustand
 */
float Berechnung_Akkustand(uint32_t R1, uint32_t R2) {
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]

	//Wegen Wakeup neuinit nötig!
	MX_ADC_Init();
 800163a:	f7ff ff63 	bl	8001504 <MX_ADC_Init>
	uint32_t adc0;
	float Vin;
	float Vakku;

	HAL_ADC_Start(&hadc);
 800163e:	4828      	ldr	r0, [pc, #160]	; (80016e0 <Berechnung_Akkustand+0xb0>)
 8001640:	f002 f9ba 	bl	80039b8 <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc, 1000) == HAL_OK) //ADC Conversion True
 8001644:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001648:	4825      	ldr	r0, [pc, #148]	; (80016e0 <Berechnung_Akkustand+0xb0>)
 800164a:	f002 f9fb 	bl	8003a44 <HAL_ADC_PollForConversion>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d139      	bne.n	80016c8 <Berechnung_Akkustand+0x98>
			{
		adc0 = HAL_ADC_GetValue(&hadc); ///Wert der Conversion in adc0 speichern
 8001654:	4822      	ldr	r0, [pc, #136]	; (80016e0 <Berechnung_Akkustand+0xb0>)
 8001656:	f002 fa8c 	bl	8003b72 <HAL_ADC_GetValue>
 800165a:	6138      	str	r0, [r7, #16]
		Vin = (((float)adc0 / BITMAX) * VMAX);
 800165c:	6938      	ldr	r0, [r7, #16]
 800165e:	f7ff fb81 	bl	8000d64 <__aeabi_ui2f>
 8001662:	4603      	mov	r3, r0
 8001664:	491f      	ldr	r1, [pc, #124]	; (80016e4 <Berechnung_Akkustand+0xb4>)
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fc88 	bl	8000f7c <__aeabi_fdiv>
 800166c:	4603      	mov	r3, r0
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff42 	bl	80004f8 <__aeabi_f2d>
 8001674:	a318      	add	r3, pc, #96	; (adr r3, 80016d8 <Berechnung_Akkustand+0xa8>)
 8001676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167a:	f7fe ff95 	bl	80005a8 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff fa67 	bl	8000b58 <__aeabi_d2f>
 800168a:	4603      	mov	r3, r0
 800168c:	60fb      	str	r3, [r7, #12]
		Vakku = Vin * (((float)R2 + (float)R1) / (float)R2); //Vin Berechnen (Spg.teiler mit einbezogen)
 800168e:	6838      	ldr	r0, [r7, #0]
 8001690:	f7ff fb68 	bl	8000d64 <__aeabi_ui2f>
 8001694:	4604      	mov	r4, r0
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fb64 	bl	8000d64 <__aeabi_ui2f>
 800169c:	4603      	mov	r3, r0
 800169e:	4619      	mov	r1, r3
 80016a0:	4620      	mov	r0, r4
 80016a2:	f7ff faaf 	bl	8000c04 <__addsf3>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461c      	mov	r4, r3
 80016aa:	6838      	ldr	r0, [r7, #0]
 80016ac:	f7ff fb5a 	bl	8000d64 <__aeabi_ui2f>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4619      	mov	r1, r3
 80016b4:	4620      	mov	r0, r4
 80016b6:	f7ff fc61 	bl	8000f7c <__aeabi_fdiv>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4619      	mov	r1, r3
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f7ff fba8 	bl	8000e14 <__aeabi_fmul>
 80016c4:	4603      	mov	r3, r0
 80016c6:	617b      	str	r3, [r7, #20]
	}

	return Vakku;
 80016c8:	697b      	ldr	r3, [r7, #20]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd90      	pop	{r4, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	f3af 8000 	nop.w
 80016d8:	66666666 	.word	0x66666666
 80016dc:	400a6666 	.word	0x400a6666
 80016e0:	20000210 	.word	0x20000210
 80016e4:	457ff000 	.word	0x457ff000

080016e8 <Ausgabe_Akkustand>:

/* Ausgabe des Prozentwerts und der Spannung über UART
 * Übergabe: berechneter Akkustand
 * Rückgabe: berechneter Prozentwert
 */
int Ausgabe_Akkustand(float Vakku) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	int Prozentwert;

	if (Vakku >= 4.1) {
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7fe ff01 	bl	80004f8 <__aeabi_f2d>
 80016f6:	a350      	add	r3, pc, #320	; (adr r3, 8001838 <Ausgabe_Akkustand+0x150>)
 80016f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fc:	f7ff f9da 	bl	8000ab4 <__aeabi_dcmpge>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <Ausgabe_Akkustand+0x24>
		Prozentwert = 100; //100%
 8001706:	2364      	movs	r3, #100	; 0x64
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	e08d      	b.n	8001828 <Ausgabe_Akkustand+0x140>
	} else if ((Vakku >= 4.0) && (Vakku <= 4.1)) {
 800170c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fd31 	bl	8001178 <__aeabi_fcmpge>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00d      	beq.n	8001738 <Ausgabe_Akkustand+0x50>
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7fe feeb 	bl	80004f8 <__aeabi_f2d>
 8001722:	a345      	add	r3, pc, #276	; (adr r3, 8001838 <Ausgabe_Akkustand+0x150>)
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	f7ff f9ba 	bl	8000aa0 <__aeabi_dcmple>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <Ausgabe_Akkustand+0x50>
		Prozentwert = 90;		//90
 8001732:	235a      	movs	r3, #90	; 0x5a
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	e077      	b.n	8001828 <Ausgabe_Akkustand+0x140>
	} else if ((Vakku >= 3.9) && (Vakku <= 4.0)) {
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7fe fedd 	bl	80004f8 <__aeabi_f2d>
 800173e:	a340      	add	r3, pc, #256	; (adr r3, 8001840 <Ausgabe_Akkustand+0x158>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7ff f9b6 	bl	8000ab4 <__aeabi_dcmpge>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00a      	beq.n	8001764 <Ausgabe_Akkustand+0x7c>
 800174e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fd06 	bl	8001164 <__aeabi_fcmple>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <Ausgabe_Akkustand+0x7c>
		Prozentwert = 80;		//80%
 800175e:	2350      	movs	r3, #80	; 0x50
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	e061      	b.n	8001828 <Ausgabe_Akkustand+0x140>
	} else if ((Vakku >= 3.8) && (Vakku <= 3.9)) {
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7fe fec7 	bl	80004f8 <__aeabi_f2d>
 800176a:	a337      	add	r3, pc, #220	; (adr r3, 8001848 <Ausgabe_Akkustand+0x160>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	f7ff f9a0 	bl	8000ab4 <__aeabi_dcmpge>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00d      	beq.n	8001796 <Ausgabe_Akkustand+0xae>
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7fe febc 	bl	80004f8 <__aeabi_f2d>
 8001780:	a32f      	add	r3, pc, #188	; (adr r3, 8001840 <Ausgabe_Akkustand+0x158>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7ff f98b 	bl	8000aa0 <__aeabi_dcmple>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <Ausgabe_Akkustand+0xae>
		Prozentwert = 60;		//60%
 8001790:	233c      	movs	r3, #60	; 0x3c
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	e048      	b.n	8001828 <Ausgabe_Akkustand+0x140>
	} else if ((Vakku >= 3.7) && (Vakku <= 3.8)) {
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7fe feae 	bl	80004f8 <__aeabi_f2d>
 800179c:	a32c      	add	r3, pc, #176	; (adr r3, 8001850 <Ausgabe_Akkustand+0x168>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7ff f987 	bl	8000ab4 <__aeabi_dcmpge>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00d      	beq.n	80017c8 <Ausgabe_Akkustand+0xe0>
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7fe fea3 	bl	80004f8 <__aeabi_f2d>
 80017b2:	a325      	add	r3, pc, #148	; (adr r3, 8001848 <Ausgabe_Akkustand+0x160>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	f7ff f972 	bl	8000aa0 <__aeabi_dcmple>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <Ausgabe_Akkustand+0xe0>
		Prozentwert = 40;		//40%
 80017c2:	2328      	movs	r3, #40	; 0x28
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	e02f      	b.n	8001828 <Ausgabe_Akkustand+0x140>
	} else if ((Vakku >= 3.6) && (Vakku <= 3.7)) {
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7fe fe95 	bl	80004f8 <__aeabi_f2d>
 80017ce:	a322      	add	r3, pc, #136	; (adr r3, 8001858 <Ausgabe_Akkustand+0x170>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7ff f96e 	bl	8000ab4 <__aeabi_dcmpge>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00d      	beq.n	80017fa <Ausgabe_Akkustand+0x112>
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7fe fe8a 	bl	80004f8 <__aeabi_f2d>
 80017e4:	a31a      	add	r3, pc, #104	; (adr r3, 8001850 <Ausgabe_Akkustand+0x168>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	f7ff f959 	bl	8000aa0 <__aeabi_dcmple>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d002      	beq.n	80017fa <Ausgabe_Akkustand+0x112>
		Prozentwert = 20;		//20%
 80017f4:	2314      	movs	r3, #20
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e016      	b.n	8001828 <Ausgabe_Akkustand+0x140>
	} else if ((Vakku <= 3.6) && (Vakku > 3)) {
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7fe fe7c 	bl	80004f8 <__aeabi_f2d>
 8001800:	a315      	add	r3, pc, #84	; (adr r3, 8001858 <Ausgabe_Akkustand+0x170>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7ff f94b 	bl	8000aa0 <__aeabi_dcmple>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d009      	beq.n	8001824 <Ausgabe_Akkustand+0x13c>
 8001810:	4913      	ldr	r1, [pc, #76]	; (8001860 <Ausgabe_Akkustand+0x178>)
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fcba 	bl	800118c <__aeabi_fcmpgt>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <Ausgabe_Akkustand+0x13c>
		Prozentwert = 0;		//0%
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	e001      	b.n	8001828 <Ausgabe_Akkustand+0x140>
	} else
		Prozentwert = 255;
 8001824:	23ff      	movs	r3, #255	; 0xff
 8001826:	60fb      	str	r3, [r7, #12]
	return (Prozentwert);
 8001828:	68fb      	ldr	r3, [r7, #12]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	f3af 8000 	nop.w
 8001838:	66666666 	.word	0x66666666
 800183c:	40106666 	.word	0x40106666
 8001840:	33333333 	.word	0x33333333
 8001844:	400f3333 	.word	0x400f3333
 8001848:	66666666 	.word	0x66666666
 800184c:	400e6666 	.word	0x400e6666
 8001850:	9999999a 	.word	0x9999999a
 8001854:	400d9999 	.word	0x400d9999
 8001858:	cccccccd 	.word	0xcccccccd
 800185c:	400ccccc 	.word	0x400ccccc
 8001860:	40400000 	.word	0x40400000

08001864 <LL_AHB1_GRP1_EnableClock>:
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800186c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001870:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4313      	orrs	r3, r2
 800187a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001880:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4013      	ands	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001888:	68fb      	ldr	r3, [r7, #12]
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001898:	2004      	movs	r0, #4
 800189a:	f7ff ffe3 	bl	8001864 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800189e:	2001      	movs	r0, #1
 80018a0:	f7ff ffe0 	bl	8001864 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2102      	movs	r1, #2
 80018a8:	200f      	movs	r0, #15
 80018aa:	f002 fc06 	bl	80040ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018ae:	200f      	movs	r0, #15
 80018b0:	f002 fc1d 	bl	80040ee <HAL_NVIC_EnableIRQ>

}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <LL_AHB2_GRP1_EnableClock>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4013      	ands	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018dc:	68fb      	ldr	r3, [r7, #12]
}
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fc:	2004      	movs	r0, #4
 80018fe:	f7ff ffdb 	bl	80018b8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	2002      	movs	r0, #2
 8001904:	f7ff ffd8 	bl	80018b8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Green_Pin|LED_Red_Pin|LED_Board_Pin, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	f244 2120 	movw	r1, #16928	; 0x4220
 800190e:	4825      	ldr	r0, [pc, #148]	; (80019a4 <MX_GPIO_Init+0xbc>)
 8001910:	f003 fa39 	bl	8004d86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = REEDPin_Pin;
 8001914:	2308      	movs	r3, #8
 8001916:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191c:	2301      	movs	r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(REEDPin_GPIO_Port, &GPIO_InitStruct);
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	4619      	mov	r1, r3
 8001924:	481f      	ldr	r0, [pc, #124]	; (80019a4 <MX_GPIO_Init+0xbc>)
 8001926:	f002 ffe9 	bl	80048fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Red_Pin;
 800192a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800192e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	4619      	mov	r1, r3
 8001940:	4818      	ldr	r0, [pc, #96]	; (80019a4 <MX_GPIO_Init+0xbc>)
 8001942:	f002 ffdb 	bl	80048fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Board_Pin;
 8001946:	2320      	movs	r3, #32
 8001948:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001952:	2302      	movs	r3, #2
 8001954:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_Board_GPIO_Port, &GPIO_InitStruct);
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4812      	ldr	r0, [pc, #72]	; (80019a4 <MX_GPIO_Init+0xbc>)
 800195c:	f002 ffce 	bl	80048fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT_BOOT_Pin;
 8001960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001964:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001966:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800196a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196c:	2301      	movs	r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT_BOOT_GPIO_Port, &GPIO_InitStruct);
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	4619      	mov	r1, r3
 8001974:	480b      	ldr	r0, [pc, #44]	; (80019a4 <MX_GPIO_Init+0xbc>)
 8001976:	f002 ffc1 	bl	80048fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	2009      	movs	r0, #9
 8001980:	f002 fb9b 	bl	80040ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001984:	2009      	movs	r0, #9
 8001986:	f002 fbb2 	bl	80040ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	2029      	movs	r0, #41	; 0x29
 8001990:	f002 fb93 	bl	80040ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001994:	2029      	movs	r0, #41	; 0x29
 8001996:	f002 fbaa 	bl	80040ee <HAL_NVIC_EnableIRQ>

}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	48000400 	.word	0x48000400

080019a8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80019b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b8:	f023 0218 	bic.w	r2, r3, #24
 80019bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
	...

080019d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d8:	f001 fcb2 	bl	8003340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019dc:	f000 f810 	bl	8001a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019e0:	f7ff ff82 	bl	80018e8 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 80019e4:	f001 f81b 	bl	8002a1e <MX_SubGHz_Phy_Init>
  MX_ADC_Init();
 80019e8:	f7ff fd8c 	bl	8001504 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  //Write LEDBoard Pin high (off)
  HAL_GPIO_WritePin(LED_Board_GPIO_Port, LED_Board_Pin, 1);
 80019ec:	2201      	movs	r2, #1
 80019ee:	2120      	movs	r1, #32
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <main+0x28>)
 80019f2:	f003 f9c8 	bl	8004d86 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 80019f6:	f001 f81a 	bl	8002a2e <MX_SubGHz_Phy_Process>
 80019fa:	e7fc      	b.n	80019f6 <main+0x22>
 80019fc:	48000400 	.word	0x48000400

08001a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b09a      	sub	sp, #104	; 0x68
 8001a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a06:	f107 0320 	add.w	r3, r7, #32
 8001a0a:	2248      	movs	r2, #72	; 0x48
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f00c fa90 	bl	800df34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a14:	f107 0308 	add.w	r3, r7, #8
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
 8001a24:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a26:	f003 fa01 	bl	8004e2c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f7ff ffbc 	bl	80019a8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <SystemClock_Config+0xb0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a38:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <SystemClock_Config+0xb0>)
 8001a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <SystemClock_Config+0xb0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001a4c:	2324      	movs	r3, #36	; 0x24
 8001a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a50:	2381      	movs	r3, #129	; 0x81
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a54:	2301      	movs	r3, #1
 8001a56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001a5c:	23b0      	movs	r3, #176	; 0xb0
 8001a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a64:	f107 0320 	add.w	r3, r7, #32
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f003 fd2b 	bl	80054c4 <HAL_RCC_OscConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001a74:	f000 f81e 	bl	8001ab4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001a78:	234f      	movs	r3, #79	; 0x4f
 8001a7a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	2102      	movs	r1, #2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f004 f8b0 	bl	8005bfc <HAL_RCC_ClockConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001aa2:	f000 f807 	bl	8001ab4 <Error_Handler>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	3768      	adds	r7, #104	; 0x68
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	58000400 	.word	0x58000400

08001ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab8:	b672      	cpsid	i
}
 8001aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001abc:	e7fe      	b.n	8001abc <Error_Handler+0x8>

08001abe <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <LL_APB1_GRP1_EnableClock>:
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001aec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4013      	ands	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
	...

08001b10 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	; 0x30
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	222c      	movs	r2, #44	; 0x2c
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f00c fa09 	bl	800df34 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b22:	4b22      	ldr	r3, [pc, #136]	; (8001bac <MX_RTC_Init+0x9c>)
 8001b24:	4a22      	ldr	r2, [pc, #136]	; (8001bb0 <MX_RTC_Init+0xa0>)
 8001b26:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001b28:	4b20      	ldr	r3, [pc, #128]	; (8001bac <MX_RTC_Init+0x9c>)
 8001b2a:	221f      	movs	r2, #31
 8001b2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <MX_RTC_Init+0x9c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <MX_RTC_Init+0x9c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <MX_RTC_Init+0x9c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <MX_RTC_Init+0x9c>)
 8001b42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b46:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <MX_RTC_Init+0x9c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <MX_RTC_Init+0x9c>)
 8001b50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b56:	4815      	ldr	r0, [pc, #84]	; (8001bac <MX_RTC_Init+0x9c>)
 8001b58:	f004 fd0c 	bl	8006574 <HAL_RTC_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001b62:	f7ff ffa7 	bl	8001ab4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001b66:	4811      	ldr	r0, [pc, #68]	; (8001bac <MX_RTC_Init+0x9c>)
 8001b68:	f004 fffa 	bl	8006b60 <HAL_RTCEx_SetSSRU_IT>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001b72:	f7ff ff9f 	bl	8001ab4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001b82:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b86:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	2200      	movs	r2, #0
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_RTC_Init+0x9c>)
 8001b96:	f004 fd67 	bl	8006668 <HAL_RTC_SetAlarm_IT>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001ba0:	f7ff ff88 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ba4:	bf00      	nop
 8001ba6:	3730      	adds	r7, #48	; 0x30
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000274 	.word	0x20000274
 8001bb0:	40002800 	.word	0x40002800

08001bb4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b090      	sub	sp, #64	; 0x40
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bbc:	f107 0308 	add.w	r3, r7, #8
 8001bc0:	2238      	movs	r2, #56	; 0x38
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f00c f9b5 	bl	800df34 <memset>
  if(rtcHandle->Instance==RTC)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a16      	ldr	r2, [pc, #88]	; (8001c28 <HAL_RTC_MspInit+0x74>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d125      	bne.n	8001c20 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bd8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bde:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001be0:	f107 0308 	add.w	r3, r7, #8
 8001be4:	4618      	mov	r0, r3
 8001be6:	f004 fbab 	bl	8006340 <HAL_RCCEx_PeriphCLKConfig>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001bf0:	f7ff ff60 	bl	8001ab4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bf4:	f7ff ff63 	bl	8001abe <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001bf8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001bfc:	f7ff ff6f 	bl	8001ade <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2100      	movs	r1, #0
 8001c04:	2002      	movs	r0, #2
 8001c06:	f002 fa58 	bl	80040ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	f002 fa6f 	bl	80040ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	202a      	movs	r0, #42	; 0x2a
 8001c16:	f002 fa50 	bl	80040ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001c1a:	202a      	movs	r0, #42	; 0x2a
 8001c1c:	f002 fa67 	bl	80040ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c20:	bf00      	nop
 8001c22:	3740      	adds	r7, #64	; 0x40
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40002800 	.word	0x40002800

08001c2c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	58000400 	.word	0x58000400

08001c44 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001c60:	f001 fb8e 	bl	8003380 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001c64:	f7ff ffe2 	bl	8001c2c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f003 f971 	bl	8004f50 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001c76:	f001 fb91 	bl	800339c <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001c7a:	f000 fe51 	bl	8002920 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001c86:	f001 fb7b 	bl	8003380 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f003 f8db 	bl	8004e48 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001c9a:	f001 fb7f 	bl	800339c <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <NMI_Handler+0x4>

08001cb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <HardFault_Handler+0x4>

08001cba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <MemManage_Handler+0x4>

08001cc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <BusFault_Handler+0x4>

08001cc6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <UsageFault_Handler+0x4>

08001ccc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001d02:	f004 ff69 	bl	8006bd8 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000274 	.word	0x20000274

08001d10 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line 3 Interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(REEDPin_Pin);
 8001d14:	2008      	movs	r0, #8
 8001d16:	f003 f867 	bl	8004de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <DMA1_Channel5_IRQHandler+0x10>)
 8001d26:	f002 fc79 	bl	800461c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000358 	.word	0x20000358

08001d34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <USART1_IRQHandler+0x10>)
 8001d3a:	f005 fdad 	bl	8007898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200002c8 	.word	0x200002c8

08001d48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_BOOT_Pin);
 8001d4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d50:	f003 f84a 	bl	8004de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <RTC_Alarm_IRQHandler+0x10>)
 8001d5e:	f004 fdeb 	bl	8006938 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000274 	.word	0x20000274

08001d6c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001d72:	f005 fa99 	bl	80072a8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200002ac 	.word	0x200002ac

08001d80 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4013      	ands	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001da4:	68fb      	ldr	r3, [r7, #12]
}
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <MX_SUBGHZ_Init+0x20>)
 8001db6:	2210      	movs	r2, #16
 8001db8:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001dba:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_SUBGHZ_Init+0x20>)
 8001dbc:	f004 fff8 	bl	8006db0 <HAL_SUBGHZ_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001dc6:	f7ff fe75 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200002ac 	.word	0x200002ac

08001dd4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f7ff ffcf 	bl	8001d80 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2100      	movs	r1, #0
 8001de6:	2032      	movs	r0, #50	; 0x32
 8001de8:	f002 f967 	bl	80040ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001dec:	2032      	movs	r0, #50	; 0x32
 8001dee:	f002 f97e 	bl	80040ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001e24:	2000      	movs	r0, #0
 8001e26:	f7ff ffe8 	bl	8001dfa <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001e2a:	f00b fb51 	bl	800d4d0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <SystemApp_Init+0x38>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001e34:	f000 f88a 	bl	8001f4c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001e38:	f00a fdf2 	bl	800ca20 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001e3c:	4807      	ldr	r0, [pc, #28]	; (8001e5c <SystemApp_Init+0x3c>)
 8001e3e:	f00a fe8b 	bl	800cb58 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001e42:	2002      	movs	r0, #2
 8001e44:	f00a fe96 	bl	800cb74 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001e48:	f00b f87e 	bl	800cf48 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	2001      	movs	r0, #1
 8001e50:	f00b f8ba 	bl	800cfc8 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200002b8 	.word	0x200002b8
 8001e5c:	08001e6d 	.word	0x08001e6d

08001e60 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001e64:	f00b f8e0 	bl	800d028 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001e76:	f107 0308 	add.w	r3, r7, #8
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f00b faf0 	bl	800d460 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001e86:	9200      	str	r2, [sp, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <TimestampNow+0x3c>)
 8001e8a:	2110      	movs	r1, #16
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f81d 	bl	8001ecc <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7fe f974 	bl	8000180 <strlen>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	08010a00 	.word	0x08010a00

08001eac <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	f00b f858 	bl	800cf68 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2002      	movs	r0, #2
 8001ec4:	f00b f850 	bl	800cf68 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001ecc:	b40c      	push	{r2, r3}
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001ede:	6839      	ldr	r1, [r7, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f00b fe97 	bl	800dc18 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ef4:	b002      	add	sp, #8
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_GetTick+0x24>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001f1e:	f000 f99b 	bl	8002258 <TIMER_IF_GetTimerValue>
 8001f22:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001f24:	687b      	ldr	r3, [r7, #4]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200002b8 	.word	0x200002b8

08001f34 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fa11 	bl	8002366 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001f50:	f001 fa32 	bl	80033b8 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001f54:	f001 fa36 	bl	80033c4 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001f58:	f001 fa3a 	bl	80033d0 <HAL_DBGMCU_DisableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
	return 1;
 8001f64:	2301      	movs	r3, #1
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <_kill>:

int _kill(int pid, int sig)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f78:	f00b ffa4 	bl	800dec4 <__errno>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2216      	movs	r2, #22
 8001f80:	601a      	str	r2, [r3, #0]
	return -1;
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <_exit>:

void _exit (int status)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f96:	f04f 31ff 	mov.w	r1, #4294967295
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffe7 	bl	8001f6e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fa0:	e7fe      	b.n	8001fa0 <_exit+0x12>

08001fa2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	e00a      	b.n	8001fca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fb4:	f3af 8000 	nop.w
 8001fb8:	4601      	mov	r1, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	60ba      	str	r2, [r7, #8]
 8001fc0:	b2ca      	uxtb	r2, r1
 8001fc2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	dbf0      	blt.n	8001fb4 <_read+0x12>
	}

return len;
 8001fd2:	687b      	ldr	r3, [r7, #4]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	e009      	b.n	8002002 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	60ba      	str	r2, [r7, #8]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	3301      	adds	r3, #1
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	429a      	cmp	r2, r3
 8002008:	dbf1      	blt.n	8001fee <_write+0x12>
	}
	return len;
 800200a:	687b      	ldr	r3, [r7, #4]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <_close>:

int _close(int file)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	return -1;
 800201c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800203a:	605a      	str	r2, [r3, #4]
	return 0;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <_isatty>:

int _isatty(int file)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	return 1;
 8002050:	2301      	movs	r3, #1
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
	return 0;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800207c:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <_sbrk+0x5c>)
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <_sbrk+0x60>)
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <_sbrk+0x64>)
 8002092:	4a12      	ldr	r2, [pc, #72]	; (80020dc <_sbrk+0x68>)
 8002094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <_sbrk+0x64>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d207      	bcs.n	80020b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a4:	f00b ff0e 	bl	800dec4 <__errno>
 80020a8:	4603      	mov	r3, r0
 80020aa:	220c      	movs	r2, #12
 80020ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	e009      	b.n	80020c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	4a05      	ldr	r2, [pc, #20]	; (80020d8 <_sbrk+0x64>)
 80020c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020c6:	68fb      	ldr	r3, [r7, #12]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20010000 	.word	0x20010000
 80020d4:	00000400 	.word	0x00000400
 80020d8:	200002bc 	.word	0x200002bc
 80020dc:	20000948 	.word	0x20000948

080020e0 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
	...

080020f8 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <TIMER_IF_Init+0x5c>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	f083 0301 	eor.w	r3, r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01b      	beq.n	8002148 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <TIMER_IF_Init+0x60>)
 8002112:	f04f 32ff 	mov.w	r2, #4294967295
 8002116:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002118:	f7ff fcfa 	bl	8001b10 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 800211c:	f000 f856 	bl	80021cc <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002120:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002124:	480c      	ldr	r0, [pc, #48]	; (8002158 <TIMER_IF_Init+0x60>)
 8002126:	f004 fbab 	bl	8006880 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <TIMER_IF_Init+0x60>)
 800212c:	f04f 32ff 	mov.w	r2, #4294967295
 8002130:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002132:	4809      	ldr	r0, [pc, #36]	; (8002158 <TIMER_IF_Init+0x60>)
 8002134:	f004 fce2 	bl	8006afc <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002138:	2000      	movs	r0, #0
 800213a:	f000 f9d3 	bl	80024e4 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800213e:	f000 f85f 	bl	8002200 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <TIMER_IF_Init+0x5c>)
 8002144:	2201      	movs	r2, #1
 8002146:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002148:	79fb      	ldrb	r3, [r7, #7]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	200002c0 	.word	0x200002c0
 8002158:	20000274 	.word	0x20000274

0800215c <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08e      	sub	sp, #56	; 0x38
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	222c      	movs	r2, #44	; 0x2c
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f00b fede 	bl	800df34 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002178:	f000 f828 	bl	80021cc <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <TIMER_IF_StartTimer+0x68>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	43db      	mvns	r3, r3
 800218e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002194:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002198:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800219a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80021a0:	f107 0308 	add.w	r3, r7, #8
 80021a4:	2201      	movs	r2, #1
 80021a6:	4619      	mov	r1, r3
 80021a8:	4807      	ldr	r0, [pc, #28]	; (80021c8 <TIMER_IF_StartTimer+0x6c>)
 80021aa:	f004 fa5d 	bl	8006668 <HAL_RTC_SetAlarm_IT>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80021b4:	f7ff fc7e 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80021b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3738      	adds	r7, #56	; 0x38
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	200002c4 	.word	0x200002c4
 80021c8:	20000274 	.word	0x20000274

080021cc <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <TIMER_IF_StopTimer+0x2c>)
 80021d8:	2201      	movs	r2, #1
 80021da:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80021dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021e0:	4806      	ldr	r0, [pc, #24]	; (80021fc <TIMER_IF_StopTimer+0x30>)
 80021e2:	f004 fb4d 	bl	8006880 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <TIMER_IF_StopTimer+0x30>)
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80021ee:	79fb      	ldrb	r3, [r7, #7]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40002800 	.word	0x40002800
 80021fc:	20000274 	.word	0x20000274

08002200 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002204:	f000 f98e 	bl	8002524 <GetTimerTicks>
 8002208:	4603      	mov	r3, r0
 800220a:	4a03      	ldr	r2, [pc, #12]	; (8002218 <TIMER_IF_SetTimerContext+0x18>)
 800220c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800220e:	4b02      	ldr	r3, [pc, #8]	; (8002218 <TIMER_IF_SetTimerContext+0x18>)
 8002210:	681b      	ldr	r3, [r3, #0]
}
 8002212:	4618      	mov	r0, r3
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200002c4 	.word	0x200002c4

0800221c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002220:	4b02      	ldr	r3, [pc, #8]	; (800222c <TIMER_IF_GetTimerContext+0x10>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	200002c4 	.word	0x200002c4

08002230 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800223a:	f000 f973 	bl	8002524 <GetTimerTicks>
 800223e:	4602      	mov	r2, r0
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002248:	687b      	ldr	r3, [r7, #4]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200002c4 	.word	0x200002c4

08002258 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <TIMER_IF_GetTimerValue+0x24>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800226a:	f000 f95b 	bl	8002524 <GetTimerTicks>
 800226e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002270:	687b      	ldr	r3, [r7, #4]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200002c0 	.word	0x200002c0

08002280 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800228a:	2303      	movs	r3, #3
 800228c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 800228e:	687b      	ldr	r3, [r7, #4]
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800229a:	b5b0      	push	{r4, r5, r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80022a2:	2100      	movs	r1, #0
 80022a4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	2000      	movs	r0, #0
 80022aa:	460a      	mov	r2, r1
 80022ac:	4603      	mov	r3, r0
 80022ae:	0d95      	lsrs	r5, r2, #22
 80022b0:	0294      	lsls	r4, r2, #10
 80022b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	4620      	mov	r0, r4
 80022bc:	4629      	mov	r1, r5
 80022be:	f7fe ff6f 	bl	80011a0 <__aeabi_uldivmod>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4613      	mov	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bdb0      	pop	{r4, r5, r7, pc}

080022d4 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80022d4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80022d8:	b085      	sub	sp, #20
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80022de:	2100      	movs	r1, #0
 80022e0:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	2000      	movs	r0, #0
 80022e6:	460c      	mov	r4, r1
 80022e8:	4605      	mov	r5, r0
 80022ea:	4620      	mov	r0, r4
 80022ec:	4629      	mov	r1, r5
 80022ee:	f04f 0a00 	mov.w	sl, #0
 80022f2:	f04f 0b00 	mov.w	fp, #0
 80022f6:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80022fa:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80022fe:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002302:	4650      	mov	r0, sl
 8002304:	4659      	mov	r1, fp
 8002306:	1b02      	subs	r2, r0, r4
 8002308:	eb61 0305 	sbc.w	r3, r1, r5
 800230c:	f04f 0000 	mov.w	r0, #0
 8002310:	f04f 0100 	mov.w	r1, #0
 8002314:	0099      	lsls	r1, r3, #2
 8002316:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800231a:	0090      	lsls	r0, r2, #2
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	eb12 0804 	adds.w	r8, r2, r4
 8002324:	eb43 0905 	adc.w	r9, r3, r5
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002334:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002338:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800233c:	4690      	mov	r8, r2
 800233e:	4699      	mov	r9, r3
 8002340:	4640      	mov	r0, r8
 8002342:	4649      	mov	r1, r9
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	0a82      	lsrs	r2, r0, #10
 800234e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002352:	0a8b      	lsrs	r3, r1, #10
 8002354:	4613      	mov	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002358:	68fb      	ldr	r3, [r7, #12]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002364:	4770      	bx	lr

08002366 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ff93 	bl	800229a <TIMER_IF_Convert_ms2Tick>
 8002374:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002376:	f000 f8d5 	bl	8002524 <GetTimerTicks>
 800237a:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800237c:	e000      	b.n	8002380 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 800237e:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002380:	f000 f8d0 	bl	8002524 <GetTimerTicks>
 8002384:	4602      	mov	r2, r0
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	429a      	cmp	r2, r3
 800238e:	d8f6      	bhi.n	800237e <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80023a2:	f00b f9e3 	bl	800d76c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80023b6:	f000 f8a5 	bl	8002504 <TIMER_IF_BkUp_Read_MSBticks>
 80023ba:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3301      	adds	r3, #1
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 f88f 	bl	80024e4 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80023ce:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d2:	b08c      	sub	sp, #48	; 0x30
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80023dc:	f000 f8a2 	bl	8002524 <GetTimerTicks>
 80023e0:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80023e2:	f000 f88f 	bl	8002504 <TIMER_IF_BkUp_Read_MSBticks>
 80023e6:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	2200      	movs	r2, #0
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	60fa      	str	r2, [r7, #12]
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	000b      	movs	r3, r1
 80023fc:	2200      	movs	r2, #0
 80023fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002400:	2000      	movs	r0, #0
 8002402:	460c      	mov	r4, r1
 8002404:	4605      	mov	r5, r0
 8002406:	eb12 0804 	adds.w	r8, r2, r4
 800240a:	eb43 0905 	adc.w	r9, r3, r5
 800240e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002412:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	0a82      	lsrs	r2, r0, #10
 8002420:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002424:	0a8b      	lsrs	r3, r1, #10
 8002426:	4613      	mov	r3, r2
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	2200      	movs	r2, #0
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002438:	f04f 0b00 	mov.w	fp, #0
 800243c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff46 	bl	80022d4 <TIMER_IF_Convert_Tick2ms>
 8002448:	4603      	mov	r3, r0
 800244a:	b29a      	uxth	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002452:	4618      	mov	r0, r3
 8002454:	3730      	adds	r7, #48	; 0x30
 8002456:	46bd      	mov	sp, r7
 8002458:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800245c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	2100      	movs	r1, #0
 8002468:	4803      	ldr	r0, [pc, #12]	; (8002478 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800246a:	f004 fbd9 	bl	8006c20 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000274 	.word	0x20000274

0800247c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	2101      	movs	r1, #1
 8002488:	4803      	ldr	r0, [pc, #12]	; (8002498 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800248a:	f004 fbc9 	bl	8006c20 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000274 	.word	0x20000274

0800249c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80024a6:	2100      	movs	r1, #0
 80024a8:	4804      	ldr	r0, [pc, #16]	; (80024bc <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80024aa:	f004 fbd1 	bl	8006c50 <HAL_RTCEx_BKUPRead>
 80024ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80024b0:	687b      	ldr	r3, [r7, #4]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000274 	.word	0x20000274

080024c0 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80024ca:	2101      	movs	r1, #1
 80024cc:	4804      	ldr	r0, [pc, #16]	; (80024e0 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80024ce:	f004 fbbf 	bl	8006c50 <HAL_RTCEx_BKUPRead>
 80024d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80024d4:	687b      	ldr	r3, [r7, #4]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000274 	.word	0x20000274

080024e4 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	2102      	movs	r1, #2
 80024f0:	4803      	ldr	r0, [pc, #12]	; (8002500 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80024f2:	f004 fb95 	bl	8006c20 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000274 	.word	0x20000274

08002504 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800250a:	2102      	movs	r1, #2
 800250c:	4804      	ldr	r0, [pc, #16]	; (8002520 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800250e:	f004 fb9f 	bl	8006c50 <HAL_RTCEx_BKUPRead>
 8002512:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002514:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000274 	.word	0x20000274

08002524 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800252a:	480b      	ldr	r0, [pc, #44]	; (8002558 <GetTimerTicks+0x34>)
 800252c:	f7ff fdd8 	bl	80020e0 <LL_RTC_TIME_GetSubSecond>
 8002530:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002532:	e003      	b.n	800253c <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002534:	4808      	ldr	r0, [pc, #32]	; (8002558 <GetTimerTicks+0x34>)
 8002536:	f7ff fdd3 	bl	80020e0 <LL_RTC_TIME_GetSubSecond>
 800253a:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800253c:	4806      	ldr	r0, [pc, #24]	; (8002558 <GetTimerTicks+0x34>)
 800253e:	f7ff fdcf 	bl	80020e0 <LL_RTC_TIME_GetSubSecond>
 8002542:	4602      	mov	r2, r0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4293      	cmp	r3, r2
 8002548:	d1f4      	bne.n	8002534 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40002800 	.word	0x40002800

0800255c <LL_AHB2_GRP1_EnableClock>:
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002568:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800256a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4313      	orrs	r3, r2
 8002572:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4013      	ands	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002580:	68fb      	ldr	r3, [r7, #12]
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <LL_APB2_GRP1_EnableClock>:
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002598:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800259a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80025a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4013      	ands	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025b0:	68fb      	ldr	r3, [r7, #12]
}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <LL_APB2_GRP1_DisableClock>:
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80025c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025d2:	4013      	ands	r3, r2
 80025d4:	660b      	str	r3, [r1, #96]	; 0x60
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025e4:	4b22      	ldr	r3, [pc, #136]	; (8002670 <MX_USART1_UART_Init+0x90>)
 80025e6:	4a23      	ldr	r2, [pc, #140]	; (8002674 <MX_USART1_UART_Init+0x94>)
 80025e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025ea:	4b21      	ldr	r3, [pc, #132]	; (8002670 <MX_USART1_UART_Init+0x90>)
 80025ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025f2:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <MX_USART1_UART_Init+0x90>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025f8:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <MX_USART1_UART_Init+0x90>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025fe:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <MX_USART1_UART_Init+0x90>)
 8002600:	2200      	movs	r2, #0
 8002602:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002604:	4b1a      	ldr	r3, [pc, #104]	; (8002670 <MX_USART1_UART_Init+0x90>)
 8002606:	220c      	movs	r2, #12
 8002608:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800260a:	4b19      	ldr	r3, [pc, #100]	; (8002670 <MX_USART1_UART_Init+0x90>)
 800260c:	2200      	movs	r2, #0
 800260e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002610:	4b17      	ldr	r3, [pc, #92]	; (8002670 <MX_USART1_UART_Init+0x90>)
 8002612:	2200      	movs	r2, #0
 8002614:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002616:	4b16      	ldr	r3, [pc, #88]	; (8002670 <MX_USART1_UART_Init+0x90>)
 8002618:	2200      	movs	r2, #0
 800261a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800261c:	4b14      	ldr	r3, [pc, #80]	; (8002670 <MX_USART1_UART_Init+0x90>)
 800261e:	2200      	movs	r2, #0
 8002620:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002622:	4b13      	ldr	r3, [pc, #76]	; (8002670 <MX_USART1_UART_Init+0x90>)
 8002624:	2200      	movs	r2, #0
 8002626:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002628:	4811      	ldr	r0, [pc, #68]	; (8002670 <MX_USART1_UART_Init+0x90>)
 800262a:	f004 fffc 	bl	8007626 <HAL_UART_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002634:	f7ff fa3e 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002638:	2100      	movs	r1, #0
 800263a:	480d      	ldr	r0, [pc, #52]	; (8002670 <MX_USART1_UART_Init+0x90>)
 800263c:	f007 f873 	bl	8009726 <HAL_UARTEx_SetTxFifoThreshold>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002646:	f7ff fa35 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800264a:	2100      	movs	r1, #0
 800264c:	4808      	ldr	r0, [pc, #32]	; (8002670 <MX_USART1_UART_Init+0x90>)
 800264e:	f007 f8a8 	bl	80097a2 <HAL_UARTEx_SetRxFifoThreshold>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002658:	f7ff fa2c 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800265c:	4804      	ldr	r0, [pc, #16]	; (8002670 <MX_USART1_UART_Init+0x90>)
 800265e:	f007 f827 	bl	80096b0 <HAL_UARTEx_EnableFifoMode>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002668:	f7ff fa24 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	200002c8 	.word	0x200002c8
 8002674:	40013800 	.word	0x40013800

08002678 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b096      	sub	sp, #88	; 0x58
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	2238      	movs	r2, #56	; 0x38
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f00b fc4b 	bl	800df34 <memset>
  if(uartHandle->Instance==USART1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a2e      	ldr	r2, [pc, #184]	; (800275c <HAL_UART_MspInit+0xe4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d155      	bne.n	8002754 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026a8:	2301      	movs	r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80026ac:	4b2c      	ldr	r3, [pc, #176]	; (8002760 <HAL_UART_MspInit+0xe8>)
 80026ae:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026b0:	f107 030c 	add.w	r3, r7, #12
 80026b4:	4618      	mov	r0, r3
 80026b6:	f003 fe43 	bl	8006340 <HAL_RCCEx_PeriphCLKConfig>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026c0:	f7ff f9f8 	bl	8001ab4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80026c8:	f7ff ff60 	bl	800258c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026cc:	2002      	movs	r0, #2
 80026ce:	f7ff ff45 	bl	800255c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = UARTUSB_RXPin_Pin|UARTUSB_TXPin_Pin;
 80026d2:	23c0      	movs	r3, #192	; 0xc0
 80026d4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026e2:	2307      	movs	r3, #7
 80026e4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026ea:	4619      	mov	r1, r3
 80026ec:	481d      	ldr	r0, [pc, #116]	; (8002764 <HAL_UART_MspInit+0xec>)
 80026ee:	f002 f905 	bl	80048fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel5;
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_UART_MspInit+0xf0>)
 80026f4:	4a1d      	ldr	r2, [pc, #116]	; (800276c <HAL_UART_MspInit+0xf4>)
 80026f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_UART_MspInit+0xf0>)
 80026fa:	2212      	movs	r2, #18
 80026fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026fe:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <HAL_UART_MspInit+0xf0>)
 8002700:	2210      	movs	r2, #16
 8002702:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_UART_MspInit+0xf0>)
 8002706:	2200      	movs	r2, #0
 8002708:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800270a:	4b17      	ldr	r3, [pc, #92]	; (8002768 <HAL_UART_MspInit+0xf0>)
 800270c:	2280      	movs	r2, #128	; 0x80
 800270e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_UART_MspInit+0xf0>)
 8002712:	2200      	movs	r2, #0
 8002714:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002716:	4b14      	ldr	r3, [pc, #80]	; (8002768 <HAL_UART_MspInit+0xf0>)
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_UART_MspInit+0xf0>)
 800271e:	2200      	movs	r2, #0
 8002720:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_UART_MspInit+0xf0>)
 8002724:	2200      	movs	r2, #0
 8002726:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002728:	480f      	ldr	r0, [pc, #60]	; (8002768 <HAL_UART_MspInit+0xf0>)
 800272a:	f001 fcfd 	bl	8004128 <HAL_DMA_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002734:	f7ff f9be 	bl	8001ab4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <HAL_UART_MspInit+0xf0>)
 800273c:	679a      	str	r2, [r3, #120]	; 0x78
 800273e:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <HAL_UART_MspInit+0xf0>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8002744:	2200      	movs	r2, #0
 8002746:	2103      	movs	r1, #3
 8002748:	2024      	movs	r0, #36	; 0x24
 800274a:	f001 fcb6 	bl	80040ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800274e:	2024      	movs	r0, #36	; 0x24
 8002750:	f001 fccd 	bl	80040ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002754:	bf00      	nop
 8002756:	3758      	adds	r7, #88	; 0x58
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40013800 	.word	0x40013800
 8002760:	00030001 	.word	0x00030001
 8002764:	48000400 	.word	0x48000400
 8002768:	20000358 	.word	0x20000358
 800276c:	40020058 	.word	0x40020058

08002770 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0b      	ldr	r2, [pc, #44]	; (80027ac <HAL_UART_MspDeInit+0x3c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d10f      	bne.n	80027a2 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002782:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002786:	f7ff ff19 	bl	80025bc <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, UARTUSB_RXPin_Pin|UARTUSB_TXPin_Pin);
 800278a:	21c0      	movs	r1, #192	; 0xc0
 800278c:	4808      	ldr	r0, [pc, #32]	; (80027b0 <HAL_UART_MspDeInit+0x40>)
 800278e:	f002 fa15 	bl	8004bbc <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002796:	4618      	mov	r0, r3
 8002798:	f001 fd6e 	bl	8004278 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800279c:	2024      	movs	r0, #36	; 0x24
 800279e:	f001 fcb4 	bl	800410a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40013800 	.word	0x40013800
 80027b0:	48000400 	.word	0x48000400

080027b4 <LL_APB2_GRP1_ForceReset>:
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80027bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	640b      	str	r3, [r1, #64]	; 0x40
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <LL_APB2_GRP1_ReleaseReset>:
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80027de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027ec:	4013      	ands	r3, r2
 80027ee:	640b      	str	r3, [r1, #64]	; 0x40
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
	...

080027fc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <LL_EXTI_EnableIT_0_31+0x24>)
 8002806:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800280a:	4905      	ldr	r1, [pc, #20]	; (8002820 <LL_EXTI_EnableIT_0_31+0x24>)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	58000800 	.word	0x58000800

08002824 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800282c:	4a07      	ldr	r2, [pc, #28]	; (800284c <vcom_Init+0x28>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002832:	f7ff f82f 	bl	8001894 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002836:	f7ff fed3 	bl	80025e0 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 800283a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800283e:	f7ff ffdd 	bl	80027fc <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002842:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	200003bc 	.word	0x200003bc

08002850 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002854:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002858:	f7ff ffac 	bl	80027b4 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 800285c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002860:	f7ff ffb9 	bl	80027d6 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002864:	4804      	ldr	r0, [pc, #16]	; (8002878 <vcom_DeInit+0x28>)
 8002866:	f7ff ff83 	bl	8002770 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800286a:	200f      	movs	r0, #15
 800286c:	f001 fc4d 	bl	800410a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002870:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002872:	4618      	mov	r0, r3
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200002c8 	.word	0x200002c8

0800287c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002888:	887b      	ldrh	r3, [r7, #2]
 800288a:	461a      	mov	r2, r3
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4804      	ldr	r0, [pc, #16]	; (80028a0 <vcom_Trace_DMA+0x24>)
 8002890:	f004 ff70 	bl	8007774 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002894:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	200002c8 	.word	0x200002c8

080028a4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <vcom_ReceiveInit+0x70>)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80028b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028b6:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80028b8:	f107 0308 	add.w	r3, r7, #8
 80028bc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80028c0:	4815      	ldr	r0, [pc, #84]	; (8002918 <vcom_ReceiveInit+0x74>)
 80028c2:	f006 fe68 	bl	8009596 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80028c6:	bf00      	nop
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <vcom_ReceiveInit+0x74>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d6:	d0f7      	beq.n	80028c8 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80028d8:	bf00      	nop
 80028da:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <vcom_ReceiveInit+0x74>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028e8:	d1f7      	bne.n	80028da <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80028ea:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <vcom_ReceiveInit+0x74>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	4b09      	ldr	r3, [pc, #36]	; (8002918 <vcom_ReceiveInit+0x74>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80028f8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80028fa:	4807      	ldr	r0, [pc, #28]	; (8002918 <vcom_ReceiveInit+0x74>)
 80028fc:	f006 fea6 	bl	800964c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002900:	2201      	movs	r2, #1
 8002902:	4906      	ldr	r1, [pc, #24]	; (800291c <vcom_ReceiveInit+0x78>)
 8002904:	4804      	ldr	r0, [pc, #16]	; (8002918 <vcom_ReceiveInit+0x74>)
 8002906:	f004 fedf 	bl	80076c8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800290a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	200003c0 	.word	0x200003c0
 8002918:	200002c8 	.word	0x200002c8
 800291c:	200003b8 	.word	0x200003b8

08002920 <vcom_Resume>:

void vcom_Resume(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002924:	4808      	ldr	r0, [pc, #32]	; (8002948 <vcom_Resume+0x28>)
 8002926:	f004 fe7e 	bl	8007626 <HAL_UART_Init>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002930:	f7ff f8c0 	bl	8001ab4 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002934:	4805      	ldr	r0, [pc, #20]	; (800294c <vcom_Resume+0x2c>)
 8002936:	f001 fbf7 	bl	8004128 <HAL_DMA_Init>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002940:	f7ff f8b8 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002944:	bf00      	nop
 8002946:	bd80      	pop	{r7, pc}
 8002948:	200002c8 	.word	0x200002c8
 800294c:	20000358 	.word	0x20000358

08002950 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a05      	ldr	r2, [pc, #20]	; (8002974 <HAL_UART_TxCpltCallback+0x24>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d103      	bne.n	800296a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_UART_TxCpltCallback+0x28>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2000      	movs	r0, #0
 8002968:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40013800 	.word	0x40013800
 8002978:	200003bc 	.word	0x200003bc

0800297c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <HAL_UART_RxCpltCallback+0x44>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d113      	bne.n	80029b6 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <HAL_UART_RxCpltCallback+0x48>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_UART_RxCpltCallback+0x30>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d105      	bne.n	80029ac <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <HAL_UART_RxCpltCallback+0x48>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2200      	movs	r2, #0
 80029a6:	2101      	movs	r1, #1
 80029a8:	4807      	ldr	r0, [pc, #28]	; (80029c8 <HAL_UART_RxCpltCallback+0x4c>)
 80029aa:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80029ac:	2201      	movs	r2, #1
 80029ae:	4906      	ldr	r1, [pc, #24]	; (80029c8 <HAL_UART_RxCpltCallback+0x4c>)
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f004 fe89 	bl	80076c8 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40013800 	.word	0x40013800
 80029c4:	200003c0 	.word	0x200003c0
 80029c8:	200003b8 	.word	0x200003b8

080029cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029cc:	480d      	ldr	r0, [pc, #52]	; (8002a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029d0:	f000 fc85 	bl	80032de <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029d4:	480c      	ldr	r0, [pc, #48]	; (8002a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80029d6:	490d      	ldr	r1, [pc, #52]	; (8002a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80029d8:	4a0d      	ldr	r2, [pc, #52]	; (8002a10 <LoopForever+0xe>)
  movs r3, #0
 80029da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029dc:	e002      	b.n	80029e4 <LoopCopyDataInit>

080029de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029e2:	3304      	adds	r3, #4

080029e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e8:	d3f9      	bcc.n	80029de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ea:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029ec:	4c0a      	ldr	r4, [pc, #40]	; (8002a18 <LoopForever+0x16>)
  movs r3, #0
 80029ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029f0:	e001      	b.n	80029f6 <LoopFillZerobss>

080029f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029f4:	3204      	adds	r2, #4

080029f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f8:	d3fb      	bcc.n	80029f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029fa:	f00b fa69 	bl	800ded0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029fe:	f7fe ffe9 	bl	80019d4 <main>

08002a02 <LoopForever>:

LoopForever:
    b LoopForever
 8002a02:	e7fe      	b.n	8002a02 <LoopForever>
  ldr   r0, =_estack
 8002a04:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a0c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002a10:	08011224 	.word	0x08011224
  ldr r2, =_sbss
 8002a14:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002a18:	20000944 	.word	0x20000944

08002a1c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a1c:	e7fe      	b.n	8002a1c <ADC_IRQHandler>

08002a1e <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8002a22:	f7ff f9fd 	bl	8001e20 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 8002a26:	f000 f80b 	bl	8002a40 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002a32:	f04f 30ff 	mov.w	r0, #4294967295
 8002a36:	f00a fb49 	bl	800d0cc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <SubghzApp_Init>:
/*Helper Functions*/
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b08b      	sub	sp, #44	; 0x2c
 8002a44:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8002a46:	4b41      	ldr	r3, [pc, #260]	; (8002b4c <SubghzApp_Init+0x10c>)
 8002a48:	4a41      	ldr	r2, [pc, #260]	; (8002b50 <SubghzApp_Init+0x110>)
 8002a4a:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8002a4c:	4b3f      	ldr	r3, [pc, #252]	; (8002b4c <SubghzApp_Init+0x10c>)
 8002a4e:	4a41      	ldr	r2, [pc, #260]	; (8002b54 <SubghzApp_Init+0x114>)
 8002a50:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8002a52:	4b3e      	ldr	r3, [pc, #248]	; (8002b4c <SubghzApp_Init+0x10c>)
 8002a54:	4a40      	ldr	r2, [pc, #256]	; (8002b58 <SubghzApp_Init+0x118>)
 8002a56:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8002a58:	4b3c      	ldr	r3, [pc, #240]	; (8002b4c <SubghzApp_Init+0x10c>)
 8002a5a:	4a40      	ldr	r2, [pc, #256]	; (8002b5c <SubghzApp_Init+0x11c>)
 8002a5c:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8002a5e:	4b3b      	ldr	r3, [pc, #236]	; (8002b4c <SubghzApp_Init+0x10c>)
 8002a60:	4a3f      	ldr	r2, [pc, #252]	; (8002b60 <SubghzApp_Init+0x120>)
 8002a62:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8002a64:	4b3f      	ldr	r3, [pc, #252]	; (8002b64 <SubghzApp_Init+0x124>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4838      	ldr	r0, [pc, #224]	; (8002b4c <SubghzApp_Init+0x10c>)
 8002a6a:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /* Radio Set frequency */
   Radio.SetChannel(RF_FREQUENCY);
 8002a6c:	4b3d      	ldr	r3, [pc, #244]	; (8002b64 <SubghzApp_Init+0x124>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	483d      	ldr	r0, [pc, #244]	; (8002b68 <SubghzApp_Init+0x128>)
 8002a72:	4798      	blx	r3

   /* Radio configuration */
 #if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
   APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 8002a74:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <SubghzApp_Init+0x12c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	2100      	movs	r1, #0
 8002a7a:	2002      	movs	r0, #2
 8002a7c:	f009 ffec 	bl	800ca58 <UTIL_ADV_TRACE_COND_FSend>
   APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 8002a80:	4b3b      	ldr	r3, [pc, #236]	; (8002b70 <SubghzApp_Init+0x130>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	2100      	movs	r1, #0
 8002a86:	2002      	movs	r0, #2
 8002a88:	f009 ffe6 	bl	800ca58 <UTIL_ADV_TRACE_COND_FSend>
   APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 8002a8c:	237d      	movs	r3, #125	; 0x7d
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	4b38      	ldr	r3, [pc, #224]	; (8002b74 <SubghzApp_Init+0x134>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	2100      	movs	r1, #0
 8002a96:	2002      	movs	r0, #2
 8002a98:	f009 ffde 	bl	800ca58 <UTIL_ADV_TRACE_COND_FSend>
   APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 8002a9c:	230c      	movs	r3, #12
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	4b35      	ldr	r3, [pc, #212]	; (8002b78 <SubghzApp_Init+0x138>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	2002      	movs	r0, #2
 8002aa8:	f009 ffd6 	bl	800ca58 <UTIL_ADV_TRACE_COND_FSend>

   Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8002aac:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <SubghzApp_Init+0x124>)
 8002aae:	69dc      	ldr	r4, [r3, #28]
 8002ab0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002ab4:	9308      	str	r3, [sp, #32]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	9307      	str	r3, [sp, #28]
 8002aba:	2300      	movs	r3, #0
 8002abc:	9306      	str	r3, [sp, #24]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	9305      	str	r3, [sp, #20]
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	9304      	str	r3, [sp, #16]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	9303      	str	r3, [sp, #12]
 8002aca:	2308      	movs	r3, #8
 8002acc:	9302      	str	r3, [sp, #8]
 8002ace:	2304      	movs	r3, #4
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	230c      	movs	r3, #12
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2114      	movs	r1, #20
 8002adc:	2001      	movs	r0, #1
 8002ade:	47a0      	blx	r4
                     LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                     LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                     true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

   Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8002ae0:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <SubghzApp_Init+0x124>)
 8002ae2:	699c      	ldr	r4, [r3, #24]
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9308      	str	r3, [sp, #32]
 8002aec:	2300      	movs	r3, #0
 8002aee:	9307      	str	r3, [sp, #28]
 8002af0:	2300      	movs	r3, #0
 8002af2:	9306      	str	r3, [sp, #24]
 8002af4:	2301      	movs	r3, #1
 8002af6:	9305      	str	r3, [sp, #20]
 8002af8:	2300      	movs	r3, #0
 8002afa:	9304      	str	r3, [sp, #16]
 8002afc:	2300      	movs	r3, #0
 8002afe:	9303      	str	r3, [sp, #12]
 8002b00:	2305      	movs	r3, #5
 8002b02:	9302      	str	r3, [sp, #8]
 8002b04:	2308      	movs	r3, #8
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	220c      	movs	r2, #12
 8002b10:	2100      	movs	r1, #0
 8002b12:	2001      	movs	r0, #1
 8002b14:	47a0      	blx	r4
                     LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                     LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                     0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

   Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8002b16:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <SubghzApp_Init+0x124>)
 8002b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1a:	2108      	movs	r1, #8
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	4798      	blx	r3
 #else
 #error "Please define a modulation in the subghz_phy_app.h file."
 #endif /* USE_MODEM_LORA | USE_MODEM_FSK */

   //send Radio to sleep in the beginning
   Radio.Sleep();
 8002b20:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <SubghzApp_Init+0x124>)
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	4798      	blx	r3

  /*task registration*/
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ConfigMode_Idle), UTIL_SEQ_RFU, ConfigModeIdle);
 8002b26:	4a15      	ldr	r2, [pc, #84]	; (8002b7c <SubghzApp_Init+0x13c>)
 8002b28:	2100      	movs	r1, #0
 8002b2a:	2002      	movs	r0, #2
 8002b2c:	f00a fbca 	bl	800d2c4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SyncedWakeup), UTIL_SEQ_RFU, SyncedWakeup);
 8002b30:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <SubghzApp_Init+0x140>)
 8002b32:	2100      	movs	r1, #0
 8002b34:	2004      	movs	r0, #4
 8002b36:	f00a fbc5 	bl	800d2c4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ConfigMode_Idle), CFG_SEQ_Prio_0);
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	2002      	movs	r0, #2
 8002b3e:	f00a fbe3 	bl	800d308 <UTIL_SEQ_SetTask>
  /* USER CODE END SubghzApp_Init_2 */
}
 8002b42:	bf00      	nop
 8002b44:	3704      	adds	r7, #4
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200003c4 	.word	0x200003c4
 8002b50:	08002b85 	.word	0x08002b85
 8002b54:	08002b9d 	.word	0x08002b9d
 8002b58:	08002c25 	.word	0x08002c25
 8002b5c:	08002c3d 	.word	0x08002c3d
 8002b60:	08002c55 	.word	0x08002c55
 8002b64:	08010c8c 	.word	0x08010c8c
 8002b68:	33bca100 	.word	0x33bca100
 8002b6c:	08010a0c 	.word	0x08010a0c
 8002b70:	08010a20 	.word	0x08010a20
 8002b74:	08010a34 	.word	0x08010a34
 8002b78:	08010a48 	.word	0x08010a48
 8002b7c:	08002c6d 	.word	0x08002c6d
 8002b80:	08002d85 	.word	0x08002d85

08002b84 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
	State = TX;
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <OnTxDone+0x14>)
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OnTxDone */
}
 8002b8e:	bf00      	nop
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	2000042d 	.word	0x2000042d

08002b9c <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	4608      	mov	r0, r1
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	817b      	strh	r3, [r7, #10]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	813b      	strh	r3, [r7, #8]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
	/*Only Messages with the correct identifier are relevant*/
	if(payload[0] != 0xFA)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2bfa      	cmp	r3, #250	; 0xfa
 8002bbc:	d120      	bne.n	8002c00 <OnRxDone+0x64>
		return;
	/*If size is not correct, its also not a correct message from master*/
	if (size != PAYLOAD_LEN)
 8002bbe:	897b      	ldrh	r3, [r7, #10]
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d11f      	bne.n	8002c04 <OnRxDone+0x68>
		return;
	/*First Bit must be a 1, because if not, its a message from a slave*/
	if (((payload[0] & 0x80) >> 7) != 1)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	09db      	lsrs	r3, r3, #7
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d11b      	bne.n	8002c08 <OnRxDone+0x6c>
		return;

	State = RX;
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <OnRxDone+0x74>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
	RxBufferSize = size;
 8002bd6:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <OnRxDone+0x78>)
 8002bd8:	897b      	ldrh	r3, [r7, #10]
 8002bda:	8013      	strh	r3, [r2, #0]
	/*Only Copy if Received Data is less than Buffer availible*/
	if (RxBufferSize < RXBUF_LEN){
 8002bdc:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <OnRxDone+0x78>)
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	2b13      	cmp	r3, #19
 8002be2:	d805      	bhi.n	8002bf0 <OnRxDone+0x54>
		memcpy(RxBuffer, payload, size);
 8002be4:	897b      	ldrh	r3, [r7, #10]
 8002be6:	461a      	mov	r2, r3
 8002be8:	68f9      	ldr	r1, [r7, #12]
 8002bea:	480b      	ldr	r0, [pc, #44]	; (8002c18 <OnRxDone+0x7c>)
 8002bec:	f00b f994 	bl	800df18 <memcpy>
	}
	RssiValue = rssi;
 8002bf0:	893b      	ldrh	r3, [r7, #8]
 8002bf2:	b25a      	sxtb	r2, r3
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <OnRxDone+0x80>)
 8002bf6:	701a      	strb	r2, [r3, #0]
	SnrValue = LoraSnr_FskCfo;
 8002bf8:	4a09      	ldr	r2, [pc, #36]	; (8002c20 <OnRxDone+0x84>)
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	7013      	strb	r3, [r2, #0]
 8002bfe:	e004      	b.n	8002c0a <OnRxDone+0x6e>
		return;
 8002c00:	bf00      	nop
 8002c02:	e002      	b.n	8002c0a <OnRxDone+0x6e>
		return;
 8002c04:	bf00      	nop
 8002c06:	e000      	b.n	8002c0a <OnRxDone+0x6e>
		return;
 8002c08:	bf00      	nop
  /* USER CODE END OnRxDone */
}
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	2000042d 	.word	0x2000042d
 8002c14:	20000438 	.word	0x20000438
 8002c18:	2000043c 	.word	0x2000043c
 8002c1c:	2000043a 	.word	0x2000043a
 8002c20:	2000043b 	.word	0x2000043b

08002c24 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
	State = TX_TIMEOUT;
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <OnTxTimeout+0x14>)
 8002c2a:	2205      	movs	r2, #5
 8002c2c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OnTxTimeout */
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	2000042d 	.word	0x2000042d

08002c3c <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
	State = RX_TIMEOUT;
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <OnRxTimeout+0x14>)
 8002c42:	2202      	movs	r2, #2
 8002c44:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OnRxTimeout */
}
 8002c46:	bf00      	nop
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	2000042d 	.word	0x2000042d

08002c54 <OnRxError>:

static void OnRxError(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
	State = RX_ERROR;
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <OnRxError+0x14>)
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OnRxError */
}
 8002c5e:	bf00      	nop
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	2000042d 	.word	0x2000042d

08002c6c <ConfigModeIdle>:

/* USER CODE BEGIN PrFD */
static void ConfigModeIdle(void){
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af02      	add	r7, sp, #8
	//Disable Reed Contact Interrupt in Config Mode (in System-Init all IRQs are enabled)
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8002c72:	2009      	movs	r0, #9
 8002c74:	f001 fa49 	bl	800410a <HAL_NVIC_DisableIRQ>
	//LED Red Blink 1 Hz start
	UTIL_TIMER_Create(&timerLedIdleConf, LEDConfIdle_PERIOD_MS, UTIL_TIMER_ONESHOT, OnledConfIdleEvent, NULL);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <ConfigModeIdle+0xec>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c84:	4835      	ldr	r0, [pc, #212]	; (8002d5c <ConfigModeIdle+0xf0>)
 8002c86:	f00a fc33 	bl	800d4f0 <UTIL_TIMER_Create>
	UTIL_TIMER_Start(&timerLedIdleConf);
 8002c8a:	4834      	ldr	r0, [pc, #208]	; (8002d5c <ConfigModeIdle+0xf0>)
 8002c8c:	f00a fc66 	bl	800d55c <UTIL_TIMER_Start>

	/*Start Reception*/
	State = NONE;
 8002c90:	4b33      	ldr	r3, [pc, #204]	; (8002d60 <ConfigModeIdle+0xf4>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]
	Radio.Rx(0);
 8002c96:	4b33      	ldr	r3, [pc, #204]	; (8002d64 <ConfigModeIdle+0xf8>)
 8002c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	4798      	blx	r3

	/*Wait for commands from master*/
	while(1) {
		if (State == RX_ERROR || State == RX_TIMEOUT){
 8002c9e:	4b30      	ldr	r3, [pc, #192]	; (8002d60 <ConfigModeIdle+0xf4>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d003      	beq.n	8002cae <ConfigModeIdle+0x42>
 8002ca6:	4b2e      	ldr	r3, [pc, #184]	; (8002d60 <ConfigModeIdle+0xf4>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d106      	bne.n	8002cbc <ConfigModeIdle+0x50>
			/*Reset State for next receive*/
			State = NONE;
 8002cae:	4b2c      	ldr	r3, [pc, #176]	; (8002d60 <ConfigModeIdle+0xf4>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
			Radio.Rx(0);
 8002cb4:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <ConfigModeIdle+0xf8>)
 8002cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb8:	2000      	movs	r0, #0
 8002cba:	4798      	blx	r3
			}
		if (State == RX){
 8002cbc:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <ConfigModeIdle+0xf4>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d1ec      	bne.n	8002c9e <ConfigModeIdle+0x32>
			State = NONE;
 8002cc4:	4b26      	ldr	r3, [pc, #152]	; (8002d60 <ConfigModeIdle+0xf4>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
			/* Look what command (fc) from master arrived*/
			uint8_t mastercmd = RxBuffer[1] & 0x0F;
 8002cca:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <ConfigModeIdle+0xfc>)
 8002ccc:	785b      	ldrb	r3, [r3, #1]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	71fb      	strb	r3, [r7, #7]
			uint8_t id = RxBuffer[2] >> 4;
 8002cd4:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <ConfigModeIdle+0xfc>)
 8002cd6:	789b      	ldrb	r3, [r3, #2]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	71bb      	strb	r3, [r7, #6]
			/*If sync and register command:*/
			if (mastercmd == 1){
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d106      	bne.n	8002cf0 <ConfigModeIdle+0x84>
				memcpy(&mins_to_WakeupSync, RxBuffer+3, 4);
 8002ce2:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <ConfigModeIdle+0x100>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <ConfigModeIdle+0x104>)
 8002cea:	601a      	str	r2, [r3, #0]
				answerMasterSync();
 8002cec:	f000 f8c2 	bl	8002e74 <answerMasterSync>
			}
			/*If sleepmode start command and own id*/
			if (mastercmd == 8 && id == ownID){
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d124      	bne.n	8002d40 <ConfigModeIdle+0xd4>
 8002cf6:	4b1f      	ldr	r3, [pc, #124]	; (8002d74 <ConfigModeIdle+0x108>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	79ba      	ldrb	r2, [r7, #6]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d11f      	bne.n	8002d40 <ConfigModeIdle+0xd4>
				memcpy(&mins_to_WakeupSync, RxBuffer+3, 4);
 8002d00:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <ConfigModeIdle+0x100>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <ConfigModeIdle+0x104>)
 8002d08:	601a      	str	r2, [r3, #0]
				answerMasterSleep();
 8002d0a:	f000 f937 	bl	8002f7c <answerMasterSleep>
				/*End Config Mode*/
				Radio.Sleep();
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <ConfigModeIdle+0xf8>)
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	4798      	blx	r3
				UTIL_TIMER_Stop(&timerLedIdleConf);
 8002d14:	4811      	ldr	r0, [pc, #68]	; (8002d5c <ConfigModeIdle+0xf0>)
 8002d16:	f00a fc8f 	bl	800d638 <UTIL_TIMER_Stop>
				HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d20:	4815      	ldr	r0, [pc, #84]	; (8002d78 <ConfigModeIdle+0x10c>)
 8002d22:	f002 f830 	bl	8004d86 <HAL_GPIO_WritePin>
				/*Start timer for synced wakeup interval*/
				UTIL_TIMER_Create(&timerSleepWakeup, 60000, UTIL_TIMER_ONESHOT, timerSleepWakeupEvent, NULL); //every min, mins++
 8002d26:	2300      	movs	r3, #0
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <ConfigModeIdle+0x110>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f64e 2160 	movw	r1, #60000	; 0xea60
 8002d32:	4813      	ldr	r0, [pc, #76]	; (8002d80 <ConfigModeIdle+0x114>)
 8002d34:	f00a fbdc 	bl	800d4f0 <UTIL_TIMER_Create>
				UTIL_TIMER_Start(&timerSleepWakeup);
 8002d38:	4811      	ldr	r0, [pc, #68]	; (8002d80 <ConfigModeIdle+0x114>)
 8002d3a:	f00a fc0f 	bl	800d55c <UTIL_TIMER_Start>
				return;
 8002d3e:	e007      	b.n	8002d50 <ConfigModeIdle+0xe4>
			}
			State = NONE;
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <ConfigModeIdle+0xf4>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	701a      	strb	r2, [r3, #0]
			Radio.Rx(0);
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <ConfigModeIdle+0xf8>)
 8002d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	4798      	blx	r3
		if (State == RX_ERROR || State == RX_TIMEOUT){
 8002d4e:	e7a6      	b.n	8002c9e <ConfigModeIdle+0x32>
		}
	}
}
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	080030a1 	.word	0x080030a1
 8002d5c:	200003f8 	.word	0x200003f8
 8002d60:	2000042d 	.word	0x2000042d
 8002d64:	08010c8c 	.word	0x08010c8c
 8002d68:	2000043c 	.word	0x2000043c
 8002d6c:	2000043f 	.word	0x2000043f
 8002d70:	20000004 	.word	0x20000004
 8002d74:	20000000 	.word	0x20000000
 8002d78:	48000400 	.word	0x48000400
 8002d7c:	080030c9 	.word	0x080030c9
 8002d80:	200003e0 	.word	0x200003e0

08002d84 <SyncedWakeup>:

static void SyncedWakeup(void){
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(LED_Board_GPIO_Port, LED_Board_Pin, 0);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2120      	movs	r1, #32
 8002d8e:	4831      	ldr	r0, [pc, #196]	; (8002e54 <SyncedWakeup+0xd0>)
 8002d90:	f001 fff9 	bl	8004d86 <HAL_GPIO_WritePin>
	/*Start Timer, after this time it goes back to sleep for sure*/
	UTIL_TIMER_Create(&timerWakedup, 30000, UTIL_TIMER_ONESHOT, onwakeuptimeover, NULL);
 8002d94:	2300      	movs	r3, #0
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <SyncedWakeup+0xd4>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f247 5130 	movw	r1, #30000	; 0x7530
 8002da0:	482e      	ldr	r0, [pc, #184]	; (8002e5c <SyncedWakeup+0xd8>)
 8002da2:	f00a fba5 	bl	800d4f0 <UTIL_TIMER_Create>
	wakeuptimeover = 0;
 8002da6:	4b2e      	ldr	r3, [pc, #184]	; (8002e60 <SyncedWakeup+0xdc>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
	UTIL_TIMER_Start(&timerWakedup);
 8002dac:	482b      	ldr	r0, [pc, #172]	; (8002e5c <SyncedWakeup+0xd8>)
 8002dae:	f00a fbd5 	bl	800d55c <UTIL_TIMER_Start>
	/*While time is not over, wait for master poll*/
	while(!wakeuptimeover){
 8002db2:	e03f      	b.n	8002e34 <SyncedWakeup+0xb0>
		State = NONE;
 8002db4:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <SyncedWakeup+0xe0>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]
		Radio.Rx(0);
 8002dba:	4b2b      	ldr	r3, [pc, #172]	; (8002e68 <SyncedWakeup+0xe4>)
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	4798      	blx	r3
		if (State == RX_ERROR || State == RX_TIMEOUT){
 8002dc2:	4b28      	ldr	r3, [pc, #160]	; (8002e64 <SyncedWakeup+0xe0>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d003      	beq.n	8002dd2 <SyncedWakeup+0x4e>
 8002dca:	4b26      	ldr	r3, [pc, #152]	; (8002e64 <SyncedWakeup+0xe0>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d106      	bne.n	8002de0 <SyncedWakeup+0x5c>
			/*If Error occurs, try fetching another*/
			State = NONE;
 8002dd2:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <SyncedWakeup+0xe0>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
			Radio.Rx(0);
 8002dd8:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <SyncedWakeup+0xe4>)
 8002dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ddc:	2000      	movs	r0, #0
 8002dde:	4798      	blx	r3
		}
		if (State == RX){
 8002de0:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <SyncedWakeup+0xe0>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d125      	bne.n	8002e34 <SyncedWakeup+0xb0>
			State = NONE;
 8002de8:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <SyncedWakeup+0xe0>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
			/* Look what command (fc) from master arrived*/
			uint8_t mastercmd = RxBuffer[1] & 0x0F;
 8002dee:	4b1f      	ldr	r3, [pc, #124]	; (8002e6c <SyncedWakeup+0xe8>)
 8002df0:	785b      	ldrb	r3, [r3, #1]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	71fb      	strb	r3, [r7, #7]
			uint8_t id = RxBuffer[2] >> 4;
 8002df8:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <SyncedWakeup+0xe8>)
 8002dfa:	789b      	ldrb	r3, [r3, #2]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	71bb      	strb	r3, [r7, #6]
			/*If id is the own and mastercmd is "polling"*/
			if (mastercmd == 4 && id == ownID){
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d112      	bne.n	8002e2c <SyncedWakeup+0xa8>
 8002e06:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <SyncedWakeup+0xec>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	79ba      	ldrb	r2, [r7, #6]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d10d      	bne.n	8002e2c <SyncedWakeup+0xa8>
				answerMasterTrapPoll();
 8002e10:	f000 f8f4 	bl	8002ffc <answerMasterTrapPoll>
				UTIL_TIMER_Stop(&timerWakedup);
 8002e14:	4811      	ldr	r0, [pc, #68]	; (8002e5c <SyncedWakeup+0xd8>)
 8002e16:	f00a fc0f 	bl	800d638 <UTIL_TIMER_Stop>
				Radio.Sleep();
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <SyncedWakeup+0xe4>)
 8002e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1e:	4798      	blx	r3
				HAL_GPIO_WritePin(LED_Board_GPIO_Port, LED_Board_Pin, 1);
 8002e20:	2201      	movs	r2, #1
 8002e22:	2120      	movs	r1, #32
 8002e24:	480b      	ldr	r0, [pc, #44]	; (8002e54 <SyncedWakeup+0xd0>)
 8002e26:	f001 ffae 	bl	8004d86 <HAL_GPIO_WritePin>
				return;
 8002e2a:	e010      	b.n	8002e4e <SyncedWakeup+0xca>
			}
			else{
				/*IF it was for someone else, try fetching another*/
				Radio.Rx(0);
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <SyncedWakeup+0xe4>)
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e30:	2000      	movs	r0, #0
 8002e32:	4798      	blx	r3
	while(!wakeuptimeover){
 8002e34:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <SyncedWakeup+0xdc>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0bb      	beq.n	8002db4 <SyncedWakeup+0x30>
			}
		}
	}
	Radio.Sleep();
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <SyncedWakeup+0xe4>)
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	4798      	blx	r3
	HAL_GPIO_WritePin(LED_Board_GPIO_Port, LED_Board_Pin, 1);
 8002e42:	2201      	movs	r2, #1
 8002e44:	2120      	movs	r1, #32
 8002e46:	4803      	ldr	r0, [pc, #12]	; (8002e54 <SyncedWakeup+0xd0>)
 8002e48:	f001 ff9d 	bl	8004d86 <HAL_GPIO_WritePin>
	return;
 8002e4c:	bf00      	nop


}
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	48000400 	.word	0x48000400
 8002e58:	08003111 	.word	0x08003111
 8002e5c:	20000410 	.word	0x20000410
 8002e60:	2000042c 	.word	0x2000042c
 8002e64:	2000042d 	.word	0x2000042d
 8002e68:	08010c8c 	.word	0x08010c8c
 8002e6c:	2000043c 	.word	0x2000043c
 8002e70:	20000000 	.word	0x20000000

08002e74 <answerMasterSync>:

static void answerMasterSync(void){
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
	  uint8_t i = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	71fb      	strb	r3, [r7, #7]
	  /*fills tx buffer*/
	  memset(BufferTx, 0x0, PAYLOAD_LEN);
 8002e7e:	2208      	movs	r2, #8
 8002e80:	2100      	movs	r1, #0
 8002e82:	4839      	ldr	r0, [pc, #228]	; (8002f68 <answerMasterSync+0xf4>)
 8002e84:	f00b f856 	bl	800df34 <memset>
	  BufferTx[0] = 0xFA; //Identifier, Message belongs to Trap devices
 8002e88:	4b37      	ldr	r3, [pc, #220]	; (8002f68 <answerMasterSync+0xf4>)
 8002e8a:	22fa      	movs	r2, #250	; 0xfa
 8002e8c:	701a      	strb	r2, [r3, #0]
	  BufferTx[1] = 0x00; //Function -> Message from Slave, Acknoledge
 8002e8e:	4b36      	ldr	r3, [pc, #216]	; (8002f68 <answerMasterSync+0xf4>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	705a      	strb	r2, [r3, #1]
	  BufferTx[2] = ownID << 4; //Slave ID
 8002e94:	4b35      	ldr	r3, [pc, #212]	; (8002f6c <answerMasterSync+0xf8>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	4b32      	ldr	r3, [pc, #200]	; (8002f68 <answerMasterSync+0xf4>)
 8002e9e:	709a      	strb	r2, [r3, #2]
	  /*Data*/
	  BufferTx[3] = (uint8_t)Ausgabe_Akkustand(Berechnung_Akkustand(R9, R8));
 8002ea0:	f24b 21e8 	movw	r1, #45800	; 0xb2e8
 8002ea4:	f643 2098 	movw	r0, #15000	; 0x3a98
 8002ea8:	f7fe fbc2 	bl	8001630 <Berechnung_Akkustand>
 8002eac:	4603      	mov	r3, r0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fc1a 	bl	80016e8 <Ausgabe_Akkustand>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <answerMasterSync+0xf4>)
 8002eba:	70da      	strb	r2, [r3, #3]
	  BufferTx[4] = 0x00;
 8002ebc:	4b2a      	ldr	r3, [pc, #168]	; (8002f68 <answerMasterSync+0xf4>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	711a      	strb	r2, [r3, #4]
	  BufferTx[5] = 0x00;
 8002ec2:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <answerMasterSync+0xf4>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	715a      	strb	r2, [r3, #5]
	  BufferTx[6] = 0x00;
 8002ec8:	4b27      	ldr	r3, [pc, #156]	; (8002f68 <answerMasterSync+0xf4>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	719a      	strb	r2, [r3, #6]
	  BufferTx[7] = 0x00;
 8002ece:	4b26      	ldr	r3, [pc, #152]	; (8002f68 <answerMasterSync+0xf4>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	71da      	strb	r2, [r3, #7]

	  /*Send Answer 3 times with a random delay between 0 and 6 seconds in whole seconds, because on-air-time can be up to 1 second*/
	  for (i = 0; i<3; i++){
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	71fb      	strb	r3, [r7, #7]
 8002ed8:	e038      	b.n	8002f4c <answerMasterSync+0xd8>
		  srand(HAL_GetTick());//Set random number seed
 8002eda:	f7ff f817 	bl	8001f0c <HAL_GetTick>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f00b fc8b 	bl	800e7fc <srand>
		  uint16_t rnddelay = (rand()%6)*1500;
 8002ee6:	f00b fcb7 	bl	800e858 <rand>
 8002eea:	4602      	mov	r2, r0
 8002eec:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <answerMasterSync+0xfc>)
 8002eee:	fb83 3102 	smull	r3, r1, r3, r2
 8002ef2:	17d3      	asrs	r3, r2, #31
 8002ef4:	1ac9      	subs	r1, r1, r3
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	440b      	add	r3, r1
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	1ad1      	subs	r1, r2, r3
 8002f00:	b28b      	uxth	r3, r1
 8002f02:	461a      	mov	r2, r3
 8002f04:	0092      	lsls	r2, r2, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	0091      	lsls	r1, r2, #2
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4413      	add	r3, r2
 8002f12:	461a      	mov	r2, r3
 8002f14:	0112      	lsls	r2, r2, #4
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	80bb      	strh	r3, [r7, #4]
		  HAL_Delay(rnddelay);
 8002f1c:	88bb      	ldrh	r3, [r7, #4]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff f808 	bl	8001f34 <HAL_Delay>
		  State = NONE;
 8002f24:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <answerMasterSync+0x100>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	701a      	strb	r2, [r3, #0]
		  Radio.Send(BufferTx, PAYLOAD_LEN);
 8002f2a:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <answerMasterSync+0x104>)
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	2108      	movs	r1, #8
 8002f30:	480d      	ldr	r0, [pc, #52]	; (8002f68 <answerMasterSync+0xf4>)
 8002f32:	4798      	blx	r3
		  /*Wait until LoRa module has done someting*/
		  while (State != TX && State != TX_TIMEOUT);
 8002f34:	bf00      	nop
 8002f36:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <answerMasterSync+0x100>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d003      	beq.n	8002f46 <answerMasterSync+0xd2>
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <answerMasterSync+0x100>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b05      	cmp	r3, #5
 8002f44:	d1f7      	bne.n	8002f36 <answerMasterSync+0xc2>
	  for (i = 0; i<3; i++){
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	71fb      	strb	r3, [r7, #7]
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d9c3      	bls.n	8002eda <answerMasterSync+0x66>
	  }

	  /*return in config mode idle*/
	  State = NONE;
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <answerMasterSync+0x100>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
	  Radio.Rx(0);
 8002f58:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <answerMasterSync+0x104>)
 8002f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	4798      	blx	r3
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000430 	.word	0x20000430
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	2aaaaaab 	.word	0x2aaaaaab
 8002f74:	2000042d 	.word	0x2000042d
 8002f78:	08010c8c 	.word	0x08010c8c

08002f7c <answerMasterSleep>:

static void answerMasterSleep(void){
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
	  /*fills tx buffer*/
	  memset(BufferTx, 0x0, PAYLOAD_LEN);
 8002f80:	2208      	movs	r2, #8
 8002f82:	2100      	movs	r1, #0
 8002f84:	4819      	ldr	r0, [pc, #100]	; (8002fec <answerMasterSleep+0x70>)
 8002f86:	f00a ffd5 	bl	800df34 <memset>
	  BufferTx[0] = 0xFA; //Identifier, Message belongs to Trap devices
 8002f8a:	4b18      	ldr	r3, [pc, #96]	; (8002fec <answerMasterSleep+0x70>)
 8002f8c:	22fa      	movs	r2, #250	; 0xfa
 8002f8e:	701a      	strb	r2, [r3, #0]
	  BufferTx[1] = 0x02; //Function -> Message from Slave, Acknoledge for sleepmode
 8002f90:	4b16      	ldr	r3, [pc, #88]	; (8002fec <answerMasterSleep+0x70>)
 8002f92:	2202      	movs	r2, #2
 8002f94:	705a      	strb	r2, [r3, #1]
	  BufferTx[2] = ownID <<4; //Slave ID
 8002f96:	4b16      	ldr	r3, [pc, #88]	; (8002ff0 <answerMasterSleep+0x74>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	4b13      	ldr	r3, [pc, #76]	; (8002fec <answerMasterSleep+0x70>)
 8002fa0:	709a      	strb	r2, [r3, #2]
	  /*Data*/
	  BufferTx[3] = 0x00;
 8002fa2:	4b12      	ldr	r3, [pc, #72]	; (8002fec <answerMasterSleep+0x70>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	70da      	strb	r2, [r3, #3]
	  BufferTx[4] = 0x00;
 8002fa8:	4b10      	ldr	r3, [pc, #64]	; (8002fec <answerMasterSleep+0x70>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	711a      	strb	r2, [r3, #4]
	  BufferTx[5] = 0x00;
 8002fae:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <answerMasterSleep+0x70>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	715a      	strb	r2, [r3, #5]
	  BufferTx[6] = 0x00;
 8002fb4:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <answerMasterSleep+0x70>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	719a      	strb	r2, [r3, #6]
	  BufferTx[7] = 0x00;
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <answerMasterSleep+0x70>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	71da      	strb	r2, [r3, #7]

	  State = NONE;
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <answerMasterSleep+0x78>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	701a      	strb	r2, [r3, #0]
	  Radio.Send(BufferTx, PAYLOAD_LEN);
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <answerMasterSleep+0x7c>)
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	2108      	movs	r1, #8
 8002fcc:	4807      	ldr	r0, [pc, #28]	; (8002fec <answerMasterSleep+0x70>)
 8002fce:	4798      	blx	r3
	  /*Wait until LoRa module has done someting*/
	  while (State != TX && State != TX_TIMEOUT);
 8002fd0:	bf00      	nop
 8002fd2:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <answerMasterSleep+0x78>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d003      	beq.n	8002fe2 <answerMasterSleep+0x66>
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <answerMasterSleep+0x78>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	d1f7      	bne.n	8002fd2 <answerMasterSleep+0x56>

	  /*return*/
	  State = NONE;
 8002fe2:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <answerMasterSleep+0x78>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
}
 8002fe8:	bf00      	nop
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000430 	.word	0x20000430
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	2000042d 	.word	0x2000042d
 8002ff8:	08010c8c 	.word	0x08010c8c

08002ffc <answerMasterTrapPoll>:

static void answerMasterTrapPoll(void){
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
	  /*fills tx buffer*/
	  memset(BufferTx, 0x0, PAYLOAD_LEN);
 8003000:	2208      	movs	r2, #8
 8003002:	2100      	movs	r1, #0
 8003004:	4821      	ldr	r0, [pc, #132]	; (800308c <answerMasterTrapPoll+0x90>)
 8003006:	f00a ff95 	bl	800df34 <memset>
	  BufferTx[0] = 0xFA; //Identifier, Message belongs to Trap devices
 800300a:	4b20      	ldr	r3, [pc, #128]	; (800308c <answerMasterTrapPoll+0x90>)
 800300c:	22fa      	movs	r2, #250	; 0xfa
 800300e:	701a      	strb	r2, [r3, #0]
	  BufferTx[1] = 0x00; //Function -> Message from Slave, Acknoledge
 8003010:	4b1e      	ldr	r3, [pc, #120]	; (800308c <answerMasterTrapPoll+0x90>)
 8003012:	2200      	movs	r2, #0
 8003014:	705a      	strb	r2, [r3, #1]
	  BufferTx[2] = ownID <<4; //Slave ID
 8003016:	4b1e      	ldr	r3, [pc, #120]	; (8003090 <answerMasterTrapPoll+0x94>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4b1b      	ldr	r3, [pc, #108]	; (800308c <answerMasterTrapPoll+0x90>)
 8003020:	709a      	strb	r2, [r3, #2]
	  /*Data*/
	  BufferTx[3] = (uint8_t)Ausgabe_Akkustand(Berechnung_Akkustand(R9, R8));
 8003022:	f24b 21e8 	movw	r1, #45800	; 0xb2e8
 8003026:	f643 2098 	movw	r0, #15000	; 0x3a98
 800302a:	f7fe fb01 	bl	8001630 <Berechnung_Akkustand>
 800302e:	4603      	mov	r3, r0
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe fb59 	bl	80016e8 <Ausgabe_Akkustand>
 8003036:	4603      	mov	r3, r0
 8003038:	b2da      	uxtb	r2, r3
 800303a:	4b14      	ldr	r3, [pc, #80]	; (800308c <answerMasterTrapPoll+0x90>)
 800303c:	70da      	strb	r2, [r3, #3]
	  BufferTx[4] = (uint8_t)HAL_GPIO_ReadPin(REEDPin_GPIO_Port, REEDPin_Pin);
 800303e:	2108      	movs	r1, #8
 8003040:	4814      	ldr	r0, [pc, #80]	; (8003094 <answerMasterTrapPoll+0x98>)
 8003042:	f001 fe89 	bl	8004d58 <HAL_GPIO_ReadPin>
 8003046:	4603      	mov	r3, r0
 8003048:	461a      	mov	r2, r3
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <answerMasterTrapPoll+0x90>)
 800304c:	711a      	strb	r2, [r3, #4]
	  BufferTx[5] = 0x00;
 800304e:	4b0f      	ldr	r3, [pc, #60]	; (800308c <answerMasterTrapPoll+0x90>)
 8003050:	2200      	movs	r2, #0
 8003052:	715a      	strb	r2, [r3, #5]
	  BufferTx[6] = 0x00;
 8003054:	4b0d      	ldr	r3, [pc, #52]	; (800308c <answerMasterTrapPoll+0x90>)
 8003056:	2200      	movs	r2, #0
 8003058:	719a      	strb	r2, [r3, #6]
	  BufferTx[7] = 0x00;
 800305a:	4b0c      	ldr	r3, [pc, #48]	; (800308c <answerMasterTrapPoll+0x90>)
 800305c:	2200      	movs	r2, #0
 800305e:	71da      	strb	r2, [r3, #7]

	  State = NONE;
 8003060:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <answerMasterTrapPoll+0x9c>)
 8003062:	2200      	movs	r2, #0
 8003064:	701a      	strb	r2, [r3, #0]
	  Radio.Send(BufferTx, PAYLOAD_LEN);
 8003066:	4b0d      	ldr	r3, [pc, #52]	; (800309c <answerMasterTrapPoll+0xa0>)
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	2108      	movs	r1, #8
 800306c:	4807      	ldr	r0, [pc, #28]	; (800308c <answerMasterTrapPoll+0x90>)
 800306e:	4798      	blx	r3
	  /*Wait until LoRa module has done someting*/
	  while (State != TX && State != TX_TIMEOUT);
 8003070:	bf00      	nop
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <answerMasterTrapPoll+0x9c>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b04      	cmp	r3, #4
 8003078:	d003      	beq.n	8003082 <answerMasterTrapPoll+0x86>
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <answerMasterTrapPoll+0x9c>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b05      	cmp	r3, #5
 8003080:	d1f7      	bne.n	8003072 <answerMasterTrapPoll+0x76>

	  /*return*/
	  State = NONE;
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <answerMasterTrapPoll+0x9c>)
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000430 	.word	0x20000430
 8003090:	20000000 	.word	0x20000000
 8003094:	48000400 	.word	0x48000400
 8003098:	2000042d 	.word	0x2000042d
 800309c:	08010c8c 	.word	0x08010c8c

080030a0 <OnledConfIdleEvent>:


static void OnledConfIdleEvent(void *context){
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin); /* LED_Red*/
 80030a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030ac:	4804      	ldr	r0, [pc, #16]	; (80030c0 <OnledConfIdleEvent+0x20>)
 80030ae:	f001 fe81 	bl	8004db4 <HAL_GPIO_TogglePin>
  UTIL_TIMER_Start(&timerLedIdleConf);
 80030b2:	4804      	ldr	r0, [pc, #16]	; (80030c4 <OnledConfIdleEvent+0x24>)
 80030b4:	f00a fa52 	bl	800d55c <UTIL_TIMER_Start>
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	48000400 	.word	0x48000400
 80030c4:	200003f8 	.word	0x200003f8

080030c8 <timerSleepWakeupEvent>:

static void timerSleepWakeupEvent(void *context){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	mins_passed++;
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <timerSleepWakeupEvent+0x3c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3301      	adds	r3, #1
 80030d6:	4a0b      	ldr	r2, [pc, #44]	; (8003104 <timerSleepWakeupEvent+0x3c>)
 80030d8:	6013      	str	r3, [r2, #0]
	/*Start timer right again, same as in slaves.
	*because this way wakeup time interval will stay
	*the same most likely, independent from different amout of code
	*done during waked up process  */
	UTIL_TIMER_Start(&timerSleepWakeup);
 80030da:	480b      	ldr	r0, [pc, #44]	; (8003108 <timerSleepWakeupEvent+0x40>)
 80030dc:	f00a fa3e 	bl	800d55c <UTIL_TIMER_Start>
	if (mins_passed >= mins_to_WakeupSync){
 80030e0:	4b08      	ldr	r3, [pc, #32]	; (8003104 <timerSleepWakeupEvent+0x3c>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b09      	ldr	r3, [pc, #36]	; (800310c <timerSleepWakeupEvent+0x44>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d306      	bcc.n	80030fa <timerSleepWakeupEvent+0x32>
		mins_passed = 0;
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <timerSleepWakeupEvent+0x3c>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SyncedWakeup), CFG_SEQ_Prio_0);
 80030f2:	2100      	movs	r1, #0
 80030f4:	2004      	movs	r0, #4
 80030f6:	f00a f907 	bl	800d308 <UTIL_SEQ_SetTask>
	}
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000428 	.word	0x20000428
 8003108:	200003e0 	.word	0x200003e0
 800310c:	20000004 	.word	0x20000004

08003110 <onwakeuptimeover>:

static void onwakeuptimeover(void *context){
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
	wakeuptimeover = true;
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <onwakeuptimeover+0x18>)
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr
 8003128:	2000042c 	.word	0x2000042c

0800312c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 8003130:	f000 f83e 	bl	80031b0 <BSP_RADIO_Init>
 8003134:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8003136:	4618      	mov	r0, r3
 8003138:	bd80      	pop	{r7, pc}

0800313a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	4603      	mov	r3, r0
 8003142:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f866 	bl	8003218 <BSP_RADIO_ConfigRFSwitch>
 800314c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800315a:	f000 f8ab 	bl	80032b4 <BSP_RADIO_GetTxConfig>
 800315e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8003160:	4618      	mov	r0, r3
 8003162:	bd80      	pop	{r7, pc}

08003164 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 8003168:	f000 f8ab 	bl	80032c2 <BSP_RADIO_IsTCXO>
 800316c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800316e:	4618      	mov	r0, r3
 8003170:	bd80      	pop	{r7, pc}

08003172 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 8003176:	f000 f8ab 	bl	80032d0 <BSP_RADIO_IsDCDC>
 800317a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800317c:	4618      	mov	r0, r3
 800317e:	bd80      	pop	{r7, pc}

08003180 <LL_AHB2_GRP1_EnableClock>:
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800318e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4313      	orrs	r3, r2
 8003196:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4013      	ands	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031a4:	68fb      	ldr	r3, [r7, #12]
}
 80031a6:	bf00      	nop
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80031b6:	1d3b      	adds	r3, r7, #4
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL1_GPIO_CLK_ENABLE();
 80031c4:	2001      	movs	r0, #1
 80031c6:	f7ff ffdb 	bl	8003180 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80031ca:	2310      	movs	r3, #16
 80031cc:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80031ce:	2301      	movs	r3, #1
 80031d0:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d6:	2303      	movs	r3, #3
 80031d8:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80031da:	1d3b      	adds	r3, r7, #4
 80031dc:	4619      	mov	r1, r3
 80031de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031e2:	f001 fb8b 	bl	80048fc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80031e6:	2320      	movs	r3, #32
 80031e8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80031ea:	1d3b      	adds	r3, r7, #4
 80031ec:	4619      	mov	r1, r3
 80031ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031f2:	f001 fb83 	bl	80048fc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80031f6:	2200      	movs	r2, #0
 80031f8:	2120      	movs	r1, #32
 80031fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031fe:	f001 fdc2 	bl	8004d86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003202:	2200      	movs	r2, #0
 8003204:	2110      	movs	r1, #16
 8003206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800320a:	f001 fdbc 	bl	8004d86 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d83f      	bhi.n	80032a8 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003228:	a201      	add	r2, pc, #4	; (adr r2, 8003230 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322e:	bf00      	nop
 8003230:	08003241 	.word	0x08003241
 8003234:	0800325b 	.word	0x0800325b
 8003238:	08003275 	.word	0x08003275
 800323c:	0800328f 	.word	0x0800328f
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003240:	2200      	movs	r2, #0
 8003242:	2110      	movs	r1, #16
 8003244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003248:	f001 fd9d 	bl	8004d86 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800324c:	2200      	movs	r2, #0
 800324e:	2120      	movs	r1, #32
 8003250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003254:	f001 fd97 	bl	8004d86 <HAL_GPIO_WritePin>
      break;      
 8003258:	e027      	b.n	80032aa <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800325a:	2201      	movs	r2, #1
 800325c:	2110      	movs	r1, #16
 800325e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003262:	f001 fd90 	bl	8004d86 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003266:	2200      	movs	r2, #0
 8003268:	2120      	movs	r1, #32
 800326a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800326e:	f001 fd8a 	bl	8004d86 <HAL_GPIO_WritePin>
      break;
 8003272:	e01a      	b.n	80032aa <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003274:	2201      	movs	r2, #1
 8003276:	2110      	movs	r1, #16
 8003278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800327c:	f001 fd83 	bl	8004d86 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003280:	2201      	movs	r2, #1
 8003282:	2120      	movs	r1, #32
 8003284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003288:	f001 fd7d 	bl	8004d86 <HAL_GPIO_WritePin>
      break;
 800328c:	e00d      	b.n	80032aa <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800328e:	2200      	movs	r2, #0
 8003290:	2110      	movs	r1, #16
 8003292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003296:	f001 fd76 	bl	8004d86 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800329a:	2201      	movs	r2, #1
 800329c:	2120      	movs	r1, #32
 800329e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032a2:	f001 fd70 	bl	8004d86 <HAL_GPIO_WritePin>
      break;
 80032a6:	e000      	b.n	80032aa <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80032a8:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80032b8:	2302      	movs	r3, #2
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80032c6:	2301      	movs	r3, #1
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80032d4:	2301      	movs	r3, #1
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80032e2:	bf00      	nop
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
	...

080032ec <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4a03      	ldr	r2, [pc, #12]	; (8003304 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80032f6:	f023 0301 	bic.w	r3, r3, #1
 80032fa:	6053      	str	r3, [r2, #4]
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr
 8003304:	e0042000 	.word	0xe0042000

08003308 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800330c:	4b04      	ldr	r3, [pc, #16]	; (8003320 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a03      	ldr	r2, [pc, #12]	; (8003320 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003312:	f023 0302 	bic.w	r3, r3, #2
 8003316:	6053      	str	r3, [r2, #4]
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	e0042000 	.word	0xe0042000

08003324 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4a03      	ldr	r2, [pc, #12]	; (800333c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800332e:	f023 0304 	bic.w	r3, r3, #4
 8003332:	6053      	str	r3, [r2, #4]
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	e0042000 	.word	0xe0042000

08003340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800334a:	2003      	movs	r0, #3
 800334c:	f000 feaa 	bl	80040a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003350:	f002 fe18 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 8003354:	4603      	mov	r3, r0
 8003356:	4a09      	ldr	r2, [pc, #36]	; (800337c <HAL_Init+0x3c>)
 8003358:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800335a:	200f      	movs	r0, #15
 800335c:	f7fe fdcc 	bl	8001ef8 <HAL_InitTick>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	71fb      	strb	r3, [r7, #7]
 800336a:	e001      	b.n	8003370 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800336c:	f7fe fc99 	bl	8001ca2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003370:	79fb      	ldrb	r3, [r7, #7]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20000008 	.word	0x20000008

08003380 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <HAL_SuspendTick+0x18>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a03      	ldr	r2, [pc, #12]	; (8003398 <HAL_SuspendTick+0x18>)
 800338a:	f023 0302 	bic.w	r3, r3, #2
 800338e:	6013      	str	r3, [r2, #0]
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr
 8003398:	e000e010 	.word	0xe000e010

0800339c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <HAL_ResumeTick+0x18>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a03      	ldr	r2, [pc, #12]	; (80033b4 <HAL_ResumeTick+0x18>)
 80033a6:	f043 0302 	orr.w	r3, r3, #2
 80033aa:	6013      	str	r3, [r2, #0]
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr
 80033b4:	e000e010 	.word	0xe000e010

080033b8 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80033bc:	f7ff ff96 	bl	80032ec <LL_DBGMCU_DisableDBGSleepMode>
}
 80033c0:	bf00      	nop
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80033c8:	f7ff ff9e 	bl	8003308 <LL_DBGMCU_DisableDBGStopMode>
}
 80033cc:	bf00      	nop
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 80033d4:	f7ff ffa6 	bl	8003324 <LL_DBGMCU_DisableDBGStandbyMode>
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}

080033dc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	601a      	str	r2, [r3, #0]
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr

08003400 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr

0800341a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2107      	movs	r1, #7
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	401a      	ands	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	fa01 f303 	lsl.w	r3, r1, r3
 8003446:	431a      	orrs	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr

08003456 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2107      	movs	r1, #7
 800346c:	fa01 f303 	lsl.w	r3, r1, r3
 8003470:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b085      	sub	sp, #20
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	210f      	movs	r1, #15
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	401a      	ands	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	0e9b      	lsrs	r3, r3, #26
 80034ce:	f003 010f 	and.w	r1, r3, #15
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	fa01 f303 	lsl.w	r3, r1, r3
 80034dc:	431a      	orrs	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80034e2:	bf00      	nop
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr

080034ec <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003524:	43db      	mvns	r3, r3
 8003526:	401a      	ands	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr

08003536 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003536:	b480      	push	{r7}
 8003538:	b085      	sub	sp, #20
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	43db      	mvns	r3, r3
 800354c:	401a      	ands	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	0219      	lsls	r1, r3, #8
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	400b      	ands	r3, r1
 8003556:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800355a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800355e:	431a      	orrs	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003564:	bf00      	nop
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr

0800356e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800357e:	f023 0317 	bic.w	r3, r3, #23
 8003582:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr

08003594 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035a8:	d101      	bne.n	80035ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr

080035ba <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035ca:	f023 0317 	bic.w	r3, r3, #23
 80035ce:	f043 0201 	orr.w	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <LL_ADC_IsEnabled+0x18>
 80035f4:	2301      	movs	r3, #1
 80035f6:	e000      	b.n	80035fa <LL_ADC_IsEnabled+0x1a>
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003614:	f023 0317 	bic.w	r3, r3, #23
 8003618:	f043 0204 	orr.w	r2, r3, #4
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b04      	cmp	r3, #4
 800363c:	d101      	bne.n	8003642 <LL_ADC_REG_IsConversionOngoing+0x18>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr
	...

08003650 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 800365c:	2300      	movs	r3, #0
 800365e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003664:	2300      	movs	r3, #0
 8003666:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e19e      	b.n	80039b0 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	2b00      	cmp	r3, #0
 800367e:	d109      	bne.n	8003694 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7fd ffa7 	bl	80015d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff7b 	bl	8003594 <LL_ADC_IsInternalRegulatorEnabled>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d115      	bne.n	80036d0 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff ff60 	bl	800356e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036ae:	4b99      	ldr	r3, [pc, #612]	; (8003914 <HAL_ADC_Init+0x2c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	099b      	lsrs	r3, r3, #6
 80036b4:	4a98      	ldr	r2, [pc, #608]	; (8003918 <HAL_ADC_Init+0x2c8>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	099b      	lsrs	r3, r3, #6
 80036bc:	3301      	adds	r3, #1
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036c2:	e002      	b.n	80036ca <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f9      	bne.n	80036c4 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff5d 	bl	8003594 <LL_ADC_IsInternalRegulatorEnabled>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10d      	bne.n	80036fc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	f043 0210 	orr.w	r2, r3, #16
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f0:	f043 0201 	orr.w	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ff92 	bl	800362a <LL_ADC_REG_IsConversionOngoing>
 8003706:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	f040 8144 	bne.w	800399e <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f040 8140 	bne.w	800399e <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003726:	f043 0202 	orr.w	r2, r3, #2
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff ff54 	bl	80035e0 <LL_ADC_IsEnabled>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	f040 80a7 	bne.w	800388e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	7e1b      	ldrb	r3, [r3, #24]
 8003748:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800374a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	7e5b      	ldrb	r3, [r3, #25]
 8003750:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003752:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	7e9b      	ldrb	r3, [r3, #26]
 8003758:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800375a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003760:	2a00      	cmp	r2, #0
 8003762:	d002      	beq.n	800376a <HAL_ADC_Init+0x11a>
 8003764:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003768:	e000      	b.n	800376c <HAL_ADC_Init+0x11c>
 800376a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800376c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003772:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	da04      	bge.n	8003786 <HAL_ADC_Init+0x136>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003784:	e001      	b.n	800378a <HAL_ADC_Init+0x13a>
 8003786:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800378a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003792:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003794:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4313      	orrs	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d114      	bne.n	80037d0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	7e9b      	ldrb	r3, [r3, #26]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d104      	bne.n	80037b8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	e00b      	b.n	80037d0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	f043 0220 	orr.w	r2, r3, #32
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d009      	beq.n	80037ec <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80037e4:	4313      	orrs	r3, r2
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80037f6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6812      	ldr	r2, [r2, #0]
 80037fe:	69b9      	ldr	r1, [r7, #24]
 8003800:	430b      	orrs	r3, r1
 8003802:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003810:	4313      	orrs	r3, r2
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800381e:	2b01      	cmp	r3, #1
 8003820:	d111      	bne.n	8003846 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800382e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003834:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800383a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	4b33      	ldr	r3, [pc, #204]	; (800391c <HAL_ADC_Init+0x2cc>)
 800384e:	4013      	ands	r3, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	6979      	ldr	r1, [r7, #20]
 8003856:	430b      	orrs	r3, r1
 8003858:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003862:	d014      	beq.n	800388e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386c:	d00f      	beq.n	800388e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003876:	d00a      	beq.n	800388e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003878:	4b29      	ldr	r3, [pc, #164]	; (8003920 <HAL_ADC_Init+0x2d0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003888:	4925      	ldr	r1, [pc, #148]	; (8003920 <HAL_ADC_Init+0x2d0>)
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003896:	461a      	mov	r2, r3
 8003898:	2100      	movs	r1, #0
 800389a:	f7ff fdbe 	bl	800341a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	461a      	mov	r2, r3
 80038a8:	491e      	ldr	r1, [pc, #120]	; (8003924 <HAL_ADC_Init+0x2d4>)
 80038aa:	f7ff fdb6 	bl	800341a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d108      	bne.n	80038c8 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f062 020f 	orn	r2, r2, #15
 80038c4:	629a      	str	r2, [r3, #40]	; 0x28
 80038c6:	e042      	b.n	800394e <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038d0:	d13d      	bne.n	800394e <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80038d2:	2300      	movs	r3, #0
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	e00c      	b.n	80038f2 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	2b0f      	cmp	r3, #15
 80038ea:	d006      	beq.n	80038fa <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	3301      	adds	r3, #1
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b07      	cmp	r3, #7
 80038f6:	d9ef      	bls.n	80038d8 <HAL_ADC_Init+0x288>
 80038f8:	e000      	b.n	80038fc <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 80038fa:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d112      	bne.n	8003928 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f062 020f 	orn	r2, r2, #15
 8003910:	629a      	str	r2, [r3, #40]	; 0x28
 8003912:	e01c      	b.n	800394e <HAL_ADC_Init+0x2fe>
 8003914:	20000008 	.word	0x20000008
 8003918:	053e2d63 	.word	0x053e2d63
 800391c:	1ffffc02 	.word	0x1ffffc02
 8003920:	40012708 	.word	0x40012708
 8003924:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	3b01      	subs	r3, #1
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	f003 031c 	and.w	r3, r3, #28
 800393a:	f06f 020f 	mvn.w	r2, #15
 800393e:	fa02 f103 	lsl.w	r1, r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fd7e 	bl	8003456 <LL_ADC_GetSamplingTimeCommonChannels>
 800395a:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003960:	429a      	cmp	r2, r3
 8003962:	d10b      	bne.n	800397c <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	f023 0303 	bic.w	r3, r3, #3
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800397a:	e018      	b.n	80039ae <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	f023 0312 	bic.w	r3, r3, #18
 8003984:	f043 0210 	orr.w	r2, r3, #16
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003990:	f043 0201 	orr.w	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800399c:	e007      	b.n	80039ae <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a2:	f043 0210 	orr.w	r2, r3, #16
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80039ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3720      	adds	r7, #32
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff fe30 	bl	800362a <LL_ADC_REG_IsConversionOngoing>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d132      	bne.n	8003a36 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_ADC_Start+0x26>
 80039da:	2302      	movs	r3, #2
 80039dc:	e02e      	b.n	8003a3c <HAL_ADC_Start+0x84>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fa08 	bl	8003dfc <ADC_Enable>
 80039ec:	4603      	mov	r3, r0
 80039ee:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d11a      	bne.n	8003a2c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039fe:	f023 0301 	bic.w	r3, r3, #1
 8003a02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	221c      	movs	r2, #28
 8003a16:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff fded 	bl	8003604 <LL_ADC_REG_StartConversion>
 8003a2a:	e006      	b.n	8003a3a <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003a34:	e001      	b.n	8003a3a <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a36:	2302      	movs	r3, #2
 8003a38:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d102      	bne.n	8003a5c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003a56:	2308      	movs	r3, #8
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	e010      	b.n	8003a7e <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6e:	f043 0220 	orr.w	r2, r3, #32
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e077      	b.n	8003b6a <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003a7e:	f7fe fa45 	bl	8001f0c <HAL_GetTick>
 8003a82:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003a84:	e021      	b.n	8003aca <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8c:	d01d      	beq.n	8003aca <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003a8e:	f7fe fa3d 	bl	8001f0c <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d302      	bcc.n	8003aa4 <HAL_ADC_PollForConversion+0x60>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d112      	bne.n	8003aca <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10b      	bne.n	8003aca <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	f043 0204 	orr.w	r2, r3, #4
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e04f      	b.n	8003b6a <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0d6      	beq.n	8003a86 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003adc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff fccc 	bl	8003486 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d031      	beq.n	8003b58 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	7e9b      	ldrb	r3, [r3, #26]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d12d      	bne.n	8003b58 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d126      	bne.n	8003b58 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff fd8b 	bl	800362a <LL_ADC_REG_IsConversionOngoing>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d112      	bne.n	8003b40 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 020c 	bic.w	r2, r2, #12
 8003b28:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	f043 0201 	orr.w	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	659a      	str	r2, [r3, #88]	; 0x58
 8003b3e:	e00b      	b.n	8003b58 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b44:	f043 0220 	orr.w	r2, r3, #32
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b50:	f043 0201 	orr.w	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	7e1b      	ldrb	r3, [r3, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d103      	bne.n	8003b68 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	220c      	movs	r2, #12
 8003b66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr
	...

08003b8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x28>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e110      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x24a>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff fd32 	bl	800362a <LL_ADC_REG_IsConversionOngoing>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f040 80f7 	bne.w	8003dbc <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	f000 80b1 	beq.w	8003d3a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003be0:	d004      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003be6:	4a7e      	ldr	r2, [pc, #504]	; (8003de0 <HAL_ADC_ConfigChannel+0x254>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d108      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	f7ff fc78 	bl	80034ec <LL_ADC_REG_SetSequencerChAdd>
 8003bfc:	e041      	b.n	8003c82 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	210f      	movs	r1, #15
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	401a      	ands	r2, r3
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d105      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0xa0>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	0e9b      	lsrs	r3, r3, #26
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	e011      	b.n	8003c50 <HAL_ADC_ConfigChannel+0xc4>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	fa93 f3a3 	rbit	r3, r3
 8003c38:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003c44:	2320      	movs	r3, #32
 8003c46:	e003      	b.n	8003c50 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	fab3 f383 	clz	r3, r3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	6839      	ldr	r1, [r7, #0]
 8003c52:	6849      	ldr	r1, [r1, #4]
 8003c54:	f001 011f 	and.w	r1, r1, #31
 8003c58:	408b      	lsls	r3, r1
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	089b      	lsrs	r3, r3, #2
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d808      	bhi.n	8003c82 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f7ff fc14 	bl	80034aa <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6819      	ldr	r1, [r3, #0]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f7ff fc51 	bl	8003536 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f280 8097 	bge.w	8003dcc <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c9e:	4851      	ldr	r0, [pc, #324]	; (8003de4 <HAL_ADC_ConfigChannel+0x258>)
 8003ca0:	f7ff fbae 	bl	8003400 <LL_ADC_GetCommonPathInternalCh>
 8003ca4:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a4f      	ldr	r2, [pc, #316]	; (8003de8 <HAL_ADC_ConfigChannel+0x25c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d120      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d11b      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4848      	ldr	r0, [pc, #288]	; (8003de4 <HAL_ADC_ConfigChannel+0x258>)
 8003cc4:	f7ff fb8a 	bl	80033dc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cc8:	4b48      	ldr	r3, [pc, #288]	; (8003dec <HAL_ADC_ConfigChannel+0x260>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	099b      	lsrs	r3, r3, #6
 8003cce:	4a48      	ldr	r2, [pc, #288]	; (8003df0 <HAL_ADC_ConfigChannel+0x264>)
 8003cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd4:	099b      	lsrs	r3, r3, #6
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	4613      	mov	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003ce2:	e002      	b.n	8003cea <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f9      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003cf0:	e06c      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a3f      	ldr	r2, [pc, #252]	; (8003df4 <HAL_ADC_ConfigChannel+0x268>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d10c      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x18a>
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d107      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4835      	ldr	r0, [pc, #212]	; (8003de4 <HAL_ADC_ConfigChannel+0x258>)
 8003d10:	f7ff fb64 	bl	80033dc <LL_ADC_SetCommonPathInternalCh>
 8003d14:	e05a      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a37      	ldr	r2, [pc, #220]	; (8003df8 <HAL_ADC_ConfigChannel+0x26c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d155      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d150      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d30:	4619      	mov	r1, r3
 8003d32:	482c      	ldr	r0, [pc, #176]	; (8003de4 <HAL_ADC_ConfigChannel+0x258>)
 8003d34:	f7ff fb52 	bl	80033dc <LL_ADC_SetCommonPathInternalCh>
 8003d38:	e048      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d42:	d004      	beq.n	8003d4e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d48:	4a25      	ldr	r2, [pc, #148]	; (8003de0 <HAL_ADC_ConfigChannel+0x254>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d107      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4619      	mov	r1, r3
 8003d58:	4610      	mov	r0, r2
 8003d5a:	f7ff fbd9 	bl	8003510 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	da32      	bge.n	8003dcc <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d66:	481f      	ldr	r0, [pc, #124]	; (8003de4 <HAL_ADC_ConfigChannel+0x258>)
 8003d68:	f7ff fb4a 	bl	8003400 <LL_ADC_GetCommonPathInternalCh>
 8003d6c:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <HAL_ADC_ConfigChannel+0x25c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d107      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4818      	ldr	r0, [pc, #96]	; (8003de4 <HAL_ADC_ConfigChannel+0x258>)
 8003d82:	f7ff fb2b 	bl	80033dc <LL_ADC_SetCommonPathInternalCh>
 8003d86:	e021      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a19      	ldr	r2, [pc, #100]	; (8003df4 <HAL_ADC_ConfigChannel+0x268>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d107      	bne.n	8003da2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4812      	ldr	r0, [pc, #72]	; (8003de4 <HAL_ADC_ConfigChannel+0x258>)
 8003d9c:	f7ff fb1e 	bl	80033dc <LL_ADC_SetCommonPathInternalCh>
 8003da0:	e014      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a14      	ldr	r2, [pc, #80]	; (8003df8 <HAL_ADC_ConfigChannel+0x26c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d10f      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003db2:	4619      	mov	r1, r3
 8003db4:	480b      	ldr	r0, [pc, #44]	; (8003de4 <HAL_ADC_ConfigChannel+0x258>)
 8003db6:	f7ff fb11 	bl	80033dc <LL_ADC_SetCommonPathInternalCh>
 8003dba:	e007      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc0:	f043 0220 	orr.w	r2, r3, #32
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003dd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3720      	adds	r7, #32
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	80000004 	.word	0x80000004
 8003de4:	40012708 	.word	0x40012708
 8003de8:	b0001000 	.word	0xb0001000
 8003dec:	20000008 	.word	0x20000008
 8003df0:	053e2d63 	.word	0x053e2d63
 8003df4:	b8004000 	.word	0xb8004000
 8003df8:	b4002000 	.word	0xb4002000

08003dfc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fbe7 	bl	80035e0 <LL_ADC_IsEnabled>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d169      	bne.n	8003eec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	4b36      	ldr	r3, [pc, #216]	; (8003ef8 <ADC_Enable+0xfc>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00d      	beq.n	8003e42 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2a:	f043 0210 	orr.w	r2, r3, #16
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e36:	f043 0201 	orr.w	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e055      	b.n	8003eee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fbb7 	bl	80035ba <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003e4c:	482b      	ldr	r0, [pc, #172]	; (8003efc <ADC_Enable+0x100>)
 8003e4e:	f7ff fad7 	bl	8003400 <LL_ADC_GetCommonPathInternalCh>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00f      	beq.n	8003e7c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e5c:	4b28      	ldr	r3, [pc, #160]	; (8003f00 <ADC_Enable+0x104>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	099b      	lsrs	r3, r3, #6
 8003e62:	4a28      	ldr	r2, [pc, #160]	; (8003f04 <ADC_Enable+0x108>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	099b      	lsrs	r3, r3, #6
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e6e:	e002      	b.n	8003e76 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f9      	bne.n	8003e70 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	7e5b      	ldrb	r3, [r3, #25]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d033      	beq.n	8003eec <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003e84:	f7fe f842 	bl	8001f0c <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e8a:	e028      	b.n	8003ede <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff fba5 	bl	80035e0 <LL_ADC_IsEnabled>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d104      	bne.n	8003ea6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff fb8a 	bl	80035ba <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ea6:	f7fe f831 	bl	8001f0c <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d914      	bls.n	8003ede <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d00d      	beq.n	8003ede <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	f043 0210 	orr.w	r2, r3, #16
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed2:	f043 0201 	orr.w	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e007      	b.n	8003eee <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d1cf      	bne.n	8003e8c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	80000017 	.word	0x80000017
 8003efc:	40012708 	.word	0x40012708
 8003f00:	20000008 	.word	0x20000008
 8003f04:	053e2d63 	.word	0x053e2d63

08003f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f18:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <__NVIC_SetPriorityGrouping+0x44>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f24:	4013      	ands	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f3a:	4a04      	ldr	r2, [pc, #16]	; (8003f4c <__NVIC_SetPriorityGrouping+0x44>)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	60d3      	str	r3, [r2, #12]
}
 8003f40:	bf00      	nop
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	e000ed00 	.word	0xe000ed00

08003f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <__NVIC_GetPriorityGrouping+0x18>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	0a1b      	lsrs	r3, r3, #8
 8003f5a:	f003 0307 	and.w	r3, r3, #7
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	e000ed00 	.word	0xe000ed00

08003f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	db0b      	blt.n	8003f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	f003 021f 	and.w	r2, r3, #31
 8003f84:	4906      	ldr	r1, [pc, #24]	; (8003fa0 <__NVIC_EnableIRQ+0x34>)
 8003f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr
 8003fa0:	e000e100 	.word	0xe000e100

08003fa4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	db12      	blt.n	8003fdc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	f003 021f 	and.w	r2, r3, #31
 8003fbc:	490a      	ldr	r1, [pc, #40]	; (8003fe8 <__NVIC_DisableIRQ+0x44>)
 8003fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003fca:	3320      	adds	r3, #32
 8003fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fd0:	f3bf 8f4f 	dsb	sy
}
 8003fd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fd6:	f3bf 8f6f 	isb	sy
}
 8003fda:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	e000e100 	.word	0xe000e100

08003fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	6039      	str	r1, [r7, #0]
 8003ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	db0a      	blt.n	8004016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	b2da      	uxtb	r2, r3
 8004004:	490c      	ldr	r1, [pc, #48]	; (8004038 <__NVIC_SetPriority+0x4c>)
 8004006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400a:	0112      	lsls	r2, r2, #4
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	440b      	add	r3, r1
 8004010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004014:	e00a      	b.n	800402c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	b2da      	uxtb	r2, r3
 800401a:	4908      	ldr	r1, [pc, #32]	; (800403c <__NVIC_SetPriority+0x50>)
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	3b04      	subs	r3, #4
 8004024:	0112      	lsls	r2, r2, #4
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	440b      	add	r3, r1
 800402a:	761a      	strb	r2, [r3, #24]
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	e000e100 	.word	0xe000e100
 800403c:	e000ed00 	.word	0xe000ed00

08004040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004040:	b480      	push	{r7}
 8004042:	b089      	sub	sp, #36	; 0x24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f1c3 0307 	rsb	r3, r3, #7
 800405a:	2b04      	cmp	r3, #4
 800405c:	bf28      	it	cs
 800405e:	2304      	movcs	r3, #4
 8004060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	3304      	adds	r3, #4
 8004066:	2b06      	cmp	r3, #6
 8004068:	d902      	bls.n	8004070 <NVIC_EncodePriority+0x30>
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	3b03      	subs	r3, #3
 800406e:	e000      	b.n	8004072 <NVIC_EncodePriority+0x32>
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004074:	f04f 32ff 	mov.w	r2, #4294967295
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	43da      	mvns	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	401a      	ands	r2, r3
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004088:	f04f 31ff 	mov.w	r1, #4294967295
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	fa01 f303 	lsl.w	r3, r1, r3
 8004092:	43d9      	mvns	r1, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004098:	4313      	orrs	r3, r2
         );
}
 800409a:	4618      	mov	r0, r3
 800409c:	3724      	adds	r7, #36	; 0x24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr

080040a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff ff2b 	bl	8003f08 <__NVIC_SetPriorityGrouping>
}
 80040b2:	bf00      	nop
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b086      	sub	sp, #24
 80040be:	af00      	add	r7, sp, #0
 80040c0:	4603      	mov	r3, r0
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040c8:	f7ff ff42 	bl	8003f50 <__NVIC_GetPriorityGrouping>
 80040cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	68b9      	ldr	r1, [r7, #8]
 80040d2:	6978      	ldr	r0, [r7, #20]
 80040d4:	f7ff ffb4 	bl	8004040 <NVIC_EncodePriority>
 80040d8:	4602      	mov	r2, r0
 80040da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040de:	4611      	mov	r1, r2
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff ff83 	bl	8003fec <__NVIC_SetPriority>
}
 80040e6:	bf00      	nop
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b082      	sub	sp, #8
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	4603      	mov	r3, r0
 80040f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff ff35 	bl	8003f6c <__NVIC_EnableIRQ>
}
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b082      	sub	sp, #8
 800410e:	af00      	add	r7, sp, #0
 8004110:	4603      	mov	r3, r0
 8004112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff ff43 	bl	8003fa4 <__NVIC_DisableIRQ>
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e08e      	b.n	8004258 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	4b47      	ldr	r3, [pc, #284]	; (8004260 <HAL_DMA_Init+0x138>)
 8004142:	429a      	cmp	r2, r3
 8004144:	d80f      	bhi.n	8004166 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	4b45      	ldr	r3, [pc, #276]	; (8004264 <HAL_DMA_Init+0x13c>)
 800414e:	4413      	add	r3, r2
 8004150:	4a45      	ldr	r2, [pc, #276]	; (8004268 <HAL_DMA_Init+0x140>)
 8004152:	fba2 2303 	umull	r2, r3, r2, r3
 8004156:	091b      	lsrs	r3, r3, #4
 8004158:	009a      	lsls	r2, r3, #2
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a42      	ldr	r2, [pc, #264]	; (800426c <HAL_DMA_Init+0x144>)
 8004162:	641a      	str	r2, [r3, #64]	; 0x40
 8004164:	e00e      	b.n	8004184 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	4b40      	ldr	r3, [pc, #256]	; (8004270 <HAL_DMA_Init+0x148>)
 800416e:	4413      	add	r3, r2
 8004170:	4a3d      	ldr	r2, [pc, #244]	; (8004268 <HAL_DMA_Init+0x140>)
 8004172:	fba2 2303 	umull	r2, r3, r2, r3
 8004176:	091b      	lsrs	r3, r3, #4
 8004178:	009a      	lsls	r2, r3, #2
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a3c      	ldr	r2, [pc, #240]	; (8004274 <HAL_DMA_Init+0x14c>)
 8004182:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800419a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6819      	ldr	r1, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fb24 	bl	8004824 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041e4:	d102      	bne.n	80041ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041f8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004202:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d010      	beq.n	800422e <HAL_DMA_Init+0x106>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b04      	cmp	r3, #4
 8004212:	d80c      	bhi.n	800422e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 fb4d 	bl	80048b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800422a:	605a      	str	r2, [r3, #4]
 800422c:	e008      	b.n	8004240 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40020407 	.word	0x40020407
 8004264:	bffdfff8 	.word	0xbffdfff8
 8004268:	cccccccd 	.word	0xcccccccd
 800426c:	40020000 	.word	0x40020000
 8004270:	bffdfbf8 	.word	0xbffdfbf8
 8004274:	40020400 	.word	0x40020400

08004278 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e07b      	b.n	8004382 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0201 	bic.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	4b3a      	ldr	r3, [pc, #232]	; (800438c <HAL_DMA_DeInit+0x114>)
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d80f      	bhi.n	80042c6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	4b38      	ldr	r3, [pc, #224]	; (8004390 <HAL_DMA_DeInit+0x118>)
 80042ae:	4413      	add	r3, r2
 80042b0:	4a38      	ldr	r2, [pc, #224]	; (8004394 <HAL_DMA_DeInit+0x11c>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	091b      	lsrs	r3, r3, #4
 80042b8:	009a      	lsls	r2, r3, #2
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a35      	ldr	r2, [pc, #212]	; (8004398 <HAL_DMA_DeInit+0x120>)
 80042c2:	641a      	str	r2, [r3, #64]	; 0x40
 80042c4:	e00e      	b.n	80042e4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	4b33      	ldr	r3, [pc, #204]	; (800439c <HAL_DMA_DeInit+0x124>)
 80042ce:	4413      	add	r3, r2
 80042d0:	4a30      	ldr	r2, [pc, #192]	; (8004394 <HAL_DMA_DeInit+0x11c>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	091b      	lsrs	r3, r3, #4
 80042d8:	009a      	lsls	r2, r3, #2
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a2f      	ldr	r2, [pc, #188]	; (80043a0 <HAL_DMA_DeInit+0x128>)
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	f003 021c 	and.w	r2, r3, #28
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	2101      	movs	r1, #1
 80042fa:	fa01 f202 	lsl.w	r2, r1, r2
 80042fe:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fa8f 	bl	8004824 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004316:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00f      	beq.n	8004340 <HAL_DMA_DeInit+0xc8>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b04      	cmp	r3, #4
 8004326:	d80b      	bhi.n	8004340 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fac3 	bl	80048b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800433e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40020407 	.word	0x40020407
 8004390:	bffdfff8 	.word	0xbffdfff8
 8004394:	cccccccd 	.word	0xcccccccd
 8004398:	40020000 	.word	0x40020000
 800439c:	bffdfbf8 	.word	0xbffdfbf8
 80043a0:	40020400 	.word	0x40020400

080043a4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
 80043b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_DMA_Start_IT+0x20>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e069      	b.n	8004498 <HAL_DMA_Start_IT+0xf4>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d155      	bne.n	8004484 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0201 	bic.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 f9d3 	bl	80047a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	2b00      	cmp	r3, #0
 8004408:	d008      	beq.n	800441c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 020e 	orr.w	r2, r2, #14
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	e00f      	b.n	800443c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0204 	bic.w	r2, r2, #4
 800442a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 020a 	orr.w	r2, r2, #10
 800443a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d007      	beq.n	800445a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004458:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004470:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0201 	orr.w	r2, r2, #1
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	e008      	b.n	8004496 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2280      	movs	r2, #128	; 0x80
 8004488:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004496:	7dfb      	ldrb	r3, [r7, #23]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e04f      	b.n	8004552 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d008      	beq.n	80044d0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2204      	movs	r2, #4
 80044c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e040      	b.n	8004552 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 020e 	bic.w	r2, r2, #14
 80044de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004504:	f003 021c 	and.w	r2, r3, #28
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	2101      	movs	r1, #1
 800450e:	fa01 f202 	lsl.w	r2, r1, r2
 8004512:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800451c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00c      	beq.n	8004540 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004534:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800453e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr

0800455c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d005      	beq.n	8004580 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2204      	movs	r2, #4
 8004578:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
 800457e:	e047      	b.n	8004610 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 020e 	bic.w	r2, r2, #14
 800458e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0201 	bic.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b4:	f003 021c 	and.w	r2, r3, #28
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	2101      	movs	r1, #1
 80045be:	fa01 f202 	lsl.w	r2, r1, r2
 80045c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00c      	beq.n	80045f0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	4798      	blx	r3
    }
  }
  return status;
 8004610:	7bfb      	ldrb	r3, [r7, #15]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004638:	f003 031c 	and.w	r3, r3, #28
 800463c:	2204      	movs	r2, #4
 800463e:	409a      	lsls	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4013      	ands	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d027      	beq.n	8004698 <HAL_DMA_IRQHandler+0x7c>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	d022      	beq.n	8004698 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b00      	cmp	r3, #0
 800465e:	d107      	bne.n	8004670 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0204 	bic.w	r2, r2, #4
 800466e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004674:	f003 021c 	and.w	r2, r3, #28
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	2104      	movs	r1, #4
 800467e:	fa01 f202 	lsl.w	r2, r1, r2
 8004682:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 8081 	beq.w	8004790 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004696:	e07b      	b.n	8004790 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469c:	f003 031c 	and.w	r3, r3, #28
 80046a0:	2202      	movs	r2, #2
 80046a2:	409a      	lsls	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4013      	ands	r3, r2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d03d      	beq.n	8004728 <HAL_DMA_IRQHandler+0x10c>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d038      	beq.n	8004728 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10b      	bne.n	80046dc <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 020a 	bic.w	r2, r2, #10
 80046d2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	4b2e      	ldr	r3, [pc, #184]	; (800479c <HAL_DMA_IRQHandler+0x180>)
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d909      	bls.n	80046fc <HAL_DMA_IRQHandler+0xe0>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ec:	f003 031c 	and.w	r3, r3, #28
 80046f0:	4a2b      	ldr	r2, [pc, #172]	; (80047a0 <HAL_DMA_IRQHandler+0x184>)
 80046f2:	2102      	movs	r1, #2
 80046f4:	fa01 f303 	lsl.w	r3, r1, r3
 80046f8:	6053      	str	r3, [r2, #4]
 80046fa:	e008      	b.n	800470e <HAL_DMA_IRQHandler+0xf2>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004700:	f003 031c 	and.w	r3, r3, #28
 8004704:	4a27      	ldr	r2, [pc, #156]	; (80047a4 <HAL_DMA_IRQHandler+0x188>)
 8004706:	2102      	movs	r1, #2
 8004708:	fa01 f303 	lsl.w	r3, r1, r3
 800470c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d038      	beq.n	8004790 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004726:	e033      	b.n	8004790 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	f003 031c 	and.w	r3, r3, #28
 8004730:	2208      	movs	r2, #8
 8004732:	409a      	lsls	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4013      	ands	r3, r2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d02a      	beq.n	8004792 <HAL_DMA_IRQHandler+0x176>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d025      	beq.n	8004792 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 020e 	bic.w	r2, r2, #14
 8004754:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	f003 021c 	and.w	r2, r3, #28
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	2101      	movs	r1, #1
 8004764:	fa01 f202 	lsl.w	r2, r1, r2
 8004768:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004784:	2b00      	cmp	r3, #0
 8004786:	d004      	beq.n	8004792 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004790:	bf00      	nop
 8004792:	bf00      	nop
}
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40020080 	.word	0x40020080
 80047a0:	40020400 	.word	0x40020400
 80047a4:	40020000 	.word	0x40020000

080047a8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d004      	beq.n	80047d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047d0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	f003 021c 	and.w	r2, r3, #28
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	2101      	movs	r1, #1
 80047e0:	fa01 f202 	lsl.w	r2, r1, r2
 80047e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d108      	bne.n	8004808 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004806:	e007      	b.n	8004818 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	60da      	str	r2, [r3, #12]
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr
	...

08004824 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004834:	429a      	cmp	r2, r3
 8004836:	d813      	bhi.n	8004860 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483c:	089b      	lsrs	r3, r3, #2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004844:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	3b08      	subs	r3, #8
 8004854:	4a14      	ldr	r2, [pc, #80]	; (80048a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004856:	fba2 2303 	umull	r2, r3, r2, r3
 800485a:	091b      	lsrs	r3, r3, #4
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	e011      	b.n	8004884 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004864:	089b      	lsrs	r3, r3, #2
 8004866:	009a      	lsls	r2, r3, #2
 8004868:	4b10      	ldr	r3, [pc, #64]	; (80048ac <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800486a:	4413      	add	r3, r2
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	3b08      	subs	r3, #8
 8004878:	4a0b      	ldr	r2, [pc, #44]	; (80048a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800487a:	fba2 2303 	umull	r2, r3, r2, r3
 800487e:	091b      	lsrs	r3, r3, #4
 8004880:	3307      	adds	r3, #7
 8004882:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a0a      	ldr	r2, [pc, #40]	; (80048b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004888:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2201      	movs	r2, #1
 8004892:	409a      	lsls	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004898:	bf00      	nop
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40020407 	.word	0x40020407
 80048a8:	cccccccd 	.word	0xcccccccd
 80048ac:	4002081c 	.word	0x4002081c
 80048b0:	40020880 	.word	0x40020880

080048b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	461a      	mov	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a08      	ldr	r2, [pc, #32]	; (80048f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80048d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3b01      	subs	r3, #1
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2201      	movs	r2, #1
 80048e4:	409a      	lsls	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80048ea:	bf00      	nop
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr
 80048f4:	1000823f 	.word	0x1000823f
 80048f8:	40020940 	.word	0x40020940

080048fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800490a:	e140      	b.n	8004b8e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	2101      	movs	r1, #1
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	fa01 f303 	lsl.w	r3, r1, r3
 8004918:	4013      	ands	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 8132 	beq.w	8004b88 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	2b01      	cmp	r3, #1
 800492e:	d005      	beq.n	800493c <HAL_GPIO_Init+0x40>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d130      	bne.n	800499e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	2203      	movs	r2, #3
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4013      	ands	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004972:	2201      	movs	r2, #1
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43db      	mvns	r3, r3
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4013      	ands	r3, r2
 8004980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	091b      	lsrs	r3, r3, #4
 8004988:	f003 0201 	and.w	r2, r3, #1
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d017      	beq.n	80049da <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	2203      	movs	r2, #3
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43db      	mvns	r3, r3
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4013      	ands	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d123      	bne.n	8004a2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	08da      	lsrs	r2, r3, #3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3208      	adds	r2, #8
 80049ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	220f      	movs	r2, #15
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43db      	mvns	r3, r3
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4013      	ands	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	08da      	lsrs	r2, r3, #3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3208      	adds	r2, #8
 8004a28:	6939      	ldr	r1, [r7, #16]
 8004a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	2203      	movs	r2, #3
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4013      	ands	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f003 0203 	and.w	r2, r3, #3
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 808c 	beq.w	8004b88 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004a70:	4a4e      	ldr	r2, [pc, #312]	; (8004bac <HAL_GPIO_Init+0x2b0>)
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	089b      	lsrs	r3, r3, #2
 8004a76:	3302      	adds	r3, #2
 8004a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	2207      	movs	r2, #7
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4013      	ands	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a9a:	d00d      	beq.n	8004ab8 <HAL_GPIO_Init+0x1bc>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a44      	ldr	r2, [pc, #272]	; (8004bb0 <HAL_GPIO_Init+0x2b4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d007      	beq.n	8004ab4 <HAL_GPIO_Init+0x1b8>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a43      	ldr	r2, [pc, #268]	; (8004bb4 <HAL_GPIO_Init+0x2b8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d101      	bne.n	8004ab0 <HAL_GPIO_Init+0x1b4>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e004      	b.n	8004aba <HAL_GPIO_Init+0x1be>
 8004ab0:	2307      	movs	r3, #7
 8004ab2:	e002      	b.n	8004aba <HAL_GPIO_Init+0x1be>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <HAL_GPIO_Init+0x1be>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	f002 0203 	and.w	r2, r2, #3
 8004ac0:	0092      	lsls	r2, r2, #2
 8004ac2:	4093      	lsls	r3, r2
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004aca:	4938      	ldr	r1, [pc, #224]	; (8004bac <HAL_GPIO_Init+0x2b0>)
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	089b      	lsrs	r3, r3, #2
 8004ad0:	3302      	adds	r3, #2
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ad8:	4b37      	ldr	r3, [pc, #220]	; (8004bb8 <HAL_GPIO_Init+0x2bc>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004afc:	4a2e      	ldr	r2, [pc, #184]	; (8004bb8 <HAL_GPIO_Init+0x2bc>)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b02:	4b2d      	ldr	r3, [pc, #180]	; (8004bb8 <HAL_GPIO_Init+0x2bc>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b26:	4a24      	ldr	r2, [pc, #144]	; (8004bb8 <HAL_GPIO_Init+0x2bc>)
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004b2c:	4b22      	ldr	r3, [pc, #136]	; (8004bb8 <HAL_GPIO_Init+0x2bc>)
 8004b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b32:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	43db      	mvns	r3, r3
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004b52:	4a19      	ldr	r2, [pc, #100]	; (8004bb8 <HAL_GPIO_Init+0x2bc>)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004b5a:	4b17      	ldr	r3, [pc, #92]	; (8004bb8 <HAL_GPIO_Init+0x2bc>)
 8004b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b60:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	43db      	mvns	r3, r3
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004b80:	4a0d      	ldr	r2, [pc, #52]	; (8004bb8 <HAL_GPIO_Init+0x2bc>)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f47f aeb7 	bne.w	800490c <HAL_GPIO_Init+0x10>
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40010000 	.word	0x40010000
 8004bb0:	48000400 	.word	0x48000400
 8004bb4:	48000800 	.word	0x48000800
 8004bb8:	58000800 	.word	0x58000800

08004bbc <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004bca:	e0af      	b.n	8004d2c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004bcc:	2201      	movs	r2, #1
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80a2 	beq.w	8004d26 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004be2:	4a59      	ldr	r2, [pc, #356]	; (8004d48 <HAL_GPIO_DeInit+0x18c>)
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	089b      	lsrs	r3, r3, #2
 8004be8:	3302      	adds	r3, #2
 8004bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bee:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	2207      	movs	r2, #7
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4013      	ands	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c0a:	d00d      	beq.n	8004c28 <HAL_GPIO_DeInit+0x6c>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a4f      	ldr	r2, [pc, #316]	; (8004d4c <HAL_GPIO_DeInit+0x190>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d007      	beq.n	8004c24 <HAL_GPIO_DeInit+0x68>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a4e      	ldr	r2, [pc, #312]	; (8004d50 <HAL_GPIO_DeInit+0x194>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d101      	bne.n	8004c20 <HAL_GPIO_DeInit+0x64>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e004      	b.n	8004c2a <HAL_GPIO_DeInit+0x6e>
 8004c20:	2307      	movs	r3, #7
 8004c22:	e002      	b.n	8004c2a <HAL_GPIO_DeInit+0x6e>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <HAL_GPIO_DeInit+0x6e>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	f002 0203 	and.w	r2, r2, #3
 8004c30:	0092      	lsls	r2, r2, #2
 8004c32:	4093      	lsls	r3, r2
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d136      	bne.n	8004ca8 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004c3a:	4b46      	ldr	r3, [pc, #280]	; (8004d54 <HAL_GPIO_DeInit+0x198>)
 8004c3c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	43db      	mvns	r3, r3
 8004c44:	4943      	ldr	r1, [pc, #268]	; (8004d54 <HAL_GPIO_DeInit+0x198>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004c4c:	4b41      	ldr	r3, [pc, #260]	; (8004d54 <HAL_GPIO_DeInit+0x198>)
 8004c4e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	43db      	mvns	r3, r3
 8004c56:	493f      	ldr	r1, [pc, #252]	; (8004d54 <HAL_GPIO_DeInit+0x198>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004c5e:	4b3d      	ldr	r3, [pc, #244]	; (8004d54 <HAL_GPIO_DeInit+0x198>)
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	43db      	mvns	r3, r3
 8004c66:	493b      	ldr	r1, [pc, #236]	; (8004d54 <HAL_GPIO_DeInit+0x198>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004c6c:	4b39      	ldr	r3, [pc, #228]	; (8004d54 <HAL_GPIO_DeInit+0x198>)
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	43db      	mvns	r3, r3
 8004c74:	4937      	ldr	r1, [pc, #220]	; (8004d54 <HAL_GPIO_DeInit+0x198>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	2207      	movs	r2, #7
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004c8a:	4a2f      	ldr	r2, [pc, #188]	; (8004d48 <HAL_GPIO_DeInit+0x18c>)
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	089b      	lsrs	r3, r3, #2
 8004c90:	3302      	adds	r3, #2
 8004c92:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	43da      	mvns	r2, r3
 8004c9a:	482b      	ldr	r0, [pc, #172]	; (8004d48 <HAL_GPIO_DeInit+0x18c>)
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	089b      	lsrs	r3, r3, #2
 8004ca0:	400a      	ands	r2, r1
 8004ca2:	3302      	adds	r3, #2
 8004ca4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	2103      	movs	r1, #3
 8004cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	08da      	lsrs	r2, r3, #3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3208      	adds	r2, #8
 8004cc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	220f      	movs	r2, #15
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	08d2      	lsrs	r2, r2, #3
 8004cdc:	4019      	ands	r1, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3208      	adds	r2, #8
 8004ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	2103      	movs	r1, #3
 8004cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf4:	43db      	mvns	r3, r3
 8004cf6:	401a      	ands	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	2101      	movs	r1, #1
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	fa01 f303 	lsl.w	r3, r1, r3
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	401a      	ands	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	2103      	movs	r1, #3
 8004d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1e:	43db      	mvns	r3, r3
 8004d20:	401a      	ands	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	fa22 f303 	lsr.w	r3, r2, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f47f af49 	bne.w	8004bcc <HAL_GPIO_DeInit+0x10>
  }
}
 8004d3a:	bf00      	nop
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40010000 	.word	0x40010000
 8004d4c:	48000400 	.word	0x48000400
 8004d50:	48000800 	.word	0x48000800
 8004d54:	58000800 	.word	0x58000800

08004d58 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	887b      	ldrh	r3, [r7, #2]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
 8004d74:	e001      	b.n	8004d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d76:	2300      	movs	r3, #0
 8004d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc80      	pop	{r7}
 8004d84:	4770      	bx	lr

08004d86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	807b      	strh	r3, [r7, #2]
 8004d92:	4613      	mov	r3, r2
 8004d94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d96:	787b      	ldrb	r3, [r7, #1]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d9c:	887a      	ldrh	r2, [r7, #2]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004da2:	e002      	b.n	8004daa <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004da4:	887a      	ldrh	r2, [r7, #2]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr

08004db4 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004dc6:	887a      	ldrh	r2, [r7, #2]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	041a      	lsls	r2, r3, #16
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	43d9      	mvns	r1, r3
 8004dd2:	887b      	ldrh	r3, [r7, #2]
 8004dd4:	400b      	ands	r3, r1
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	619a      	str	r2, [r3, #24]
}
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr
	...

08004de8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004df2:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d006      	beq.n	8004e0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dfe:	4a05      	ldr	r2, [pc, #20]	; (8004e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e04:	88fb      	ldrh	r3, [r7, #6]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 f806 	bl	8004e18 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e0c:	bf00      	nop
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	58000800 	.word	0x58000800

08004e18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr

08004e2c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e30:	4b04      	ldr	r3, [pc, #16]	; (8004e44 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a03      	ldr	r2, [pc, #12]	; (8004e44 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3a:	6013      	str	r3, [r2, #0]
}
 8004e3c:	bf00      	nop
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr
 8004e44:	58000400 	.word	0x58000400

08004e48 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10c      	bne.n	8004e74 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004e5a:	4b13      	ldr	r3, [pc, #76]	; (8004ea8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e66:	d10d      	bne.n	8004e84 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004e68:	f000 f83c 	bl	8004ee4 <HAL_PWREx_DisableLowPowerRunMode>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d008      	beq.n	8004e84 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004e72:	e015      	b.n	8004ea0 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004e74:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004e80:	f000 f822 	bl	8004ec8 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004e84:	4b09      	ldr	r3, [pc, #36]	; (8004eac <HAL_PWR_EnterSLEEPMode+0x64>)
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	4a08      	ldr	r2, [pc, #32]	; (8004eac <HAL_PWR_EnterSLEEPMode+0x64>)
 8004e8a:	f023 0304 	bic.w	r3, r3, #4
 8004e8e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004e96:	bf30      	wfi
 8004e98:	e002      	b.n	8004ea0 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004e9a:	bf40      	sev
    __WFE();
 8004e9c:	bf20      	wfe
    __WFE();
 8004e9e:	bf20      	wfe
  }
}
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	58000400 	.word	0x58000400
 8004eac:	e000ed00 	.word	0xe000ed00

08004eb0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004eb4:	4b03      	ldr	r3, [pc, #12]	; (8004ec4 <HAL_PWREx_GetVoltageRange+0x14>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr
 8004ec4:	58000400 	.word	0x58000400

08004ec8 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004ecc:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a03      	ldr	r2, [pc, #12]	; (8004ee0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004ed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ed6:	6013      	str	r3, [r2, #0]
}
 8004ed8:	bf00      	nop
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bc80      	pop	{r7}
 8004ede:	4770      	bx	lr
 8004ee0:	58000400 	.word	0x58000400

08004ee4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004eea:	4b16      	ldr	r3, [pc, #88]	; (8004f44 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a15      	ldr	r2, [pc, #84]	; (8004f44 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004ef0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ef4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004ef6:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2232      	movs	r2, #50	; 0x32
 8004efc:	fb02 f303 	mul.w	r3, r2, r3
 8004f00:	4a12      	ldr	r2, [pc, #72]	; (8004f4c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	0c9b      	lsrs	r3, r3, #18
 8004f08:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004f0a:	e002      	b.n	8004f12 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004f12:	4b0c      	ldr	r3, [pc, #48]	; (8004f44 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f1e:	d102      	bne.n	8004f26 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f2      	bne.n	8004f0c <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004f26:	4b07      	ldr	r3, [pc, #28]	; (8004f44 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f32:	d101      	bne.n	8004f38 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e000      	b.n	8004f3a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr
 8004f44:	58000400 	.word	0x58000400
 8004f48:	20000008 	.word	0x20000008
 8004f4c:	431bde83 	.word	0x431bde83

08004f50 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004f5a:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 0307 	bic.w	r3, r3, #7
 8004f62:	4a0e      	ldr	r2, [pc, #56]	; (8004f9c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004f64:	f043 0302 	orr.w	r3, r3, #2
 8004f68:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	4a0c      	ldr	r2, [pc, #48]	; (8004fa0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004f70:	f043 0304 	orr.w	r3, r3, #4
 8004f74:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004f7c:	bf30      	wfi
 8004f7e:	e002      	b.n	8004f86 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004f80:	bf40      	sev
    __WFE();
 8004f82:	bf20      	wfe
    __WFE();
 8004f84:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	4a05      	ldr	r2, [pc, #20]	; (8004fa0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004f8c:	f023 0304 	bic.w	r3, r3, #4
 8004f90:	6113      	str	r3, [r2, #16]
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr
 8004f9c:	58000400 	.word	0x58000400
 8004fa0:	e000ed00 	.word	0xe000ed00

08004fa4 <LL_PWR_IsEnabledBkUpAccess>:
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb4:	d101      	bne.n	8004fba <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr
 8004fc4:	58000400 	.word	0x58000400

08004fc8 <LL_RCC_HSE_EnableTcxo>:
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fda:	6013      	str	r3, [r2, #0]
}
 8004fdc:	bf00      	nop
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr

08004fe4 <LL_RCC_HSE_DisableTcxo>:
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ff2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ff6:	6013      	str	r3, [r2, #0]
}
 8004ff8:	bf00      	nop
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr

08005000 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800500e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005012:	d101      	bne.n	8005018 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	46bd      	mov	sp, r7
 800501e:	bc80      	pop	{r7}
 8005020:	4770      	bx	lr

08005022 <LL_RCC_HSE_Enable>:
{
 8005022:	b480      	push	{r7}
 8005024:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005034:	6013      	str	r3, [r2, #0]
}
 8005036:	bf00      	nop
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr

0800503e <LL_RCC_HSE_Disable>:
{
 800503e:	b480      	push	{r7}
 8005040:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800504c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005050:	6013      	str	r3, [r2, #0]
}
 8005052:	bf00      	nop
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr

0800505a <LL_RCC_HSE_IsReady>:
{
 800505a:	b480      	push	{r7}
 800505c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800505e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005068:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800506c:	d101      	bne.n	8005072 <LL_RCC_HSE_IsReady+0x18>
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <LL_RCC_HSE_IsReady+0x1a>
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr

0800507c <LL_RCC_HSI_Enable>:
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800508a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800508e:	6013      	str	r3, [r2, #0]
}
 8005090:	bf00      	nop
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr

08005098 <LL_RCC_HSI_Disable>:
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800509c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050aa:	6013      	str	r3, [r2, #0]
}
 80050ac:	bf00      	nop
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr

080050b4 <LL_RCC_HSI_IsReady>:
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80050b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c6:	d101      	bne.n	80050cc <LL_RCC_HSI_IsReady+0x18>
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <LL_RCC_HSI_IsReady+0x1a>
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bc80      	pop	{r7}
 80050d4:	4770      	bx	lr

080050d6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80050de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	061b      	lsls	r3, r3, #24
 80050ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050f0:	4313      	orrs	r3, r2
 80050f2:	604b      	str	r3, [r1, #4]
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr

080050fe <LL_RCC_LSE_IsReady>:
{
 80050fe:	b480      	push	{r7}
 8005100:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b02      	cmp	r3, #2
 8005110:	d101      	bne.n	8005116 <LL_RCC_LSE_IsReady+0x18>
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <LL_RCC_LSE_IsReady+0x1a>
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr

08005120 <LL_RCC_LSI_Enable>:
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800512c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005138:	bf00      	nop
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <LL_RCC_LSI_Disable>:
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800514c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005158:	bf00      	nop
 800515a:	46bd      	mov	sp, r7
 800515c:	bc80      	pop	{r7}
 800515e:	4770      	bx	lr

08005160 <LL_RCC_LSI_IsReady>:
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b02      	cmp	r3, #2
 8005172:	d101      	bne.n	8005178 <LL_RCC_LSI_IsReady+0x18>
 8005174:	2301      	movs	r3, #1
 8005176:	e000      	b.n	800517a <LL_RCC_LSI_IsReady+0x1a>
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr

08005182 <LL_RCC_MSI_Enable>:
{
 8005182:	b480      	push	{r7}
 8005184:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	6013      	str	r3, [r2, #0]
}
 8005196:	bf00      	nop
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr

0800519e <LL_RCC_MSI_Disable>:
{
 800519e:	b480      	push	{r7}
 80051a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80051a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ac:	f023 0301 	bic.w	r3, r3, #1
 80051b0:	6013      	str	r3, [r2, #0]
}
 80051b2:	bf00      	nop
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr

080051ba <LL_RCC_MSI_IsReady>:
{
 80051ba:	b480      	push	{r7}
 80051bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80051be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d101      	bne.n	80051d0 <LL_RCC_MSI_IsReady+0x16>
 80051cc:	2301      	movs	r3, #1
 80051ce:	e000      	b.n	80051d2 <LL_RCC_MSI_IsReady+0x18>
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr

080051da <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80051da:	b480      	push	{r7}
 80051dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80051de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d101      	bne.n	80051f0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80051ec:	2301      	movs	r3, #1
 80051ee:	e000      	b.n	80051f2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr

080051fa <LL_RCC_MSI_GetRange>:
{
 80051fa:	b480      	push	{r7}
 80051fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80051fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005208:	4618      	mov	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr

08005210 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800521c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005220:	4618      	mov	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr

08005228 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	021b      	lsls	r3, r3, #8
 800523e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005242:	4313      	orrs	r3, r2
 8005244:	604b      	str	r3, [r1, #4]
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr

08005250 <LL_RCC_SetSysClkSource>:
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f023 0203 	bic.w	r2, r3, #3
 8005262:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4313      	orrs	r3, r2
 800526a:	608b      	str	r3, [r1, #8]
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	bc80      	pop	{r7}
 8005274:	4770      	bx	lr

08005276 <LL_RCC_GetSysClkSource>:
{
 8005276:	b480      	push	{r7}
 8005278:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800527a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f003 030c 	and.w	r3, r3, #12
}
 8005284:	4618      	mov	r0, r3
 8005286:	46bd      	mov	sp, r7
 8005288:	bc80      	pop	{r7}
 800528a:	4770      	bx	lr

0800528c <LL_RCC_SetAHBPrescaler>:
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800529e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	608b      	str	r3, [r1, #8]
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr

080052b2 <LL_RCC_SetAHB3Prescaler>:
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80052ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80052c2:	f023 020f 	bic.w	r2, r3, #15
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	091b      	lsrs	r3, r3, #4
 80052ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	bc80      	pop	{r7}
 80052dc:	4770      	bx	lr

080052de <LL_RCC_SetAPB1Prescaler>:
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80052e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	608b      	str	r3, [r1, #8]
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr

08005304 <LL_RCC_SetAPB2Prescaler>:
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800530c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4313      	orrs	r3, r2
 800531e:	608b      	str	r3, [r1, #8]
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr

0800532a <LL_RCC_GetAHBPrescaler>:
{
 800532a:	b480      	push	{r7}
 800532c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800532e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005338:	4618      	mov	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr

08005340 <LL_RCC_GetAHB3Prescaler>:
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005348:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005352:	4618      	mov	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	bc80      	pop	{r7}
 8005358:	4770      	bx	lr

0800535a <LL_RCC_GetAPB1Prescaler>:
{
 800535a:	b480      	push	{r7}
 800535c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800535e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005368:	4618      	mov	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr

08005370 <LL_RCC_GetAPB2Prescaler>:
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800537e:	4618      	mov	r0, r3
 8005380:	46bd      	mov	sp, r7
 8005382:	bc80      	pop	{r7}
 8005384:	4770      	bx	lr

08005386 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005386:	b480      	push	{r7}
 8005388:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800538a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005394:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005398:	6013      	str	r3, [r2, #0]
}
 800539a:	bf00      	nop
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr

080053a2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80053a2:	b480      	push	{r7}
 80053a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80053a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053b4:	6013      	str	r3, [r2, #0]
}
 80053b6:	bf00      	nop
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr

080053be <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80053be:	b480      	push	{r7}
 80053c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80053c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053d0:	d101      	bne.n	80053d6 <LL_RCC_PLL_IsReady+0x18>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <LL_RCC_PLL_IsReady+0x1a>
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc80      	pop	{r7}
 80053de:	4770      	bx	lr

080053e0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80053e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	0a1b      	lsrs	r3, r3, #8
 80053ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr

080053f8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80053fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005406:	4618      	mov	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr

0800540e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800540e:	b480      	push	{r7}
 8005410:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800541c:	4618      	mov	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr

08005424 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f003 0303 	and.w	r3, r3, #3
}
 8005432:	4618      	mov	r0, r3
 8005434:	46bd      	mov	sp, r7
 8005436:	bc80      	pop	{r7}
 8005438:	4770      	bx	lr

0800543a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800543a:	b480      	push	{r7}
 800543c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800543e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544c:	d101      	bne.n	8005452 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr

0800545c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005464:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800546c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005470:	d101      	bne.n	8005476 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr

08005480 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005492:	d101      	bne.n	8005498 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005494:	2301      	movs	r3, #1
 8005496:	e000      	b.n	800549a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80054a2:	b480      	push	{r7}
 80054a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80054a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054b4:	d101      	bne.n	80054ba <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr

080054c4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e38b      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054d6:	f7ff fece 	bl	8005276 <LL_RCC_GetSysClkSource>
 80054da:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054dc:	f7ff ffa2 	bl	8005424 <LL_RCC_PLL_GetMainSource>
 80054e0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 80c9 	beq.w	8005682 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d005      	beq.n	8005502 <HAL_RCC_OscConfig+0x3e>
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	2b0c      	cmp	r3, #12
 80054fa:	d17b      	bne.n	80055f4 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d178      	bne.n	80055f4 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005502:	f7ff fe5a 	bl	80051ba <LL_RCC_MSI_IsReady>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_RCC_OscConfig+0x54>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e36a      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800551c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <HAL_RCC_OscConfig+0x72>
 800552a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005534:	e006      	b.n	8005544 <HAL_RCC_OscConfig+0x80>
 8005536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800553a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553e:	091b      	lsrs	r3, r3, #4
 8005540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005544:	4293      	cmp	r3, r2
 8005546:	d222      	bcs.n	800558e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fd51 	bl	8005ff4 <RCC_SetFlashLatencyFromMSIRange>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e348      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800555c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005566:	f043 0308 	orr.w	r3, r3, #8
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800557e:	4313      	orrs	r3, r2
 8005580:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff fe4e 	bl	8005228 <LL_RCC_MSI_SetCalibTrimming>
 800558c:	e021      	b.n	80055d2 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800558e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005598:	f043 0308 	orr.w	r3, r3, #8
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055b0:	4313      	orrs	r3, r2
 80055b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff fe35 	bl	8005228 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fd16 	bl	8005ff4 <RCC_SetFlashLatencyFromMSIRange>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e30d      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80055d2:	f000 fcd7 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 80055d6:	4603      	mov	r3, r0
 80055d8:	4aa1      	ldr	r2, [pc, #644]	; (8005860 <HAL_RCC_OscConfig+0x39c>)
 80055da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80055dc:	4ba1      	ldr	r3, [pc, #644]	; (8005864 <HAL_RCC_OscConfig+0x3a0>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fc fc89 	bl	8001ef8 <HAL_InitTick>
 80055e6:	4603      	mov	r3, r0
 80055e8:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80055ea:	7cfb      	ldrb	r3, [r7, #19]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d047      	beq.n	8005680 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80055f0:	7cfb      	ldrb	r3, [r7, #19]
 80055f2:	e2fc      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d02c      	beq.n	8005656 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80055fc:	f7ff fdc1 	bl	8005182 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005600:	f7fc fc84 	bl	8001f0c <HAL_GetTick>
 8005604:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005608:	f7fc fc80 	bl	8001f0c <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e2e9      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 800561a:	f7ff fdce 	bl	80051ba <LL_RCC_MSI_IsReady>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0f1      	beq.n	8005608 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800562e:	f043 0308 	orr.w	r3, r3, #8
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005646:	4313      	orrs	r3, r2
 8005648:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff fdea 	bl	8005228 <LL_RCC_MSI_SetCalibTrimming>
 8005654:	e015      	b.n	8005682 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005656:	f7ff fda2 	bl	800519e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800565a:	f7fc fc57 	bl	8001f0c <HAL_GetTick>
 800565e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005660:	e008      	b.n	8005674 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005662:	f7fc fc53 	bl	8001f0c <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e2bc      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005674:	f7ff fda1 	bl	80051ba <LL_RCC_MSI_IsReady>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1f1      	bne.n	8005662 <HAL_RCC_OscConfig+0x19e>
 800567e:	e000      	b.n	8005682 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005680:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d05f      	beq.n	800574e <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	2b08      	cmp	r3, #8
 8005692:	d005      	beq.n	80056a0 <HAL_RCC_OscConfig+0x1dc>
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	2b0c      	cmp	r3, #12
 8005698:	d10d      	bne.n	80056b6 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	2b03      	cmp	r3, #3
 800569e:	d10a      	bne.n	80056b6 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a0:	f7ff fcdb 	bl	800505a <LL_RCC_HSE_IsReady>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d050      	beq.n	800574c <HAL_RCC_OscConfig+0x288>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d14c      	bne.n	800574c <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e29b      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80056b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056c8:	4313      	orrs	r3, r2
 80056ca:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d4:	d102      	bne.n	80056dc <HAL_RCC_OscConfig+0x218>
 80056d6:	f7ff fca4 	bl	8005022 <LL_RCC_HSE_Enable>
 80056da:	e00d      	b.n	80056f8 <HAL_RCC_OscConfig+0x234>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80056e4:	d104      	bne.n	80056f0 <HAL_RCC_OscConfig+0x22c>
 80056e6:	f7ff fc6f 	bl	8004fc8 <LL_RCC_HSE_EnableTcxo>
 80056ea:	f7ff fc9a 	bl	8005022 <LL_RCC_HSE_Enable>
 80056ee:	e003      	b.n	80056f8 <HAL_RCC_OscConfig+0x234>
 80056f0:	f7ff fca5 	bl	800503e <LL_RCC_HSE_Disable>
 80056f4:	f7ff fc76 	bl	8004fe4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d012      	beq.n	8005726 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005700:	f7fc fc04 	bl	8001f0c <HAL_GetTick>
 8005704:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005708:	f7fc fc00 	bl	8001f0c <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b64      	cmp	r3, #100	; 0x64
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e269      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 800571a:	f7ff fc9e 	bl	800505a <LL_RCC_HSE_IsReady>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0f1      	beq.n	8005708 <HAL_RCC_OscConfig+0x244>
 8005724:	e013      	b.n	800574e <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005726:	f7fc fbf1 	bl	8001f0c <HAL_GetTick>
 800572a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800572e:	f7fc fbed 	bl	8001f0c <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b64      	cmp	r3, #100	; 0x64
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e256      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005740:	f7ff fc8b 	bl	800505a <LL_RCC_HSE_IsReady>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f1      	bne.n	800572e <HAL_RCC_OscConfig+0x26a>
 800574a:	e000      	b.n	800574e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800574c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d04b      	beq.n	80057f2 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	2b04      	cmp	r3, #4
 800575e:	d005      	beq.n	800576c <HAL_RCC_OscConfig+0x2a8>
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	2b0c      	cmp	r3, #12
 8005764:	d113      	bne.n	800578e <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d110      	bne.n	800578e <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800576c:	f7ff fca2 	bl	80050b4 <LL_RCC_HSI_IsReady>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <HAL_RCC_OscConfig+0x2be>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e235      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff fca5 	bl	80050d6 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800578c:	e031      	b.n	80057f2 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d019      	beq.n	80057ca <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005796:	f7ff fc71 	bl	800507c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579a:	f7fc fbb7 	bl	8001f0c <HAL_GetTick>
 800579e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a2:	f7fc fbb3 	bl	8001f0c <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e21c      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80057b4:	f7ff fc7e 	bl	80050b4 <LL_RCC_HSI_IsReady>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f1      	beq.n	80057a2 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff fc87 	bl	80050d6 <LL_RCC_HSI_SetCalibTrimming>
 80057c8:	e013      	b.n	80057f2 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ca:	f7ff fc65 	bl	8005098 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ce:	f7fc fb9d 	bl	8001f0c <HAL_GetTick>
 80057d2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057d6:	f7fc fb99 	bl	8001f0c <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e202      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80057e8:	f7ff fc64 	bl	80050b4 <LL_RCC_HSI_IsReady>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f1      	bne.n	80057d6 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d06f      	beq.n	80058de <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d057      	beq.n	80058b6 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8005806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800580a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800580e:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69da      	ldr	r2, [r3, #28]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f003 0310 	and.w	r3, r3, #16
 800581a:	429a      	cmp	r2, r3
 800581c:	d036      	beq.n	800588c <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d006      	beq.n	8005836 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e1db      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d018      	beq.n	8005872 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8005840:	f7ff fc7e 	bl	8005140 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005844:	f7fc fb62 	bl	8001f0c <HAL_GetTick>
 8005848:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800584a:	e00d      	b.n	8005868 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800584c:	f7fc fb5e 	bl	8001f0c <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b11      	cmp	r3, #17
 8005858:	d906      	bls.n	8005868 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e1c7      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
 800585e:	bf00      	nop
 8005860:	20000008 	.word	0x20000008
 8005864:	2000000c 	.word	0x2000000c
          while (LL_RCC_LSI_IsReady() != 0U)
 8005868:	f7ff fc7a 	bl	8005160 <LL_RCC_LSI_IsReady>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1ec      	bne.n	800584c <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800587a:	f023 0210 	bic.w	r2, r3, #16
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800588c:	f7ff fc48 	bl	8005120 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005890:	f7fc fb3c 	bl	8001f0c <HAL_GetTick>
 8005894:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005898:	f7fc fb38 	bl	8001f0c <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b11      	cmp	r3, #17
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e1a1      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80058aa:	f7ff fc59 	bl	8005160 <LL_RCC_LSI_IsReady>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0f1      	beq.n	8005898 <HAL_RCC_OscConfig+0x3d4>
 80058b4:	e013      	b.n	80058de <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058b6:	f7ff fc43 	bl	8005140 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ba:	f7fc fb27 	bl	8001f0c <HAL_GetTick>
 80058be:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80058c0:	e008      	b.n	80058d4 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058c2:	f7fc fb23 	bl	8001f0c <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b11      	cmp	r3, #17
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e18c      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 80058d4:	f7ff fc44 	bl	8005160 <LL_RCC_LSI_IsReady>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f1      	bne.n	80058c2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 80d8 	beq.w	8005a9c <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80058ec:	f7ff fb5a 	bl	8004fa4 <LL_PWR_IsEnabledBkUpAccess>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d113      	bne.n	800591e <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80058f6:	f7ff fa99 	bl	8004e2c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058fa:	f7fc fb07 	bl	8001f0c <HAL_GetTick>
 80058fe:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005900:	e008      	b.n	8005914 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005902:	f7fc fb03 	bl	8001f0c <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e16c      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005914:	f7ff fb46 	bl	8004fa4 <LL_PWR_IsEnabledBkUpAccess>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0f1      	beq.n	8005902 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d07b      	beq.n	8005a1e <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	2b85      	cmp	r3, #133	; 0x85
 800592c:	d003      	beq.n	8005936 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	2b05      	cmp	r3, #5
 8005934:	d109      	bne.n	800594a <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005942:	f043 0304 	orr.w	r3, r3, #4
 8005946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594a:	f7fc fadf 	bl	8001f0c <HAL_GetTick>
 800594e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005958:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800595c:	f043 0301 	orr.w	r3, r3, #1
 8005960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005964:	e00a      	b.n	800597c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005966:	f7fc fad1 	bl	8001f0c <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	f241 3288 	movw	r2, #5000	; 0x1388
 8005974:	4293      	cmp	r3, r2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e138      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 800597c:	f7ff fbbf 	bl	80050fe <LL_RCC_LSE_IsReady>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0ef      	beq.n	8005966 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	2b81      	cmp	r3, #129	; 0x81
 800598c:	d003      	beq.n	8005996 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	2b85      	cmp	r3, #133	; 0x85
 8005994:	d121      	bne.n	80059da <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005996:	f7fc fab9 	bl	8001f0c <HAL_GetTick>
 800599a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800599c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80059b0:	e00a      	b.n	80059c8 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b2:	f7fc faab 	bl	8001f0c <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e112      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80059c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0ec      	beq.n	80059b2 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80059d8:	e060      	b.n	8005a9c <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059da:	f7fc fa97 	bl	8001f0c <HAL_GetTick>
 80059de:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80059e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80059f4:	e00a      	b.n	8005a0c <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f6:	f7fc fa89 	bl	8001f0c <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e0f0      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1ec      	bne.n	80059f6 <HAL_RCC_OscConfig+0x532>
 8005a1c:	e03e      	b.n	8005a9c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1e:	f7fc fa75 	bl	8001f0c <HAL_GetTick>
 8005a22:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a38:	e00a      	b.n	8005a50 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a3a:	f7fc fa67 	bl	8001f0c <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e0ce      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1ec      	bne.n	8005a3a <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a60:	f7fc fa54 	bl	8001f0c <HAL_GetTick>
 8005a64:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a72:	f023 0301 	bic.w	r3, r3, #1
 8005a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005a7a:	e00a      	b.n	8005a92 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a7c:	f7fc fa46 	bl	8001f0c <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e0ad      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005a92:	f7ff fb34 	bl	80050fe <LL_RCC_LSE_IsReady>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1ef      	bne.n	8005a7c <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 80a3 	beq.w	8005bec <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	2b0c      	cmp	r3, #12
 8005aaa:	d076      	beq.n	8005b9a <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d14b      	bne.n	8005b4c <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ab4:	f7ff fc75 	bl	80053a2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab8:	f7fc fa28 	bl	8001f0c <HAL_GetTick>
 8005abc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac0:	f7fc fa24 	bl	8001f0c <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b0a      	cmp	r3, #10
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e08d      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005ad2:	f7ff fc74 	bl	80053be <LL_RCC_PLL_IsReady>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1f1      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	4b45      	ldr	r3, [pc, #276]	; (8005bf8 <HAL_RCC_OscConfig+0x734>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005aee:	4311      	orrs	r1, r2
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005af4:	0212      	lsls	r2, r2, #8
 8005af6:	4311      	orrs	r1, r2
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005afc:	4311      	orrs	r1, r2
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b02:	4311      	orrs	r1, r2
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b12:	f7ff fc38 	bl	8005386 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b24:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b26:	f7fc f9f1 	bl	8001f0c <HAL_GetTick>
 8005b2a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b2e:	f7fc f9ed 	bl	8001f0c <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b0a      	cmp	r3, #10
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e056      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005b40:	f7ff fc3d 	bl	80053be <LL_RCC_PLL_IsReady>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0f1      	beq.n	8005b2e <HAL_RCC_OscConfig+0x66a>
 8005b4a:	e04f      	b.n	8005bec <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b4c:	f7ff fc29 	bl	80053a2 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b5a:	f023 0303 	bic.w	r3, r3, #3
 8005b5e:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8005b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b6a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b72:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b74:	f7fc f9ca 	bl	8001f0c <HAL_GetTick>
 8005b78:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b7c:	f7fc f9c6 	bl	8001f0c <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b0a      	cmp	r3, #10
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e02f      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005b8e:	f7ff fc16 	bl	80053be <LL_RCC_PLL_IsReady>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1f1      	bne.n	8005b7c <HAL_RCC_OscConfig+0x6b8>
 8005b98:	e028      	b.n	8005bec <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e023      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	f003 0203 	and.w	r2, r3, #3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d115      	bne.n	8005be8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d10e      	bne.n	8005be8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d106      	bne.n	8005be8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d001      	beq.n	8005bec <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3720      	adds	r7, #32
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	11c1808c 	.word	0x11c1808c

08005bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e10f      	b.n	8005e30 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c10:	4b89      	ldr	r3, [pc, #548]	; (8005e38 <HAL_RCC_ClockConfig+0x23c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d91b      	bls.n	8005c56 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1e:	4b86      	ldr	r3, [pc, #536]	; (8005e38 <HAL_RCC_ClockConfig+0x23c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f023 0207 	bic.w	r2, r3, #7
 8005c26:	4984      	ldr	r1, [pc, #528]	; (8005e38 <HAL_RCC_ClockConfig+0x23c>)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c2e:	f7fc f96d 	bl	8001f0c <HAL_GetTick>
 8005c32:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c34:	e008      	b.n	8005c48 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005c36:	f7fc f969 	bl	8001f0c <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e0f3      	b.n	8005e30 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c48:	4b7b      	ldr	r3, [pc, #492]	; (8005e38 <HAL_RCC_ClockConfig+0x23c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d1ef      	bne.n	8005c36 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d016      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff fb10 	bl	800528c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c6c:	f7fc f94e 	bl	8001f0c <HAL_GetTick>
 8005c70:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c74:	f7fc f94a 	bl	8001f0c <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e0d4      	b.n	8005e30 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005c86:	f7ff fbd8 	bl	800543a <LL_RCC_IsActiveFlag_HPRE>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0f1      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d016      	beq.n	8005cca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff fb06 	bl	80052b2 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ca6:	f7fc f931 	bl	8001f0c <HAL_GetTick>
 8005caa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005cac:	e008      	b.n	8005cc0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005cae:	f7fc f92d 	bl	8001f0c <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e0b7      	b.n	8005e30 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005cc0:	f7ff fbcc 	bl	800545c <LL_RCC_IsActiveFlag_SHDHPRE>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0f1      	beq.n	8005cae <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0304 	and.w	r3, r3, #4
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d016      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff faff 	bl	80052de <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ce0:	f7fc f914 	bl	8001f0c <HAL_GetTick>
 8005ce4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ce8:	f7fc f910 	bl	8001f0c <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e09a      	b.n	8005e30 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005cfa:	f7ff fbc1 	bl	8005480 <LL_RCC_IsActiveFlag_PPRE1>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0f1      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0308 	and.w	r3, r3, #8
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d017      	beq.n	8005d40 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff faf4 	bl	8005304 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d1c:	f7fc f8f6 	bl	8001f0c <HAL_GetTick>
 8005d20:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d24:	f7fc f8f2 	bl	8001f0c <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e07c      	b.n	8005e30 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005d36:	f7ff fbb4 	bl	80054a2 <LL_RCC_IsActiveFlag_PPRE2>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0f1      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d043      	beq.n	8005dd4 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d106      	bne.n	8005d62 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005d54:	f7ff f981 	bl	800505a <LL_RCC_HSE_IsReady>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d11e      	bne.n	8005d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e066      	b.n	8005e30 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d106      	bne.n	8005d78 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005d6a:	f7ff fb28 	bl	80053be <LL_RCC_PLL_IsReady>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d113      	bne.n	8005d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e05b      	b.n	8005e30 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d106      	bne.n	8005d8e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005d80:	f7ff fa1b 	bl	80051ba <LL_RCC_MSI_IsReady>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d108      	bne.n	8005d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e050      	b.n	8005e30 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005d8e:	f7ff f991 	bl	80050b4 <LL_RCC_HSI_IsReady>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e049      	b.n	8005e30 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff fa55 	bl	8005250 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005da6:	f7fc f8b1 	bl	8001f0c <HAL_GetTick>
 8005daa:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dac:	e00a      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dae:	f7fc f8ad 	bl	8001f0c <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e035      	b.n	8005e30 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dc4:	f7ff fa57 	bl	8005276 <LL_RCC_GetSysClkSource>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d1ec      	bne.n	8005dae <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dd4:	4b18      	ldr	r3, [pc, #96]	; (8005e38 <HAL_RCC_ClockConfig+0x23c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d21b      	bcs.n	8005e1a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005de2:	4b15      	ldr	r3, [pc, #84]	; (8005e38 <HAL_RCC_ClockConfig+0x23c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f023 0207 	bic.w	r2, r3, #7
 8005dea:	4913      	ldr	r1, [pc, #76]	; (8005e38 <HAL_RCC_ClockConfig+0x23c>)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005df2:	f7fc f88b 	bl	8001f0c <HAL_GetTick>
 8005df6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005df8:	e008      	b.n	8005e0c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005dfa:	f7fc f887 	bl	8001f0c <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e011      	b.n	8005e30 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <HAL_RCC_ClockConfig+0x23c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d1ef      	bne.n	8005dfa <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005e1a:	f000 f8b3 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	4a06      	ldr	r2, [pc, #24]	; (8005e3c <HAL_RCC_ClockConfig+0x240>)
 8005e22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e24:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <HAL_RCC_ClockConfig+0x244>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fc f865 	bl	8001ef8 <HAL_InitTick>
 8005e2e:	4603      	mov	r3, r0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	58004000 	.word	0x58004000
 8005e3c:	20000008 	.word	0x20000008
 8005e40:	2000000c 	.word	0x2000000c

08005e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e44:	b590      	push	{r4, r7, lr}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e52:	f7ff fa10 	bl	8005276 <LL_RCC_GetSysClkSource>
 8005e56:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e58:	f7ff fae4 	bl	8005424 <LL_RCC_PLL_GetMainSource>
 8005e5c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <HAL_RCC_GetSysClockFreq+0x2c>
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2b0c      	cmp	r3, #12
 8005e68:	d139      	bne.n	8005ede <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d136      	bne.n	8005ede <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005e70:	f7ff f9b3 	bl	80051da <LL_RCC_MSI_IsEnabledRangeSelect>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d115      	bne.n	8005ea6 <HAL_RCC_GetSysClockFreq+0x62>
 8005e7a:	f7ff f9ae 	bl	80051da <LL_RCC_MSI_IsEnabledRangeSelect>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d106      	bne.n	8005e92 <HAL_RCC_GetSysClockFreq+0x4e>
 8005e84:	f7ff f9b9 	bl	80051fa <LL_RCC_MSI_GetRange>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	0a1b      	lsrs	r3, r3, #8
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	e005      	b.n	8005e9e <HAL_RCC_GetSysClockFreq+0x5a>
 8005e92:	f7ff f9bd 	bl	8005210 <LL_RCC_MSI_GetRangeAfterStandby>
 8005e96:	4603      	mov	r3, r0
 8005e98:	0a1b      	lsrs	r3, r3, #8
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	4a36      	ldr	r2, [pc, #216]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x134>)
 8005ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea4:	e014      	b.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x8c>
 8005ea6:	f7ff f998 	bl	80051da <LL_RCC_MSI_IsEnabledRangeSelect>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d106      	bne.n	8005ebe <HAL_RCC_GetSysClockFreq+0x7a>
 8005eb0:	f7ff f9a3 	bl	80051fa <LL_RCC_MSI_GetRange>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	091b      	lsrs	r3, r3, #4
 8005eb8:	f003 030f 	and.w	r3, r3, #15
 8005ebc:	e005      	b.n	8005eca <HAL_RCC_GetSysClockFreq+0x86>
 8005ebe:	f7ff f9a7 	bl	8005210 <LL_RCC_MSI_GetRangeAfterStandby>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	091b      	lsrs	r3, r3, #4
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	4a2b      	ldr	r2, [pc, #172]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x134>)
 8005ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d115      	bne.n	8005f04 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005edc:	e012      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d102      	bne.n	8005eea <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ee4:	4b25      	ldr	r3, [pc, #148]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x138>)
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	e00c      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d109      	bne.n	8005f04 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005ef0:	f7ff f886 	bl	8005000 <LL_RCC_HSE_IsEnabledDiv2>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d102      	bne.n	8005f00 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005efa:	4b20      	ldr	r3, [pc, #128]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x138>)
 8005efc:	617b      	str	r3, [r7, #20]
 8005efe:	e001      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005f00:	4b1f      	ldr	r3, [pc, #124]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005f02:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f04:	f7ff f9b7 	bl	8005276 <LL_RCC_GetSysClkSource>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b0c      	cmp	r3, #12
 8005f0c:	d12f      	bne.n	8005f6e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005f0e:	f7ff fa89 	bl	8005424 <LL_RCC_PLL_GetMainSource>
 8005f12:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d003      	beq.n	8005f22 <HAL_RCC_GetSysClockFreq+0xde>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	d003      	beq.n	8005f28 <HAL_RCC_GetSysClockFreq+0xe4>
 8005f20:	e00d      	b.n	8005f3e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005f22:	4b16      	ldr	r3, [pc, #88]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x138>)
 8005f24:	60fb      	str	r3, [r7, #12]
        break;
 8005f26:	e00d      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005f28:	f7ff f86a 	bl	8005000 <LL_RCC_HSE_IsEnabledDiv2>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d102      	bne.n	8005f38 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005f32:	4b12      	ldr	r3, [pc, #72]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x138>)
 8005f34:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005f36:	e005      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005f38:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005f3a:	60fb      	str	r3, [r7, #12]
        break;
 8005f3c:	e002      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	60fb      	str	r3, [r7, #12]
        break;
 8005f42:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005f44:	f7ff fa4c 	bl	80053e0 <LL_RCC_PLL_GetN>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	fb03 f402 	mul.w	r4, r3, r2
 8005f50:	f7ff fa5d 	bl	800540e <LL_RCC_PLL_GetDivider>
 8005f54:	4603      	mov	r3, r0
 8005f56:	091b      	lsrs	r3, r3, #4
 8005f58:	3301      	adds	r3, #1
 8005f5a:	fbb4 f4f3 	udiv	r4, r4, r3
 8005f5e:	f7ff fa4b 	bl	80053f8 <LL_RCC_PLL_GetR>
 8005f62:	4603      	mov	r3, r0
 8005f64:	0f5b      	lsrs	r3, r3, #29
 8005f66:	3301      	adds	r3, #1
 8005f68:	fbb4 f3f3 	udiv	r3, r4, r3
 8005f6c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005f6e:	697b      	ldr	r3, [r7, #20]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	371c      	adds	r7, #28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd90      	pop	{r4, r7, pc}
 8005f78:	08010c24 	.word	0x08010c24
 8005f7c:	00f42400 	.word	0x00f42400
 8005f80:	01e84800 	.word	0x01e84800

08005f84 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f84:	b598      	push	{r3, r4, r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005f88:	f7ff ff5c 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	f7ff f9cc 	bl	800532a <LL_RCC_GetAHBPrescaler>
 8005f92:	4603      	mov	r3, r0
 8005f94:	091b      	lsrs	r3, r3, #4
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	4a03      	ldr	r2, [pc, #12]	; (8005fa8 <HAL_RCC_GetHCLKFreq+0x24>)
 8005f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fa0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	bd98      	pop	{r3, r4, r7, pc}
 8005fa8:	08010bc4 	.word	0x08010bc4

08005fac <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fac:	b598      	push	{r3, r4, r7, lr}
 8005fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005fb0:	f7ff ffe8 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	f7ff f9d0 	bl	800535a <LL_RCC_GetAPB1Prescaler>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	0a1b      	lsrs	r3, r3, #8
 8005fbe:	4a03      	ldr	r2, [pc, #12]	; (8005fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	bd98      	pop	{r3, r4, r7, pc}
 8005fcc:	08010c04 	.word	0x08010c04

08005fd0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fd0:	b598      	push	{r3, r4, r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005fd4:	f7ff ffd6 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 8005fd8:	4604      	mov	r4, r0
 8005fda:	f7ff f9c9 	bl	8005370 <LL_RCC_GetAPB2Prescaler>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	0adb      	lsrs	r3, r3, #11
 8005fe2:	4a03      	ldr	r2, [pc, #12]	; (8005ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fe8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bd98      	pop	{r3, r4, r7, pc}
 8005ff0:	08010c04 	.word	0x08010c04

08005ff4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	091b      	lsrs	r3, r3, #4
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	4a10      	ldr	r2, [pc, #64]	; (8006048 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800600c:	f7ff f998 	bl	8005340 <LL_RCC_GetAHB3Prescaler>
 8006010:	4603      	mov	r3, r0
 8006012:	091b      	lsrs	r3, r3, #4
 8006014:	f003 030f 	and.w	r3, r3, #15
 8006018:	4a0c      	ldr	r2, [pc, #48]	; (800604c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800601a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	fbb2 f3f3 	udiv	r3, r2, r3
 8006024:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	4a09      	ldr	r2, [pc, #36]	; (8006050 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800602a:	fba2 2303 	umull	r2, r3, r2, r3
 800602e:	0c9c      	lsrs	r4, r3, #18
 8006030:	f7fe ff3e 	bl	8004eb0 <HAL_PWREx_GetVoltageRange>
 8006034:	4603      	mov	r3, r0
 8006036:	4619      	mov	r1, r3
 8006038:	4620      	mov	r0, r4
 800603a:	f000 f80b 	bl	8006054 <RCC_SetFlashLatency>
 800603e:	4603      	mov	r3, r0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	bd90      	pop	{r4, r7, pc}
 8006048:	08010c24 	.word	0x08010c24
 800604c:	08010bc4 	.word	0x08010bc4
 8006050:	431bde83 	.word	0x431bde83

08006054 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08e      	sub	sp, #56	; 0x38
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800605e:	4a3a      	ldr	r2, [pc, #232]	; (8006148 <RCC_SetFlashLatency+0xf4>)
 8006060:	f107 0320 	add.w	r3, r7, #32
 8006064:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006068:	6018      	str	r0, [r3, #0]
 800606a:	3304      	adds	r3, #4
 800606c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800606e:	4a37      	ldr	r2, [pc, #220]	; (800614c <RCC_SetFlashLatency+0xf8>)
 8006070:	f107 0318 	add.w	r3, r7, #24
 8006074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006078:	6018      	str	r0, [r3, #0]
 800607a:	3304      	adds	r3, #4
 800607c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800607e:	4a34      	ldr	r2, [pc, #208]	; (8006150 <RCC_SetFlashLatency+0xfc>)
 8006080:	f107 030c 	add.w	r3, r7, #12
 8006084:	ca07      	ldmia	r2, {r0, r1, r2}
 8006086:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800608a:	2300      	movs	r3, #0
 800608c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006094:	d11b      	bne.n	80060ce <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006096:	2300      	movs	r3, #0
 8006098:	633b      	str	r3, [r7, #48]	; 0x30
 800609a:	e014      	b.n	80060c6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	3338      	adds	r3, #56	; 0x38
 80060a2:	443b      	add	r3, r7
 80060a4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80060a8:	461a      	mov	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d807      	bhi.n	80060c0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80060b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	3338      	adds	r3, #56	; 0x38
 80060b6:	443b      	add	r3, r7
 80060b8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80060bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060be:	e021      	b.n	8006104 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	3301      	adds	r3, #1
 80060c4:	633b      	str	r3, [r7, #48]	; 0x30
 80060c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d9e7      	bls.n	800609c <RCC_SetFlashLatency+0x48>
 80060cc:	e01a      	b.n	8006104 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80060ce:	2300      	movs	r3, #0
 80060d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060d2:	e014      	b.n	80060fe <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	3338      	adds	r3, #56	; 0x38
 80060da:	443b      	add	r3, r7
 80060dc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80060e0:	461a      	mov	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d807      	bhi.n	80060f8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80060e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	3338      	adds	r3, #56	; 0x38
 80060ee:	443b      	add	r3, r7
 80060f0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80060f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060f6:	e005      	b.n	8006104 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80060f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fa:	3301      	adds	r3, #1
 80060fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006100:	2b02      	cmp	r3, #2
 8006102:	d9e7      	bls.n	80060d4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006104:	4b13      	ldr	r3, [pc, #76]	; (8006154 <RCC_SetFlashLatency+0x100>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f023 0207 	bic.w	r2, r3, #7
 800610c:	4911      	ldr	r1, [pc, #68]	; (8006154 <RCC_SetFlashLatency+0x100>)
 800610e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006110:	4313      	orrs	r3, r2
 8006112:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006114:	f7fb fefa 	bl	8001f0c <HAL_GetTick>
 8006118:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800611a:	e008      	b.n	800612e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800611c:	f7fb fef6 	bl	8001f0c <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d901      	bls.n	800612e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e007      	b.n	800613e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800612e:	4b09      	ldr	r3, [pc, #36]	; (8006154 <RCC_SetFlashLatency+0x100>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006138:	429a      	cmp	r2, r3
 800613a:	d1ef      	bne.n	800611c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3738      	adds	r7, #56	; 0x38
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	08010a58 	.word	0x08010a58
 800614c:	08010a60 	.word	0x08010a60
 8006150:	08010a68 	.word	0x08010a68
 8006154:	58004000 	.word	0x58004000

08006158 <LL_RCC_LSE_IsReady>:
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800615c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b02      	cmp	r3, #2
 800616a:	d101      	bne.n	8006170 <LL_RCC_LSE_IsReady+0x18>
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <LL_RCC_LSE_IsReady+0x1a>
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	46bd      	mov	sp, r7
 8006176:	bc80      	pop	{r7}
 8006178:	4770      	bx	lr

0800617a <LL_RCC_SetUSARTClockSource>:
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006186:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	0c1b      	lsrs	r3, r3, #16
 800618e:	43db      	mvns	r3, r3
 8006190:	401a      	ands	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	b29b      	uxth	r3, r3
 8006196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800619a:	4313      	orrs	r3, r2
 800619c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr

080061aa <LL_RCC_SetI2SClockSource>:
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80061b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bc80      	pop	{r7}
 80061d2:	4770      	bx	lr

080061d4 <LL_RCC_SetLPUARTClockSource>:
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80061dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bc80      	pop	{r7}
 80061fc:	4770      	bx	lr

080061fe <LL_RCC_SetI2CClockSource>:
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800620a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	091b      	lsrs	r3, r3, #4
 8006212:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006216:	43db      	mvns	r3, r3
 8006218:	401a      	ands	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	011b      	lsls	r3, r3, #4
 800621e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006222:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006226:	4313      	orrs	r3, r2
 8006228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	bc80      	pop	{r7}
 8006234:	4770      	bx	lr

08006236 <LL_RCC_SetLPTIMClockSource>:
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800623e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006242:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	0c1b      	lsrs	r3, r3, #16
 800624a:	041b      	lsls	r3, r3, #16
 800624c:	43db      	mvns	r3, r3
 800624e:	401a      	ands	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	041b      	lsls	r3, r3, #16
 8006254:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006258:	4313      	orrs	r3, r2
 800625a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	bc80      	pop	{r7}
 8006266:	4770      	bx	lr

08006268 <LL_RCC_SetRNGClockSource>:
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006278:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800627c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4313      	orrs	r3, r2
 8006284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	bc80      	pop	{r7}
 8006290:	4770      	bx	lr

08006292 <LL_RCC_SetADCClockSource>:
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800629a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800629e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bc80      	pop	{r7}
 80062ba:	4770      	bx	lr

080062bc <LL_RCC_SetRTCClockSource>:
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80062c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr

080062e6 <LL_RCC_GetRTCClockSource>:
{
 80062e6:	b480      	push	{r7}
 80062e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80062ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc80      	pop	{r7}
 80062fc:	4770      	bx	lr

080062fe <LL_RCC_ForceBackupDomainReset>:
{
 80062fe:	b480      	push	{r7}
 8006300:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800630e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006316:	bf00      	nop
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr

0800631e <LL_RCC_ReleaseBackupDomainReset>:
{
 800631e:	b480      	push	{r7}
 8006320:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800632e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006336:	bf00      	nop
 8006338:	46bd      	mov	sp, r7
 800633a:	bc80      	pop	{r7}
 800633c:	4770      	bx	lr
	...

08006340 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006348:	2300      	movs	r3, #0
 800634a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800634c:	2300      	movs	r3, #0
 800634e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006350:	2300      	movs	r3, #0
 8006352:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d058      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006360:	f7fe fd64 	bl	8004e2c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006364:	f7fb fdd2 	bl	8001f0c <HAL_GetTick>
 8006368:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800636a:	e009      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800636c:	f7fb fdce 	bl	8001f0c <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d902      	bls.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	74fb      	strb	r3, [r7, #19]
        break;
 800637e:	e006      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006380:	4b7b      	ldr	r3, [pc, #492]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800638c:	d1ee      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800638e:	7cfb      	ldrb	r3, [r7, #19]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d13c      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006394:	f7ff ffa7 	bl	80062e6 <LL_RCC_GetRTCClockSource>
 8006398:	4602      	mov	r2, r0
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639e:	429a      	cmp	r2, r3
 80063a0:	d00f      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ae:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063b0:	f7ff ffa5 	bl	80062fe <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063b4:	f7ff ffb3 	bl	800631e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d014      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063cc:	f7fb fd9e 	bl	8001f0c <HAL_GetTick>
 80063d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80063d2:	e00b      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063d4:	f7fb fd9a 	bl	8001f0c <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d902      	bls.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	74fb      	strb	r3, [r7, #19]
            break;
 80063ea:	e004      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80063ec:	f7ff feb4 	bl	8006158 <LL_RCC_LSE_IsReady>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d1ee      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80063f6:	7cfb      	ldrb	r3, [r7, #19]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d105      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff ff5b 	bl	80062bc <LL_RCC_SetRTCClockSource>
 8006406:	e004      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006408:	7cfb      	ldrb	r3, [r7, #19]
 800640a:	74bb      	strb	r3, [r7, #18]
 800640c:	e001      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640e:	7cfb      	ldrb	r3, [r7, #19]
 8006410:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d004      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff fea9 	bl	800617a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff fe9e 	bl	800617a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0320 	and.w	r3, r3, #32
 8006446:	2b00      	cmp	r3, #0
 8006448:	d004      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff fec0 	bl	80061d4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800645c:	2b00      	cmp	r3, #0
 800645e:	d004      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff fee6 	bl	8006236 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006472:	2b00      	cmp	r3, #0
 8006474:	d004      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff fedb 	bl	8006236 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006488:	2b00      	cmp	r3, #0
 800648a:	d004      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006490:	4618      	mov	r0, r3
 8006492:	f7ff fed0 	bl	8006236 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d004      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff fea9 	bl	80061fe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d004      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff fe9e 	bl	80061fe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d004      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff fe93 	bl	80061fe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0310 	and.w	r3, r3, #16
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d011      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff fe5e 	bl	80061aa <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f6:	d107      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80064f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006506:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d010      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff fea5 	bl	8006268 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006522:	2b00      	cmp	r3, #0
 8006524:	d107      	bne.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006534:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d011      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff fea3 	bl	8006292 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006554:	d107      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006564:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006566:	7cbb      	ldrb	r3, [r7, #18]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3718      	adds	r7, #24
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	58000400 	.word	0x58000400

08006574 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d068      	beq.n	8006658 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7fb fb0a 	bl	8001bb4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065a8:	4b2e      	ldr	r3, [pc, #184]	; (8006664 <HAL_RTC_Init+0xf0>)
 80065aa:	22ca      	movs	r2, #202	; 0xca
 80065ac:	625a      	str	r2, [r3, #36]	; 0x24
 80065ae:	4b2d      	ldr	r3, [pc, #180]	; (8006664 <HAL_RTC_Init+0xf0>)
 80065b0:	2253      	movs	r2, #83	; 0x53
 80065b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fa0f 	bl	80069d8 <RTC_EnterInitMode>
 80065ba:	4603      	mov	r3, r0
 80065bc:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d13f      	bne.n	8006644 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80065c4:	4b27      	ldr	r3, [pc, #156]	; (8006664 <HAL_RTC_Init+0xf0>)
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	4a26      	ldr	r2, [pc, #152]	; (8006664 <HAL_RTC_Init+0xf0>)
 80065ca:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80065ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d2:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80065d4:	4b23      	ldr	r3, [pc, #140]	; (8006664 <HAL_RTC_Init+0xf0>)
 80065d6:	699a      	ldr	r2, [r3, #24]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6859      	ldr	r1, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	4319      	orrs	r1, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	430b      	orrs	r3, r1
 80065e8:	491e      	ldr	r1, [pc, #120]	; (8006664 <HAL_RTC_Init+0xf0>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	041b      	lsls	r3, r3, #16
 80065f8:	491a      	ldr	r1, [pc, #104]	; (8006664 <HAL_RTC_Init+0xf0>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80065fe:	4b19      	ldr	r3, [pc, #100]	; (8006664 <HAL_RTC_Init+0xf0>)
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660e:	430b      	orrs	r3, r1
 8006610:	4914      	ldr	r1, [pc, #80]	; (8006664 <HAL_RTC_Init+0xf0>)
 8006612:	4313      	orrs	r3, r2
 8006614:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fa12 	bl	8006a40 <RTC_ExitInitMode>
 800661c:	4603      	mov	r3, r0
 800661e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10e      	bne.n	8006644 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006626:	4b0f      	ldr	r3, [pc, #60]	; (8006664 <HAL_RTC_Init+0xf0>)
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a19      	ldr	r1, [r3, #32]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	4319      	orrs	r1, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	430b      	orrs	r3, r1
 800663e:	4909      	ldr	r1, [pc, #36]	; (8006664 <HAL_RTC_Init+0xf0>)
 8006640:	4313      	orrs	r3, r2
 8006642:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006644:	4b07      	ldr	r3, [pc, #28]	; (8006664 <HAL_RTC_Init+0xf0>)
 8006646:	22ff      	movs	r2, #255	; 0xff
 8006648:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d103      	bne.n	8006658 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	40002800 	.word	0x40002800

08006668 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006668:	b590      	push	{r4, r7, lr}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <HAL_RTC_SetAlarm_IT+0x1e>
 8006682:	2302      	movs	r3, #2
 8006684:	e0f3      	b.n	800686e <HAL_RTC_SetAlarm_IT+0x206>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2202      	movs	r2, #2
 8006692:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006696:	4b78      	ldr	r3, [pc, #480]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800669e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066a6:	d06a      	beq.n	800677e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d13a      	bne.n	8006724 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80066ae:	4b72      	ldr	r3, [pc, #456]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d102      	bne.n	80066c0 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2200      	movs	r2, #0
 80066be:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 f9f5 	bl	8006abc <RTC_ByteToBcd2>
 80066d2:	4603      	mov	r3, r0
 80066d4:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	785b      	ldrb	r3, [r3, #1]
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 f9ee 	bl	8006abc <RTC_ByteToBcd2>
 80066e0:	4603      	mov	r3, r0
 80066e2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80066e4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	789b      	ldrb	r3, [r3, #2]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 f9e6 	bl	8006abc <RTC_ByteToBcd2>
 80066f0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80066f2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	78db      	ldrb	r3, [r3, #3]
 80066fa:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80066fc:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006706:	4618      	mov	r0, r3
 8006708:	f000 f9d8 	bl	8006abc <RTC_ByteToBcd2>
 800670c:	4603      	mov	r3, r0
 800670e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006710:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006718:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	e02c      	b.n	800677e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 800672c:	d00d      	beq.n	800674a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006736:	d008      	beq.n	800674a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006738:	4b4f      	ldr	r3, [pc, #316]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006740:	2b00      	cmp	r3, #0
 8006742:	d102      	bne.n	800674a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2200      	movs	r2, #0
 8006748:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006756:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800675c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	78db      	ldrb	r3, [r3, #3]
 8006762:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006764:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800676c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800676e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006774:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800677e:	4b3e      	ldr	r3, [pc, #248]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 8006780:	22ca      	movs	r2, #202	; 0xca
 8006782:	625a      	str	r2, [r3, #36]	; 0x24
 8006784:	4b3c      	ldr	r3, [pc, #240]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 8006786:	2253      	movs	r2, #83	; 0x53
 8006788:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006792:	d12c      	bne.n	80067ee <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006794:	4b38      	ldr	r3, [pc, #224]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	4a37      	ldr	r2, [pc, #220]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 800679a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800679e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80067a0:	4b35      	ldr	r3, [pc, #212]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 80067a2:	2201      	movs	r2, #1
 80067a4:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ac:	d107      	bne.n	80067be <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	699a      	ldr	r2, [r3, #24]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	4930      	ldr	r1, [pc, #192]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	644b      	str	r3, [r1, #68]	; 0x44
 80067bc:	e006      	b.n	80067cc <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80067be:	4a2e      	ldr	r2, [pc, #184]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80067c4:	4a2c      	ldr	r2, [pc, #176]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80067cc:	4a2a      	ldr	r2, [pc, #168]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d8:	f043 0201 	orr.w	r2, r3, #1
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80067e0:	4b25      	ldr	r3, [pc, #148]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	4a24      	ldr	r2, [pc, #144]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 80067e6:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80067ea:	6193      	str	r3, [r2, #24]
 80067ec:	e02b      	b.n	8006846 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80067ee:	4b22      	ldr	r3, [pc, #136]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	4a21      	ldr	r2, [pc, #132]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 80067f4:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80067f8:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80067fa:	4b1f      	ldr	r3, [pc, #124]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 80067fc:	2202      	movs	r2, #2
 80067fe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006806:	d107      	bne.n	8006818 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	699a      	ldr	r2, [r3, #24]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	4919      	ldr	r1, [pc, #100]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 8006812:	4313      	orrs	r3, r2
 8006814:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006816:	e006      	b.n	8006826 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006818:	4a17      	ldr	r2, [pc, #92]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800681e:	4a16      	ldr	r2, [pc, #88]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006826:	4a14      	ldr	r2, [pc, #80]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006832:	f043 0202 	orr.w	r2, r3, #2
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800683a:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	4a0e      	ldr	r2, [pc, #56]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 8006840:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006844:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006846:	4b0d      	ldr	r3, [pc, #52]	; (800687c <HAL_RTC_SetAlarm_IT+0x214>)
 8006848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800684c:	4a0b      	ldr	r2, [pc, #44]	; (800687c <HAL_RTC_SetAlarm_IT+0x214>)
 800684e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006852:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006856:	4b08      	ldr	r3, [pc, #32]	; (8006878 <HAL_RTC_SetAlarm_IT+0x210>)
 8006858:	22ff      	movs	r2, #255	; 0xff
 800685a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	371c      	adds	r7, #28
 8006872:	46bd      	mov	sp, r7
 8006874:	bd90      	pop	{r4, r7, pc}
 8006876:	bf00      	nop
 8006878:	40002800 	.word	0x40002800
 800687c:	58000800 	.word	0x58000800

08006880 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006890:	2b01      	cmp	r3, #1
 8006892:	d101      	bne.n	8006898 <HAL_RTC_DeactivateAlarm+0x18>
 8006894:	2302      	movs	r3, #2
 8006896:	e048      	b.n	800692a <HAL_RTC_DeactivateAlarm+0xaa>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068a8:	4b22      	ldr	r3, [pc, #136]	; (8006934 <HAL_RTC_DeactivateAlarm+0xb4>)
 80068aa:	22ca      	movs	r2, #202	; 0xca
 80068ac:	625a      	str	r2, [r3, #36]	; 0x24
 80068ae:	4b21      	ldr	r3, [pc, #132]	; (8006934 <HAL_RTC_DeactivateAlarm+0xb4>)
 80068b0:	2253      	movs	r2, #83	; 0x53
 80068b2:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ba:	d115      	bne.n	80068e8 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80068bc:	4b1d      	ldr	r3, [pc, #116]	; (8006934 <HAL_RTC_DeactivateAlarm+0xb4>)
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	4a1c      	ldr	r2, [pc, #112]	; (8006934 <HAL_RTC_DeactivateAlarm+0xb4>)
 80068c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80068c6:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80068c8:	4b1a      	ldr	r3, [pc, #104]	; (8006934 <HAL_RTC_DeactivateAlarm+0xb4>)
 80068ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068cc:	4a19      	ldr	r2, [pc, #100]	; (8006934 <HAL_RTC_DeactivateAlarm+0xb4>)
 80068ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068d2:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d8:	f023 0201 	bic.w	r2, r3, #1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80068e0:	4b14      	ldr	r3, [pc, #80]	; (8006934 <HAL_RTC_DeactivateAlarm+0xb4>)
 80068e2:	2201      	movs	r2, #1
 80068e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80068e6:	e014      	b.n	8006912 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80068e8:	4b12      	ldr	r3, [pc, #72]	; (8006934 <HAL_RTC_DeactivateAlarm+0xb4>)
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	4a11      	ldr	r2, [pc, #68]	; (8006934 <HAL_RTC_DeactivateAlarm+0xb4>)
 80068ee:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80068f2:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80068f4:	4b0f      	ldr	r3, [pc, #60]	; (8006934 <HAL_RTC_DeactivateAlarm+0xb4>)
 80068f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f8:	4a0e      	ldr	r2, [pc, #56]	; (8006934 <HAL_RTC_DeactivateAlarm+0xb4>)
 80068fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068fe:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006904:	f023 0202 	bic.w	r2, r3, #2
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800690c:	4b09      	ldr	r3, [pc, #36]	; (8006934 <HAL_RTC_DeactivateAlarm+0xb4>)
 800690e:	2202      	movs	r2, #2
 8006910:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006912:	4b08      	ldr	r3, [pc, #32]	; (8006934 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006914:	22ff      	movs	r2, #255	; 0xff
 8006916:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	bc80      	pop	{r7}
 8006932:	4770      	bx	lr
 8006934:	40002800 	.word	0x40002800

08006938 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006940:	4b11      	ldr	r3, [pc, #68]	; (8006988 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006942:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006948:	4013      	ands	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006956:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006958:	2201      	movs	r2, #1
 800695a:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7fb fd1c 	bl	800239a <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d005      	beq.n	8006978 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800696c:	4b06      	ldr	r3, [pc, #24]	; (8006988 <HAL_RTC_AlarmIRQHandler+0x50>)
 800696e:	2202      	movs	r2, #2
 8006970:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f94a 	bl	8006c0c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006980:	bf00      	nop
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	40002800 	.word	0x40002800

0800698c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006994:	4b0f      	ldr	r3, [pc, #60]	; (80069d4 <HAL_RTC_WaitForSynchro+0x48>)
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	4a0e      	ldr	r2, [pc, #56]	; (80069d4 <HAL_RTC_WaitForSynchro+0x48>)
 800699a:	f023 0320 	bic.w	r3, r3, #32
 800699e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80069a0:	f7fb fab4 	bl	8001f0c <HAL_GetTick>
 80069a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80069a6:	e009      	b.n	80069bc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069a8:	f7fb fab0 	bl	8001f0c <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069b6:	d901      	bls.n	80069bc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e006      	b.n	80069ca <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80069bc:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <HAL_RTC_WaitForSynchro+0x48>)
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0ef      	beq.n	80069a8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	40002800 	.word	0x40002800

080069d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80069e4:	4b15      	ldr	r3, [pc, #84]	; (8006a3c <RTC_EnterInitMode+0x64>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d120      	bne.n	8006a32 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80069f0:	4b12      	ldr	r3, [pc, #72]	; (8006a3c <RTC_EnterInitMode+0x64>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	4a11      	ldr	r2, [pc, #68]	; (8006a3c <RTC_EnterInitMode+0x64>)
 80069f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fa:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80069fc:	f7fb fa86 	bl	8001f0c <HAL_GetTick>
 8006a00:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a02:	e00d      	b.n	8006a20 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a04:	f7fb fa82 	bl	8001f0c <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a12:	d905      	bls.n	8006a20 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2203      	movs	r2, #3
 8006a1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a20:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <RTC_EnterInitMode+0x64>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d102      	bne.n	8006a32 <RTC_EnterInitMode+0x5a>
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
 8006a2e:	2b03      	cmp	r3, #3
 8006a30:	d1e8      	bne.n	8006a04 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	40002800 	.word	0x40002800

08006a40 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006a4c:	4b1a      	ldr	r3, [pc, #104]	; (8006ab8 <RTC_ExitInitMode+0x78>)
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	4a19      	ldr	r2, [pc, #100]	; (8006ab8 <RTC_ExitInitMode+0x78>)
 8006a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a56:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006a58:	4b17      	ldr	r3, [pc, #92]	; (8006ab8 <RTC_ExitInitMode+0x78>)
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10c      	bne.n	8006a7e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7ff ff91 	bl	800698c <HAL_RTC_WaitForSynchro>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d01e      	beq.n	8006aae <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2203      	movs	r2, #3
 8006a74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	73fb      	strb	r3, [r7, #15]
 8006a7c:	e017      	b.n	8006aae <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006a7e:	4b0e      	ldr	r3, [pc, #56]	; (8006ab8 <RTC_ExitInitMode+0x78>)
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	4a0d      	ldr	r2, [pc, #52]	; (8006ab8 <RTC_ExitInitMode+0x78>)
 8006a84:	f023 0320 	bic.w	r3, r3, #32
 8006a88:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7ff ff7e 	bl	800698c <HAL_RTC_WaitForSynchro>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d005      	beq.n	8006aa2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2203      	movs	r2, #3
 8006a9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006aa2:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <RTC_ExitInitMode+0x78>)
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	4a04      	ldr	r2, [pc, #16]	; (8006ab8 <RTC_ExitInitMode+0x78>)
 8006aa8:	f043 0320 	orr.w	r3, r3, #32
 8006aac:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	40002800 	.word	0x40002800

08006abc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006aca:	79fb      	ldrb	r3, [r7, #7]
 8006acc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006ace:	e005      	b.n	8006adc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006ad6:	7afb      	ldrb	r3, [r7, #11]
 8006ad8:	3b0a      	subs	r3, #10
 8006ada:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006adc:	7afb      	ldrb	r3, [r7, #11]
 8006ade:	2b09      	cmp	r3, #9
 8006ae0:	d8f6      	bhi.n	8006ad0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	7afb      	ldrb	r3, [r7, #11]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	b2db      	uxtb	r3, r3
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bc80      	pop	{r7}
 8006af8:	4770      	bx	lr
	...

08006afc <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e01f      	b.n	8006b52 <HAL_RTCEx_EnableBypassShadow+0x56>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2202      	movs	r2, #2
 8006b1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b22:	4b0e      	ldr	r3, [pc, #56]	; (8006b5c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006b24:	22ca      	movs	r2, #202	; 0xca
 8006b26:	625a      	str	r2, [r3, #36]	; 0x24
 8006b28:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006b2a:	2253      	movs	r2, #83	; 0x53
 8006b2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b2e:	4b0b      	ldr	r3, [pc, #44]	; (8006b5c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	4a0a      	ldr	r2, [pc, #40]	; (8006b5c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006b34:	f043 0320 	orr.w	r3, r3, #32
 8006b38:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b3a:	4b08      	ldr	r3, [pc, #32]	; (8006b5c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006b3c:	22ff      	movs	r2, #255	; 0xff
 8006b3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr
 8006b5c:	40002800 	.word	0x40002800

08006b60 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d101      	bne.n	8006b76 <HAL_RTCEx_SetSSRU_IT+0x16>
 8006b72:	2302      	movs	r3, #2
 8006b74:	e027      	b.n	8006bc6 <HAL_RTCEx_SetSSRU_IT+0x66>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2202      	movs	r2, #2
 8006b82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b86:	4b12      	ldr	r3, [pc, #72]	; (8006bd0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006b88:	22ca      	movs	r2, #202	; 0xca
 8006b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8006b8c:	4b10      	ldr	r3, [pc, #64]	; (8006bd0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006b8e:	2253      	movs	r2, #83	; 0x53
 8006b90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006b92:	4b0f      	ldr	r3, [pc, #60]	; (8006bd0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	4a0e      	ldr	r2, [pc, #56]	; (8006bd0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9c:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006b9e:	4b0d      	ldr	r3, [pc, #52]	; (8006bd4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ba4:	4a0b      	ldr	r2, [pc, #44]	; (8006bd4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006ba6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006baa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bae:	4b08      	ldr	r3, [pc, #32]	; (8006bd0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006bb0:	22ff      	movs	r2, #255	; 0xff
 8006bb2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bc80      	pop	{r7}
 8006bce:	4770      	bx	lr
 8006bd0:	40002800 	.word	0x40002800
 8006bd4:	58000800 	.word	0x58000800

08006bd8 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006be0:	4b09      	ldr	r3, [pc, #36]	; (8006c08 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d005      	beq.n	8006bf8 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8006bec:	4b06      	ldr	r3, [pc, #24]	; (8006c08 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006bee:	2240      	movs	r2, #64	; 0x40
 8006bf0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7fb fbdb 	bl	80023ae <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006c00:	bf00      	nop
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	40002800 	.word	0x40002800

08006c0c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bc80      	pop	{r7}
 8006c1c:	4770      	bx	lr
	...

08006c20 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006c2c:	4b07      	ldr	r3, [pc, #28]	; (8006c4c <HAL_RTCEx_BKUPWrite+0x2c>)
 8006c2e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	4413      	add	r3, r2
 8006c38:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	601a      	str	r2, [r3, #0]
}
 8006c40:	bf00      	nop
 8006c42:	371c      	adds	r7, #28
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bc80      	pop	{r7}
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	4000b100 	.word	0x4000b100

08006c50 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006c5a:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <HAL_RTCEx_BKUPRead+0x28>)
 8006c5c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bc80      	pop	{r7}
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	4000b100 	.word	0x4000b100

08006c7c <LL_PWR_SetRadioBusyTrigger>:
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006c84:	4b06      	ldr	r3, [pc, #24]	; (8006ca0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c8c:	4904      	ldr	r1, [pc, #16]	; (8006ca0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	608b      	str	r3, [r1, #8]
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bc80      	pop	{r7}
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	58000400 	.word	0x58000400

08006ca4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006ca8:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cae:	4a04      	ldr	r2, [pc, #16]	; (8006cc0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006cb8:	bf00      	nop
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr
 8006cc0:	58000400 	.word	0x58000400

08006cc4 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006cc8:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cce:	4a04      	ldr	r2, [pc, #16]	; (8006ce0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006cd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006cd8:	bf00      	nop
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bc80      	pop	{r7}
 8006cde:	4770      	bx	lr
 8006ce0:	58000400 	.word	0x58000400

08006ce4 <LL_PWR_ClearFlag_RFBUSY>:
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006ce8:	4b03      	ldr	r3, [pc, #12]	; (8006cf8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006cea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cee:	619a      	str	r2, [r3, #24]
}
 8006cf0:	bf00      	nop
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bc80      	pop	{r7}
 8006cf6:	4770      	bx	lr
 8006cf8:	58000400 	.word	0x58000400

08006cfc <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006d00:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d101      	bne.n	8006d10 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e000      	b.n	8006d12 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bc80      	pop	{r7}
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	58000400 	.word	0x58000400

08006d20 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8006d20:	b480      	push	{r7}
 8006d22:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006d24:	4b06      	ldr	r3, [pc, #24]	; (8006d40 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	f003 0304 	and.w	r3, r3, #4
 8006d2c:	2b04      	cmp	r3, #4
 8006d2e:	d101      	bne.n	8006d34 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bc80      	pop	{r7}
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	58000400 	.word	0x58000400

08006d44 <LL_RCC_RF_DisableReset>:
{
 8006d44:	b480      	push	{r7}
 8006d46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006d5c:	bf00      	nop
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bc80      	pop	{r7}
 8006d62:	4770      	bx	lr

08006d64 <LL_RCC_IsRFUnderReset>:
{
 8006d64:	b480      	push	{r7}
 8006d66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d78:	d101      	bne.n	8006d7e <LL_RCC_IsRFUnderReset+0x1a>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e000      	b.n	8006d80 <LL_RCC_IsRFUnderReset+0x1c>
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bc80      	pop	{r7}
 8006d86:	4770      	bx	lr

08006d88 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006d90:	4b06      	ldr	r3, [pc, #24]	; (8006dac <LL_EXTI_EnableIT_32_63+0x24>)
 8006d92:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006d96:	4905      	ldr	r1, [pc, #20]	; (8006dac <LL_EXTI_EnableIT_32_63+0x24>)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bc80      	pop	{r7}
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	58000800 	.word	0x58000800

08006db0 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d103      	bne.n	8006dc6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	73fb      	strb	r3, [r7, #15]
    return status;
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	e04b      	b.n	8006e5e <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	799b      	ldrb	r3, [r3, #6]
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d105      	bne.n	8006de0 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7fa fffa 	bl	8001dd4 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2202      	movs	r2, #2
 8006de4:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8006de6:	f7ff ffad 	bl	8006d44 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006dea:	4b1f      	ldr	r3, [pc, #124]	; (8006e68 <HAL_SUBGHZ_Init+0xb8>)
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	4613      	mov	r3, r2
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	1a9b      	subs	r3, r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	0cdb      	lsrs	r3, r3, #19
 8006df8:	2264      	movs	r2, #100	; 0x64
 8006dfa:	fb02 f303 	mul.w	r3, r2, r3
 8006dfe:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d105      	bne.n	8006e12 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	609a      	str	r2, [r3, #8]
      break;
 8006e10:	e007      	b.n	8006e22 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	3b01      	subs	r3, #1
 8006e16:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006e18:	f7ff ffa4 	bl	8006d64 <LL_RCC_IsRFUnderReset>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1ee      	bne.n	8006e00 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8006e22:	f7ff ff3f 	bl	8006ca4 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006e26:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006e2a:	f7ff ffad 	bl	8006d88 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006e2e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006e32:	f7ff ff23 	bl	8006c7c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006e36:	f7ff ff55 	bl	8006ce4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10a      	bne.n	8006e56 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 faad 	bl	80073a4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	719a      	strb	r2, [r3, #6]

  return status;
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20000008 	.word	0x20000008

08006e6c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	607a      	str	r2, [r7, #4]
 8006e76:	461a      	mov	r2, r3
 8006e78:	460b      	mov	r3, r1
 8006e7a:	817b      	strh	r3, [r7, #10]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	799b      	ldrb	r3, [r3, #6]
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d14a      	bne.n	8006f20 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	795b      	ldrb	r3, [r3, #5]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d101      	bne.n	8006e96 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006e92:	2302      	movs	r3, #2
 8006e94:	e045      	b.n	8006f22 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 fb4c 	bl	8007540 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006ea8:	f7ff ff0c 	bl	8006cc4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006eac:	210d      	movs	r1, #13
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 fa98 	bl	80073e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006eb4:	897b      	ldrh	r3, [r7, #10]
 8006eb6:	0a1b      	lsrs	r3, r3, #8
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 fa90 	bl	80073e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006ec4:	897b      	ldrh	r3, [r7, #10]
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	4619      	mov	r1, r3
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f000 fa8a 	bl	80073e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	82bb      	strh	r3, [r7, #20]
 8006ed4:	e00a      	b.n	8006eec <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006ed6:	8abb      	ldrh	r3, [r7, #20]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	4413      	add	r3, r2
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 fa7f 	bl	80073e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006ee6:	8abb      	ldrh	r3, [r7, #20]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	82bb      	strh	r3, [r7, #20]
 8006eec:	8aba      	ldrh	r2, [r7, #20]
 8006eee:	893b      	ldrh	r3, [r7, #8]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d3f0      	bcc.n	8006ed6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006ef4:	f7ff fed6 	bl	8006ca4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 fb45 	bl	8007588 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d002      	beq.n	8006f0c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	75fb      	strb	r3, [r7, #23]
 8006f0a:	e001      	b.n	8006f10 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2201      	movs	r2, #1
 8006f14:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	715a      	strb	r2, [r3, #5]

    return status;
 8006f1c:	7dfb      	ldrb	r3, [r7, #23]
 8006f1e:	e000      	b.n	8006f22 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006f20:	2302      	movs	r3, #2
  }
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b088      	sub	sp, #32
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	461a      	mov	r2, r3
 8006f36:	460b      	mov	r3, r1
 8006f38:	817b      	strh	r3, [r7, #10]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	799b      	ldrb	r3, [r3, #6]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d14a      	bne.n	8006fe2 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	795b      	ldrb	r3, [r3, #5]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d101      	bne.n	8006f58 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006f54:	2302      	movs	r3, #2
 8006f56:	e045      	b.n	8006fe4 <HAL_SUBGHZ_ReadRegisters+0xba>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 faee 	bl	8007540 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006f64:	f7ff feae 	bl	8006cc4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006f68:	211d      	movs	r1, #29
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f000 fa3a 	bl	80073e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006f70:	897b      	ldrh	r3, [r7, #10]
 8006f72:	0a1b      	lsrs	r3, r3, #8
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	4619      	mov	r1, r3
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 fa32 	bl	80073e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006f80:	897b      	ldrh	r3, [r7, #10]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	4619      	mov	r1, r3
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 fa2c 	bl	80073e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f000 fa28 	bl	80073e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006f94:	2300      	movs	r3, #0
 8006f96:	82fb      	strh	r3, [r7, #22]
 8006f98:	e009      	b.n	8006fae <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006f9a:	69b9      	ldr	r1, [r7, #24]
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 fa77 	bl	8007490 <SUBGHZSPI_Receive>
      pData++;
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006fa8:	8afb      	ldrh	r3, [r7, #22]
 8006faa:	3301      	adds	r3, #1
 8006fac:	82fb      	strh	r3, [r7, #22]
 8006fae:	8afa      	ldrh	r2, [r7, #22]
 8006fb0:	893b      	ldrh	r3, [r7, #8]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d3f1      	bcc.n	8006f9a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006fb6:	f7ff fe75 	bl	8006ca4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 fae4 	bl	8007588 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	77fb      	strb	r3, [r7, #31]
 8006fcc:	e001      	b.n	8006fd2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	715a      	strb	r2, [r3, #5]

    return status;
 8006fde:	7ffb      	ldrb	r3, [r7, #31]
 8006fe0:	e000      	b.n	8006fe4 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006fe2:	2302      	movs	r3, #2
  }
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3720      	adds	r7, #32
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	607a      	str	r2, [r7, #4]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	72fb      	strb	r3, [r7, #11]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	799b      	ldrb	r3, [r3, #6]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b01      	cmp	r3, #1
 8007008:	d14a      	bne.n	80070a0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	795b      	ldrb	r3, [r3, #5]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d101      	bne.n	8007016 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007012:	2302      	movs	r3, #2
 8007014:	e045      	b.n	80070a2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2201      	movs	r2, #1
 800701a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 fa8f 	bl	8007540 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007022:	7afb      	ldrb	r3, [r7, #11]
 8007024:	2b84      	cmp	r3, #132	; 0x84
 8007026:	d002      	beq.n	800702e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007028:	7afb      	ldrb	r3, [r7, #11]
 800702a:	2b94      	cmp	r3, #148	; 0x94
 800702c:	d103      	bne.n	8007036 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	711a      	strb	r2, [r3, #4]
 8007034:	e002      	b.n	800703c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800703c:	f7ff fe42 	bl	8006cc4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007040:	7afb      	ldrb	r3, [r7, #11]
 8007042:	4619      	mov	r1, r3
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 f9cd 	bl	80073e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800704a:	2300      	movs	r3, #0
 800704c:	82bb      	strh	r3, [r7, #20]
 800704e:	e00a      	b.n	8007066 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007050:	8abb      	ldrh	r3, [r7, #20]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	4413      	add	r3, r2
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	4619      	mov	r1, r3
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 f9c2 	bl	80073e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007060:	8abb      	ldrh	r3, [r7, #20]
 8007062:	3301      	adds	r3, #1
 8007064:	82bb      	strh	r3, [r7, #20]
 8007066:	8aba      	ldrh	r2, [r7, #20]
 8007068:	893b      	ldrh	r3, [r7, #8]
 800706a:	429a      	cmp	r2, r3
 800706c:	d3f0      	bcc.n	8007050 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800706e:	f7ff fe19 	bl	8006ca4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007072:	7afb      	ldrb	r3, [r7, #11]
 8007074:	2b84      	cmp	r3, #132	; 0x84
 8007076:	d002      	beq.n	800707e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 fa85 	bl	8007588 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	75fb      	strb	r3, [r7, #23]
 800708a:	e001      	b.n	8007090 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2201      	movs	r2, #1
 8007094:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	715a      	strb	r2, [r3, #5]

    return status;
 800709c:	7dfb      	ldrb	r3, [r7, #23]
 800709e:	e000      	b.n	80070a2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80070a0:	2302      	movs	r3, #2
  }
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b088      	sub	sp, #32
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	461a      	mov	r2, r3
 80070b6:	460b      	mov	r3, r1
 80070b8:	72fb      	strb	r3, [r7, #11]
 80070ba:	4613      	mov	r3, r2
 80070bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	799b      	ldrb	r3, [r3, #6]
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d13d      	bne.n	8007148 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	795b      	ldrb	r3, [r3, #5]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d101      	bne.n	80070d8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80070d4:	2302      	movs	r3, #2
 80070d6:	e038      	b.n	800714a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2201      	movs	r2, #1
 80070dc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 fa2e 	bl	8007540 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80070e4:	f7ff fdee 	bl	8006cc4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80070e8:	7afb      	ldrb	r3, [r7, #11]
 80070ea:	4619      	mov	r1, r3
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f979 	bl	80073e4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80070f2:	2100      	movs	r1, #0
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 f975 	bl	80073e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80070fa:	2300      	movs	r3, #0
 80070fc:	82fb      	strh	r3, [r7, #22]
 80070fe:	e009      	b.n	8007114 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007100:	69b9      	ldr	r1, [r7, #24]
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 f9c4 	bl	8007490 <SUBGHZSPI_Receive>
      pData++;
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	3301      	adds	r3, #1
 800710c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800710e:	8afb      	ldrh	r3, [r7, #22]
 8007110:	3301      	adds	r3, #1
 8007112:	82fb      	strh	r3, [r7, #22]
 8007114:	8afa      	ldrh	r2, [r7, #22]
 8007116:	893b      	ldrh	r3, [r7, #8]
 8007118:	429a      	cmp	r2, r3
 800711a:	d3f1      	bcc.n	8007100 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800711c:	f7ff fdc2 	bl	8006ca4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 fa31 	bl	8007588 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d002      	beq.n	8007134 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	77fb      	strb	r3, [r7, #31]
 8007132:	e001      	b.n	8007138 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2201      	movs	r2, #1
 800713c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	715a      	strb	r2, [r3, #5]

    return status;
 8007144:	7ffb      	ldrb	r3, [r7, #31]
 8007146:	e000      	b.n	800714a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007148:	2302      	movs	r3, #2
  }
}
 800714a:	4618      	mov	r0, r3
 800714c:	3720      	adds	r7, #32
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b086      	sub	sp, #24
 8007156:	af00      	add	r7, sp, #0
 8007158:	60f8      	str	r0, [r7, #12]
 800715a:	607a      	str	r2, [r7, #4]
 800715c:	461a      	mov	r2, r3
 800715e:	460b      	mov	r3, r1
 8007160:	72fb      	strb	r3, [r7, #11]
 8007162:	4613      	mov	r3, r2
 8007164:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	799b      	ldrb	r3, [r3, #6]
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b01      	cmp	r3, #1
 800716e:	d13e      	bne.n	80071ee <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	795b      	ldrb	r3, [r3, #5]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d101      	bne.n	800717c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007178:	2302      	movs	r3, #2
 800717a:	e039      	b.n	80071f0 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2201      	movs	r2, #1
 8007180:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 f9dc 	bl	8007540 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007188:	f7ff fd9c 	bl	8006cc4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800718c:	210e      	movs	r1, #14
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 f928 	bl	80073e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007194:	7afb      	ldrb	r3, [r7, #11]
 8007196:	4619      	mov	r1, r3
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 f923 	bl	80073e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800719e:	2300      	movs	r3, #0
 80071a0:	82bb      	strh	r3, [r7, #20]
 80071a2:	e00a      	b.n	80071ba <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80071a4:	8abb      	ldrh	r3, [r7, #20]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	4413      	add	r3, r2
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	4619      	mov	r1, r3
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f000 f918 	bl	80073e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80071b4:	8abb      	ldrh	r3, [r7, #20]
 80071b6:	3301      	adds	r3, #1
 80071b8:	82bb      	strh	r3, [r7, #20]
 80071ba:	8aba      	ldrh	r2, [r7, #20]
 80071bc:	893b      	ldrh	r3, [r7, #8]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d3f0      	bcc.n	80071a4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80071c2:	f7ff fd6f 	bl	8006ca4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f000 f9de 	bl	8007588 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	75fb      	strb	r3, [r7, #23]
 80071d8:	e001      	b.n	80071de <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2201      	movs	r2, #1
 80071e2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	715a      	strb	r2, [r3, #5]

    return status;
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	e000      	b.n	80071f0 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80071ee:	2302      	movs	r3, #2
  }
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	607a      	str	r2, [r7, #4]
 8007202:	461a      	mov	r2, r3
 8007204:	460b      	mov	r3, r1
 8007206:	72fb      	strb	r3, [r7, #11]
 8007208:	4613      	mov	r3, r2
 800720a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	799b      	ldrb	r3, [r3, #6]
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b01      	cmp	r3, #1
 8007218:	d141      	bne.n	800729e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	795b      	ldrb	r3, [r3, #5]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d101      	bne.n	8007226 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007222:	2302      	movs	r3, #2
 8007224:	e03c      	b.n	80072a0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2201      	movs	r2, #1
 800722a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 f987 	bl	8007540 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007232:	f7ff fd47 	bl	8006cc4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007236:	211e      	movs	r1, #30
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 f8d3 	bl	80073e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800723e:	7afb      	ldrb	r3, [r7, #11]
 8007240:	4619      	mov	r1, r3
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 f8ce 	bl	80073e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007248:	2100      	movs	r1, #0
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 f8ca 	bl	80073e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007250:	2300      	movs	r3, #0
 8007252:	82fb      	strh	r3, [r7, #22]
 8007254:	e009      	b.n	800726a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007256:	69b9      	ldr	r1, [r7, #24]
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f000 f919 	bl	8007490 <SUBGHZSPI_Receive>
      pData++;
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	3301      	adds	r3, #1
 8007262:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007264:	8afb      	ldrh	r3, [r7, #22]
 8007266:	3301      	adds	r3, #1
 8007268:	82fb      	strh	r3, [r7, #22]
 800726a:	8afa      	ldrh	r2, [r7, #22]
 800726c:	893b      	ldrh	r3, [r7, #8]
 800726e:	429a      	cmp	r2, r3
 8007270:	d3f1      	bcc.n	8007256 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007272:	f7ff fd17 	bl	8006ca4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 f986 	bl	8007588 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	77fb      	strb	r3, [r7, #31]
 8007288:	e001      	b.n	800728e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2201      	movs	r2, #1
 8007292:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	715a      	strb	r2, [r3, #5]

    return status;
 800729a:	7ffb      	ldrb	r3, [r7, #31]
 800729c:	e000      	b.n	80072a0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800729e:	2302      	movs	r3, #2
  }
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3720      	adds	r7, #32
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80072b0:	2300      	movs	r3, #0
 80072b2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80072b4:	f107 020c 	add.w	r2, r7, #12
 80072b8:	2302      	movs	r3, #2
 80072ba:	2112      	movs	r1, #18
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff fef4 	bl	80070aa <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80072c2:	7b3b      	ldrb	r3, [r7, #12]
 80072c4:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80072c6:	89fb      	ldrh	r3, [r7, #14]
 80072c8:	021b      	lsls	r3, r3, #8
 80072ca:	b21a      	sxth	r2, r3
 80072cc:	7b7b      	ldrb	r3, [r7, #13]
 80072ce:	b21b      	sxth	r3, r3
 80072d0:	4313      	orrs	r3, r2
 80072d2:	b21b      	sxth	r3, r3
 80072d4:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80072d6:	89fb      	ldrh	r3, [r7, #14]
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f005 f9d1 	bl	800c688 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80072e6:	89fb      	ldrh	r3, [r7, #14]
 80072e8:	085b      	lsrs	r3, r3, #1
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f005 f9d6 	bl	800c6a4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80072f8:	89fb      	ldrh	r3, [r7, #14]
 80072fa:	089b      	lsrs	r3, r3, #2
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f005 fa25 	bl	800c754 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800730a:	89fb      	ldrh	r3, [r7, #14]
 800730c:	08db      	lsrs	r3, r3, #3
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f005 fa2a 	bl	800c770 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800731c:	89fb      	ldrh	r3, [r7, #14]
 800731e:	091b      	lsrs	r3, r3, #4
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f005 fa2f 	bl	800c78c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800732e:	89fb      	ldrh	r3, [r7, #14]
 8007330:	095b      	lsrs	r3, r3, #5
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	d002      	beq.n	8007340 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f005 f9fc 	bl	800c738 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007340:	89fb      	ldrh	r3, [r7, #14]
 8007342:	099b      	lsrs	r3, r3, #6
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f005 f9b7 	bl	800c6c0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007352:	89fb      	ldrh	r3, [r7, #14]
 8007354:	09db      	lsrs	r3, r3, #7
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00e      	beq.n	800737c <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800735e:	89fb      	ldrh	r3, [r7, #14]
 8007360:	0a1b      	lsrs	r3, r3, #8
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	2b00      	cmp	r3, #0
 8007368:	d004      	beq.n	8007374 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800736a:	2101      	movs	r1, #1
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f005 f9b5 	bl	800c6dc <HAL_SUBGHZ_CADStatusCallback>
 8007372:	e003      	b.n	800737c <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007374:	2100      	movs	r1, #0
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f005 f9b0 	bl	800c6dc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800737c:	89fb      	ldrh	r3, [r7, #14]
 800737e:	0a5b      	lsrs	r3, r3, #9
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f005 f9c5 	bl	800c718 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 800738e:	f107 020c 	add.w	r2, r7, #12
 8007392:	2302      	movs	r3, #2
 8007394:	2102      	movs	r1, #2
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7ff fe28 	bl	8006fec <HAL_SUBGHZ_ExecSetCmd>
}
 800739c:	bf00      	nop
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80073ac:	4b0c      	ldr	r3, [pc, #48]	; (80073e0 <SUBGHZSPI_Init+0x3c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a0b      	ldr	r2, [pc, #44]	; (80073e0 <SUBGHZSPI_Init+0x3c>)
 80073b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073b6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80073b8:	4a09      	ldr	r2, [pc, #36]	; (80073e0 <SUBGHZSPI_Init+0x3c>)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80073c0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80073c2:	4b07      	ldr	r3, [pc, #28]	; (80073e0 <SUBGHZSPI_Init+0x3c>)
 80073c4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80073c8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80073ca:	4b05      	ldr	r3, [pc, #20]	; (80073e0 <SUBGHZSPI_Init+0x3c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a04      	ldr	r2, [pc, #16]	; (80073e0 <SUBGHZSPI_Init+0x3c>)
 80073d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073d4:	6013      	str	r3, [r2, #0]
}
 80073d6:	bf00      	nop
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	bc80      	pop	{r7}
 80073de:	4770      	bx	lr
 80073e0:	58010000 	.word	0x58010000

080073e4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80073f4:	4b23      	ldr	r3, [pc, #140]	; (8007484 <SUBGHZSPI_Transmit+0xa0>)
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	4613      	mov	r3, r2
 80073fa:	00db      	lsls	r3, r3, #3
 80073fc:	1a9b      	subs	r3, r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	0cdb      	lsrs	r3, r3, #19
 8007402:	2264      	movs	r2, #100	; 0x64
 8007404:	fb02 f303 	mul.w	r3, r2, r3
 8007408:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d105      	bne.n	800741c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	609a      	str	r2, [r3, #8]
      break;
 800741a:	e008      	b.n	800742e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	3b01      	subs	r3, #1
 8007420:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007422:	4b19      	ldr	r3, [pc, #100]	; (8007488 <SUBGHZSPI_Transmit+0xa4>)
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b02      	cmp	r3, #2
 800742c:	d1ed      	bne.n	800740a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800742e:	4b17      	ldr	r3, [pc, #92]	; (800748c <SUBGHZSPI_Transmit+0xa8>)
 8007430:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	78fa      	ldrb	r2, [r7, #3]
 8007436:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007438:	4b12      	ldr	r3, [pc, #72]	; (8007484 <SUBGHZSPI_Transmit+0xa0>)
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	4613      	mov	r3, r2
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	1a9b      	subs	r3, r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	0cdb      	lsrs	r3, r3, #19
 8007446:	2264      	movs	r2, #100	; 0x64
 8007448:	fb02 f303 	mul.w	r3, r2, r3
 800744c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d105      	bne.n	8007460 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	609a      	str	r2, [r3, #8]
      break;
 800745e:	e008      	b.n	8007472 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3b01      	subs	r3, #1
 8007464:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007466:	4b08      	ldr	r3, [pc, #32]	; (8007488 <SUBGHZSPI_Transmit+0xa4>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b01      	cmp	r3, #1
 8007470:	d1ed      	bne.n	800744e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007472:	4b05      	ldr	r3, [pc, #20]	; (8007488 <SUBGHZSPI_Transmit+0xa4>)
 8007474:	68db      	ldr	r3, [r3, #12]

  return status;
 8007476:	7dfb      	ldrb	r3, [r7, #23]
}
 8007478:	4618      	mov	r0, r3
 800747a:	371c      	adds	r7, #28
 800747c:	46bd      	mov	sp, r7
 800747e:	bc80      	pop	{r7}
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	20000008 	.word	0x20000008
 8007488:	58010000 	.word	0x58010000
 800748c:	5801000c 	.word	0x5801000c

08007490 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800749e:	4b25      	ldr	r3, [pc, #148]	; (8007534 <SUBGHZSPI_Receive+0xa4>)
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	4613      	mov	r3, r2
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	1a9b      	subs	r3, r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	0cdb      	lsrs	r3, r3, #19
 80074ac:	2264      	movs	r2, #100	; 0x64
 80074ae:	fb02 f303 	mul.w	r3, r2, r3
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d105      	bne.n	80074c6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	609a      	str	r2, [r3, #8]
      break;
 80074c4:	e008      	b.n	80074d8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80074cc:	4b1a      	ldr	r3, [pc, #104]	; (8007538 <SUBGHZSPI_Receive+0xa8>)
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d1ed      	bne.n	80074b4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80074d8:	4b18      	ldr	r3, [pc, #96]	; (800753c <SUBGHZSPI_Receive+0xac>)
 80074da:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	22ff      	movs	r2, #255	; 0xff
 80074e0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80074e2:	4b14      	ldr	r3, [pc, #80]	; (8007534 <SUBGHZSPI_Receive+0xa4>)
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	4613      	mov	r3, r2
 80074e8:	00db      	lsls	r3, r3, #3
 80074ea:	1a9b      	subs	r3, r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	0cdb      	lsrs	r3, r3, #19
 80074f0:	2264      	movs	r2, #100	; 0x64
 80074f2:	fb02 f303 	mul.w	r3, r2, r3
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d105      	bne.n	800750a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	609a      	str	r2, [r3, #8]
      break;
 8007508:	e008      	b.n	800751c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3b01      	subs	r3, #1
 800750e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007510:	4b09      	ldr	r3, [pc, #36]	; (8007538 <SUBGHZSPI_Receive+0xa8>)
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	2b01      	cmp	r3, #1
 800751a:	d1ed      	bne.n	80074f8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800751c:	4b06      	ldr	r3, [pc, #24]	; (8007538 <SUBGHZSPI_Receive+0xa8>)
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	b2da      	uxtb	r2, r3
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	701a      	strb	r2, [r3, #0]

  return status;
 8007526:	7dfb      	ldrb	r3, [r7, #23]
}
 8007528:	4618      	mov	r0, r3
 800752a:	371c      	adds	r7, #28
 800752c:	46bd      	mov	sp, r7
 800752e:	bc80      	pop	{r7}
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	20000008 	.word	0x20000008
 8007538:	58010000 	.word	0x58010000
 800753c:	5801000c 	.word	0x5801000c

08007540 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	791b      	ldrb	r3, [r3, #4]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d111      	bne.n	8007574 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007550:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <SUBGHZ_CheckDeviceReady+0x44>)
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	4613      	mov	r3, r2
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	4413      	add	r3, r2
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	0c1b      	lsrs	r3, r3, #16
 800755e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007560:	f7ff fbb0 	bl	8006cc4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3b01      	subs	r3, #1
 8007568:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1f9      	bne.n	8007564 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007570:	f7ff fb98 	bl	8006ca4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f807 	bl	8007588 <SUBGHZ_WaitOnBusy>
 800757a:	4603      	mov	r3, r0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20000008 	.word	0x20000008

08007588 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007594:	4b12      	ldr	r3, [pc, #72]	; (80075e0 <SUBGHZ_WaitOnBusy+0x58>)
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	4613      	mov	r3, r2
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	4413      	add	r3, r2
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	0d1b      	lsrs	r3, r3, #20
 80075a2:	2264      	movs	r2, #100	; 0x64
 80075a4:	fb02 f303 	mul.w	r3, r2, r3
 80075a8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80075aa:	f7ff fbb9 	bl	8006d20 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80075ae:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d105      	bne.n	80075c2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2202      	movs	r2, #2
 80075be:	609a      	str	r2, [r3, #8]
      break;
 80075c0:	e009      	b.n	80075d6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80075c8:	f7ff fb98 	bl	8006cfc <LL_PWR_IsActiveFlag_RFBUSYS>
 80075cc:	4602      	mov	r2, r0
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	4013      	ands	r3, r2
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d0e9      	beq.n	80075aa <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3718      	adds	r7, #24
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	20000008 	.word	0x20000008

080075e4 <LL_RCC_GetUSARTClockSource>:
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80075ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	401a      	ands	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	041b      	lsls	r3, r3, #16
 80075fc:	4313      	orrs	r3, r2
}
 80075fe:	4618      	mov	r0, r3
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	bc80      	pop	{r7}
 8007606:	4770      	bx	lr

08007608 <LL_RCC_GetLPUARTClockSource>:
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007614:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4013      	ands	r3, r2
}
 800761c:	4618      	mov	r0, r3
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	bc80      	pop	{r7}
 8007624:	4770      	bx	lr

08007626 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e042      	b.n	80076be <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800763e:	2b00      	cmp	r3, #0
 8007640:	d106      	bne.n	8007650 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7fb f814 	bl	8002678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2224      	movs	r2, #36	; 0x24
 8007654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 0201 	bic.w	r2, r2, #1
 8007666:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fc4b 	bl	8007f04 <UART_SetConfig>
 800766e:	4603      	mov	r3, r0
 8007670:	2b01      	cmp	r3, #1
 8007672:	d101      	bne.n	8007678 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e022      	b.n	80076be <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767c:	2b00      	cmp	r3, #0
 800767e:	d002      	beq.n	8007686 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 feb3 	bl	80083ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007694:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f042 0201 	orr.w	r2, r2, #1
 80076b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 ff39 	bl	800852e <UART_CheckIdleState>
 80076bc:	4603      	mov	r3, r0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b08a      	sub	sp, #40	; 0x28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	4613      	mov	r3, r2
 80076d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076dc:	2b20      	cmp	r3, #32
 80076de:	d142      	bne.n	8007766 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d002      	beq.n	80076ec <HAL_UART_Receive_IT+0x24>
 80076e6:	88fb      	ldrh	r3, [r7, #6]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e03b      	b.n	8007768 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d101      	bne.n	80076fe <HAL_UART_Receive_IT+0x36>
 80076fa:	2302      	movs	r3, #2
 80076fc:	e034      	b.n	8007768 <HAL_UART_Receive_IT+0xa0>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a17      	ldr	r2, [pc, #92]	; (8007770 <HAL_UART_Receive_IT+0xa8>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d01f      	beq.n	8007756 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d018      	beq.n	8007756 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	613b      	str	r3, [r7, #16]
   return(result);
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	461a      	mov	r2, r3
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	623b      	str	r3, [r7, #32]
 8007744:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	69f9      	ldr	r1, [r7, #28]
 8007748:	6a3a      	ldr	r2, [r7, #32]
 800774a:	e841 2300 	strex	r3, r2, [r1]
 800774e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e6      	bne.n	8007724 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	461a      	mov	r2, r3
 800775a:	68b9      	ldr	r1, [r7, #8]
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 fff9 	bl	8008754 <UART_Start_Receive_IT>
 8007762:	4603      	mov	r3, r0
 8007764:	e000      	b.n	8007768 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007766:	2302      	movs	r3, #2
  }
}
 8007768:	4618      	mov	r0, r3
 800776a:	3728      	adds	r7, #40	; 0x28
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	40008000 	.word	0x40008000

08007774 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b08a      	sub	sp, #40	; 0x28
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	4613      	mov	r3, r2
 8007780:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007788:	2b20      	cmp	r3, #32
 800778a:	d17a      	bne.n	8007882 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <HAL_UART_Transmit_DMA+0x24>
 8007792:	88fb      	ldrh	r3, [r7, #6]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e073      	b.n	8007884 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d101      	bne.n	80077aa <HAL_UART_Transmit_DMA+0x36>
 80077a6:	2302      	movs	r3, #2
 80077a8:	e06c      	b.n	8007884 <HAL_UART_Transmit_DMA+0x110>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	88fa      	ldrh	r2, [r7, #6]
 80077bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	88fa      	ldrh	r2, [r7, #6]
 80077c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2221      	movs	r2, #33	; 0x21
 80077d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d02c      	beq.n	800783a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077e4:	4a29      	ldr	r2, [pc, #164]	; (800788c <HAL_UART_Transmit_DMA+0x118>)
 80077e6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077ec:	4a28      	ldr	r2, [pc, #160]	; (8007890 <HAL_UART_Transmit_DMA+0x11c>)
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077f4:	4a27      	ldr	r2, [pc, #156]	; (8007894 <HAL_UART_Transmit_DMA+0x120>)
 80077f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077fc:	2200      	movs	r2, #0
 80077fe:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007808:	4619      	mov	r1, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3328      	adds	r3, #40	; 0x28
 8007810:	461a      	mov	r2, r3
 8007812:	88fb      	ldrh	r3, [r7, #6]
 8007814:	f7fc fdc6 	bl	80043a4 <HAL_DMA_Start_IT>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00d      	beq.n	800783a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2210      	movs	r2, #16
 8007822:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2220      	movs	r2, #32
 8007832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e024      	b.n	8007884 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2240      	movs	r2, #64	; 0x40
 8007840:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3308      	adds	r3, #8
 8007850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	613b      	str	r3, [r7, #16]
   return(result);
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007860:	627b      	str	r3, [r7, #36]	; 0x24
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3308      	adds	r3, #8
 8007868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800786a:	623a      	str	r2, [r7, #32]
 800786c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	69f9      	ldr	r1, [r7, #28]
 8007870:	6a3a      	ldr	r2, [r7, #32]
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	61bb      	str	r3, [r7, #24]
   return(result);
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e5      	bne.n	800784a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	e000      	b.n	8007884 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8007882:	2302      	movs	r3, #2
  }
}
 8007884:	4618      	mov	r0, r3
 8007886:	3728      	adds	r7, #40	; 0x28
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	08008aef 	.word	0x08008aef
 8007890:	08008b89 	.word	0x08008b89
 8007894:	08008ba5 	.word	0x08008ba5

08007898 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b0ba      	sub	sp, #232	; 0xe8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80078c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80078c6:	4013      	ands	r3, r2
 80078c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80078cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d11b      	bne.n	800790c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80078d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d8:	f003 0320 	and.w	r3, r3, #32
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d015      	beq.n	800790c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80078e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078e4:	f003 0320 	and.w	r3, r3, #32
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d105      	bne.n	80078f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d009      	beq.n	800790c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 82d6 	beq.w	8007eae <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	4798      	blx	r3
      }
      return;
 800790a:	e2d0      	b.n	8007eae <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800790c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 811f 	beq.w	8007b54 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007916:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800791a:	4b8b      	ldr	r3, [pc, #556]	; (8007b48 <HAL_UART_IRQHandler+0x2b0>)
 800791c:	4013      	ands	r3, r2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d106      	bne.n	8007930 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007922:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007926:	4b89      	ldr	r3, [pc, #548]	; (8007b4c <HAL_UART_IRQHandler+0x2b4>)
 8007928:	4013      	ands	r3, r2
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 8112 	beq.w	8007b54 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b00      	cmp	r3, #0
 800793a:	d011      	beq.n	8007960 <HAL_UART_IRQHandler+0xc8>
 800793c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00b      	beq.n	8007960 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2201      	movs	r2, #1
 800794e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007956:	f043 0201 	orr.w	r2, r3, #1
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	2b00      	cmp	r3, #0
 800796a:	d011      	beq.n	8007990 <HAL_UART_IRQHandler+0xf8>
 800796c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00b      	beq.n	8007990 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2202      	movs	r2, #2
 800797e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007986:	f043 0204 	orr.w	r2, r3, #4
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	d011      	beq.n	80079c0 <HAL_UART_IRQHandler+0x128>
 800799c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00b      	beq.n	80079c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2204      	movs	r2, #4
 80079ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079b6:	f043 0202 	orr.w	r2, r3, #2
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079c4:	f003 0308 	and.w	r3, r3, #8
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d017      	beq.n	80079fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079d0:	f003 0320 	and.w	r3, r3, #32
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d105      	bne.n	80079e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80079d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80079dc:	4b5a      	ldr	r3, [pc, #360]	; (8007b48 <HAL_UART_IRQHandler+0x2b0>)
 80079de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2208      	movs	r2, #8
 80079ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079f2:	f043 0208 	orr.w	r2, r3, #8
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d012      	beq.n	8007a2e <HAL_UART_IRQHandler+0x196>
 8007a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00c      	beq.n	8007a2e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a24:	f043 0220 	orr.w	r2, r3, #32
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 823c 	beq.w	8007eb2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a3e:	f003 0320 	and.w	r3, r3, #32
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d013      	beq.n	8007a6e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a4a:	f003 0320 	and.w	r3, r3, #32
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d105      	bne.n	8007a5e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d007      	beq.n	8007a6e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a82:	2b40      	cmp	r3, #64	; 0x40
 8007a84:	d005      	beq.n	8007a92 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d04f      	beq.n	8007b32 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 ffc6 	bl	8008a24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa2:	2b40      	cmp	r3, #64	; 0x40
 8007aa4:	d141      	bne.n	8007b2a <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3308      	adds	r3, #8
 8007aac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3308      	adds	r3, #8
 8007ace:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ad2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ade:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ae2:	e841 2300 	strex	r3, r2, [r1]
 8007ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1d9      	bne.n	8007aa6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d013      	beq.n	8007b22 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007afe:	4a14      	ldr	r2, [pc, #80]	; (8007b50 <HAL_UART_IRQHandler+0x2b8>)
 8007b00:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fc fd28 	bl	800455c <HAL_DMA_Abort_IT>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d017      	beq.n	8007b42 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b20:	e00f      	b.n	8007b42 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f9d9 	bl	8007eda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b28:	e00b      	b.n	8007b42 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f9d5 	bl	8007eda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b30:	e007      	b.n	8007b42 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f9d1 	bl	8007eda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007b40:	e1b7      	b.n	8007eb2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b42:	bf00      	nop
    return;
 8007b44:	e1b5      	b.n	8007eb2 <HAL_UART_IRQHandler+0x61a>
 8007b46:	bf00      	nop
 8007b48:	10000001 	.word	0x10000001
 8007b4c:	04000120 	.word	0x04000120
 8007b50:	08008c25 	.word	0x08008c25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	f040 814a 	bne.w	8007df2 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b62:	f003 0310 	and.w	r3, r3, #16
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 8143 	beq.w	8007df2 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b70:	f003 0310 	and.w	r3, r3, #16
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 813c 	beq.w	8007df2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2210      	movs	r2, #16
 8007b80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8c:	2b40      	cmp	r3, #64	; 0x40
 8007b8e:	f040 80b5 	bne.w	8007cfc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8007b9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 8187 	beq.w	8007eb6 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	f080 817f 	bcs.w	8007eb6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bbe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0320 	and.w	r3, r3, #32
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f040 8086 	bne.w	8007ce0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007be0:	e853 3f00 	ldrex	r3, [r3]
 8007be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c02:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1da      	bne.n	8007bd4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3308      	adds	r3, #8
 8007c24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c28:	e853 3f00 	ldrex	r3, [r3]
 8007c2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c30:	f023 0301 	bic.w	r3, r3, #1
 8007c34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3308      	adds	r3, #8
 8007c3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c4e:	e841 2300 	strex	r3, r2, [r1]
 8007c52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1e1      	bne.n	8007c1e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3308      	adds	r3, #8
 8007c60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c64:	e853 3f00 	ldrex	r3, [r3]
 8007c68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3308      	adds	r3, #8
 8007c7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c86:	e841 2300 	strex	r3, r2, [r1]
 8007c8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1e3      	bne.n	8007c5a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2220      	movs	r2, #32
 8007c96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca8:	e853 3f00 	ldrex	r3, [r3]
 8007cac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cb0:	f023 0310 	bic.w	r3, r3, #16
 8007cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cc4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cca:	e841 2300 	strex	r3, r2, [r1]
 8007cce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e4      	bne.n	8007ca0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fc fbe0 	bl	80044a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f8f9 	bl	8007eec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007cfa:	e0dc      	b.n	8007eb6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 80ce 	beq.w	8007eba <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8007d1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 80c9 	beq.w	8007eba <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	461a      	mov	r2, r3
 8007d46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8007d4c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e4      	bne.n	8007d28 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3308      	adds	r3, #8
 8007d64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	e853 3f00 	ldrex	r3, [r3]
 8007d6c:	623b      	str	r3, [r7, #32]
   return(result);
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d74:	f023 0301 	bic.w	r3, r3, #1
 8007d78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3308      	adds	r3, #8
 8007d82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d86:	633a      	str	r2, [r7, #48]	; 0x30
 8007d88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d8e:	e841 2300 	strex	r3, r2, [r1]
 8007d92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1e1      	bne.n	8007d5e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	e853 3f00 	ldrex	r3, [r3]
 8007dba:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f023 0310 	bic.w	r3, r3, #16
 8007dc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007dd0:	61fb      	str	r3, [r7, #28]
 8007dd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd4:	69b9      	ldr	r1, [r7, #24]
 8007dd6:	69fa      	ldr	r2, [r7, #28]
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	617b      	str	r3, [r7, #20]
   return(result);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e4      	bne.n	8007dae <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007de4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007de8:	4619      	mov	r1, r3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f87e 	bl	8007eec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007df0:	e063      	b.n	8007eba <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00e      	beq.n	8007e1c <HAL_UART_IRQHandler+0x584>
 8007dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d008      	beq.n	8007e1c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f001 fba3 	bl	8009560 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e1a:	e051      	b.n	8007ec0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d014      	beq.n	8007e52 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d105      	bne.n	8007e40 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d008      	beq.n	8007e52 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d03a      	beq.n	8007ebe <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	4798      	blx	r3
    }
    return;
 8007e50:	e035      	b.n	8007ebe <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d009      	beq.n	8007e72 <HAL_UART_IRQHandler+0x5da>
 8007e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d003      	beq.n	8007e72 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fef0 	bl	8008c50 <UART_EndTransmit_IT>
    return;
 8007e70:	e026      	b.n	8007ec0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d009      	beq.n	8007e92 <HAL_UART_IRQHandler+0x5fa>
 8007e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 fb7a 	bl	8009584 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e90:	e016      	b.n	8007ec0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d010      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x628>
 8007e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	da0c      	bge.n	8007ec0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f001 fb63 	bl	8009572 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007eac:	e008      	b.n	8007ec0 <HAL_UART_IRQHandler+0x628>
      return;
 8007eae:	bf00      	nop
 8007eb0:	e006      	b.n	8007ec0 <HAL_UART_IRQHandler+0x628>
    return;
 8007eb2:	bf00      	nop
 8007eb4:	e004      	b.n	8007ec0 <HAL_UART_IRQHandler+0x628>
      return;
 8007eb6:	bf00      	nop
 8007eb8:	e002      	b.n	8007ec0 <HAL_UART_IRQHandler+0x628>
      return;
 8007eba:	bf00      	nop
 8007ebc:	e000      	b.n	8007ec0 <HAL_UART_IRQHandler+0x628>
    return;
 8007ebe:	bf00      	nop
  }
}
 8007ec0:	37e8      	adds	r7, #232	; 0xe8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop

08007ec8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bc80      	pop	{r7}
 8007ed8:	4770      	bx	lr

08007eda <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b083      	sub	sp, #12
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ee2:	bf00      	nop
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bc80      	pop	{r7}
 8007eea:	4770      	bx	lr

08007eec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bc80      	pop	{r7}
 8007f00:	4770      	bx	lr
	...

08007f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f08:	b08c      	sub	sp, #48	; 0x30
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	689a      	ldr	r2, [r3, #8]
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	431a      	orrs	r2, r3
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	69db      	ldr	r3, [r3, #28]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	4b94      	ldr	r3, [pc, #592]	; (8008184 <UART_SetConfig+0x280>)
 8007f34:	4013      	ands	r3, r2
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	6812      	ldr	r2, [r2, #0]
 8007f3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f3c:	430b      	orrs	r3, r1
 8007f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a89      	ldr	r2, [pc, #548]	; (8008188 <UART_SetConfig+0x284>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d004      	beq.n	8007f70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007f7a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	6812      	ldr	r2, [r2, #0]
 8007f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f84:	430b      	orrs	r3, r1
 8007f86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8e:	f023 010f 	bic.w	r1, r3, #15
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a7a      	ldr	r2, [pc, #488]	; (800818c <UART_SetConfig+0x288>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d127      	bne.n	8007ff8 <UART_SetConfig+0xf4>
 8007fa8:	2003      	movs	r0, #3
 8007faa:	f7ff fb1b 	bl	80075e4 <LL_RCC_GetUSARTClockSource>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8007fb4:	2b03      	cmp	r3, #3
 8007fb6:	d81b      	bhi.n	8007ff0 <UART_SetConfig+0xec>
 8007fb8:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <UART_SetConfig+0xbc>)
 8007fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbe:	bf00      	nop
 8007fc0:	08007fd1 	.word	0x08007fd1
 8007fc4:	08007fe1 	.word	0x08007fe1
 8007fc8:	08007fd9 	.word	0x08007fd9
 8007fcc:	08007fe9 	.word	0x08007fe9
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fd6:	e080      	b.n	80080da <UART_SetConfig+0x1d6>
 8007fd8:	2302      	movs	r3, #2
 8007fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fde:	e07c      	b.n	80080da <UART_SetConfig+0x1d6>
 8007fe0:	2304      	movs	r3, #4
 8007fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fe6:	e078      	b.n	80080da <UART_SetConfig+0x1d6>
 8007fe8:	2308      	movs	r3, #8
 8007fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fee:	e074      	b.n	80080da <UART_SetConfig+0x1d6>
 8007ff0:	2310      	movs	r3, #16
 8007ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ff6:	e070      	b.n	80080da <UART_SetConfig+0x1d6>
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a64      	ldr	r2, [pc, #400]	; (8008190 <UART_SetConfig+0x28c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d138      	bne.n	8008074 <UART_SetConfig+0x170>
 8008002:	200c      	movs	r0, #12
 8008004:	f7ff faee 	bl	80075e4 <LL_RCC_GetUSARTClockSource>
 8008008:	4603      	mov	r3, r0
 800800a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800800e:	2b0c      	cmp	r3, #12
 8008010:	d82c      	bhi.n	800806c <UART_SetConfig+0x168>
 8008012:	a201      	add	r2, pc, #4	; (adr r2, 8008018 <UART_SetConfig+0x114>)
 8008014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008018:	0800804d 	.word	0x0800804d
 800801c:	0800806d 	.word	0x0800806d
 8008020:	0800806d 	.word	0x0800806d
 8008024:	0800806d 	.word	0x0800806d
 8008028:	0800805d 	.word	0x0800805d
 800802c:	0800806d 	.word	0x0800806d
 8008030:	0800806d 	.word	0x0800806d
 8008034:	0800806d 	.word	0x0800806d
 8008038:	08008055 	.word	0x08008055
 800803c:	0800806d 	.word	0x0800806d
 8008040:	0800806d 	.word	0x0800806d
 8008044:	0800806d 	.word	0x0800806d
 8008048:	08008065 	.word	0x08008065
 800804c:	2300      	movs	r3, #0
 800804e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008052:	e042      	b.n	80080da <UART_SetConfig+0x1d6>
 8008054:	2302      	movs	r3, #2
 8008056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800805a:	e03e      	b.n	80080da <UART_SetConfig+0x1d6>
 800805c:	2304      	movs	r3, #4
 800805e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008062:	e03a      	b.n	80080da <UART_SetConfig+0x1d6>
 8008064:	2308      	movs	r3, #8
 8008066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800806a:	e036      	b.n	80080da <UART_SetConfig+0x1d6>
 800806c:	2310      	movs	r3, #16
 800806e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008072:	e032      	b.n	80080da <UART_SetConfig+0x1d6>
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a43      	ldr	r2, [pc, #268]	; (8008188 <UART_SetConfig+0x284>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d12a      	bne.n	80080d4 <UART_SetConfig+0x1d0>
 800807e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008082:	f7ff fac1 	bl	8007608 <LL_RCC_GetLPUARTClockSource>
 8008086:	4603      	mov	r3, r0
 8008088:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800808c:	d01a      	beq.n	80080c4 <UART_SetConfig+0x1c0>
 800808e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008092:	d81b      	bhi.n	80080cc <UART_SetConfig+0x1c8>
 8008094:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008098:	d00c      	beq.n	80080b4 <UART_SetConfig+0x1b0>
 800809a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800809e:	d815      	bhi.n	80080cc <UART_SetConfig+0x1c8>
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <UART_SetConfig+0x1a8>
 80080a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080a8:	d008      	beq.n	80080bc <UART_SetConfig+0x1b8>
 80080aa:	e00f      	b.n	80080cc <UART_SetConfig+0x1c8>
 80080ac:	2300      	movs	r3, #0
 80080ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080b2:	e012      	b.n	80080da <UART_SetConfig+0x1d6>
 80080b4:	2302      	movs	r3, #2
 80080b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ba:	e00e      	b.n	80080da <UART_SetConfig+0x1d6>
 80080bc:	2304      	movs	r3, #4
 80080be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c2:	e00a      	b.n	80080da <UART_SetConfig+0x1d6>
 80080c4:	2308      	movs	r3, #8
 80080c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ca:	e006      	b.n	80080da <UART_SetConfig+0x1d6>
 80080cc:	2310      	movs	r3, #16
 80080ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080d2:	e002      	b.n	80080da <UART_SetConfig+0x1d6>
 80080d4:	2310      	movs	r3, #16
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a2a      	ldr	r2, [pc, #168]	; (8008188 <UART_SetConfig+0x284>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	f040 80a4 	bne.w	800822e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080ea:	2b08      	cmp	r3, #8
 80080ec:	d823      	bhi.n	8008136 <UART_SetConfig+0x232>
 80080ee:	a201      	add	r2, pc, #4	; (adr r2, 80080f4 <UART_SetConfig+0x1f0>)
 80080f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f4:	08008119 	.word	0x08008119
 80080f8:	08008137 	.word	0x08008137
 80080fc:	08008121 	.word	0x08008121
 8008100:	08008137 	.word	0x08008137
 8008104:	08008127 	.word	0x08008127
 8008108:	08008137 	.word	0x08008137
 800810c:	08008137 	.word	0x08008137
 8008110:	08008137 	.word	0x08008137
 8008114:	0800812f 	.word	0x0800812f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008118:	f7fd ff48 	bl	8005fac <HAL_RCC_GetPCLK1Freq>
 800811c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800811e:	e010      	b.n	8008142 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008120:	4b1c      	ldr	r3, [pc, #112]	; (8008194 <UART_SetConfig+0x290>)
 8008122:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008124:	e00d      	b.n	8008142 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008126:	f7fd fe8d 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 800812a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800812c:	e009      	b.n	8008142 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800812e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008134:	e005      	b.n	8008142 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8008136:	2300      	movs	r3, #0
 8008138:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008140:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 8137 	beq.w	80083b8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	4a12      	ldr	r2, [pc, #72]	; (8008198 <UART_SetConfig+0x294>)
 8008150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008154:	461a      	mov	r2, r3
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	fbb3 f3f2 	udiv	r3, r3, r2
 800815c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	4613      	mov	r3, r2
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	4413      	add	r3, r2
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	429a      	cmp	r2, r3
 800816c:	d305      	bcc.n	800817a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	429a      	cmp	r2, r3
 8008178:	d910      	bls.n	800819c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008180:	e11a      	b.n	80083b8 <UART_SetConfig+0x4b4>
 8008182:	bf00      	nop
 8008184:	cfff69f3 	.word	0xcfff69f3
 8008188:	40008000 	.word	0x40008000
 800818c:	40013800 	.word	0x40013800
 8008190:	40004400 	.word	0x40004400
 8008194:	00f42400 	.word	0x00f42400
 8008198:	08010c64 	.word	0x08010c64
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	2200      	movs	r2, #0
 80081a0:	60bb      	str	r3, [r7, #8]
 80081a2:	60fa      	str	r2, [r7, #12]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	4a8e      	ldr	r2, [pc, #568]	; (80083e4 <UART_SetConfig+0x4e0>)
 80081aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	2200      	movs	r2, #0
 80081b2:	603b      	str	r3, [r7, #0]
 80081b4:	607a      	str	r2, [r7, #4]
 80081b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081be:	f7f8 ffef 	bl	80011a0 <__aeabi_uldivmod>
 80081c2:	4602      	mov	r2, r0
 80081c4:	460b      	mov	r3, r1
 80081c6:	4610      	mov	r0, r2
 80081c8:	4619      	mov	r1, r3
 80081ca:	f04f 0200 	mov.w	r2, #0
 80081ce:	f04f 0300 	mov.w	r3, #0
 80081d2:	020b      	lsls	r3, r1, #8
 80081d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80081d8:	0202      	lsls	r2, r0, #8
 80081da:	6979      	ldr	r1, [r7, #20]
 80081dc:	6849      	ldr	r1, [r1, #4]
 80081de:	0849      	lsrs	r1, r1, #1
 80081e0:	2000      	movs	r0, #0
 80081e2:	460c      	mov	r4, r1
 80081e4:	4605      	mov	r5, r0
 80081e6:	eb12 0804 	adds.w	r8, r2, r4
 80081ea:	eb43 0905 	adc.w	r9, r3, r5
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	469a      	mov	sl, r3
 80081f6:	4693      	mov	fp, r2
 80081f8:	4652      	mov	r2, sl
 80081fa:	465b      	mov	r3, fp
 80081fc:	4640      	mov	r0, r8
 80081fe:	4649      	mov	r1, r9
 8008200:	f7f8 ffce 	bl	80011a0 <__aeabi_uldivmod>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4613      	mov	r3, r2
 800820a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008212:	d308      	bcc.n	8008226 <UART_SetConfig+0x322>
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800821a:	d204      	bcs.n	8008226 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6a3a      	ldr	r2, [r7, #32]
 8008222:	60da      	str	r2, [r3, #12]
 8008224:	e0c8      	b.n	80083b8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800822c:	e0c4      	b.n	80083b8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	69db      	ldr	r3, [r3, #28]
 8008232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008236:	d168      	bne.n	800830a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8008238:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800823c:	2b08      	cmp	r3, #8
 800823e:	d828      	bhi.n	8008292 <UART_SetConfig+0x38e>
 8008240:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <UART_SetConfig+0x344>)
 8008242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008246:	bf00      	nop
 8008248:	0800826d 	.word	0x0800826d
 800824c:	08008275 	.word	0x08008275
 8008250:	0800827d 	.word	0x0800827d
 8008254:	08008293 	.word	0x08008293
 8008258:	08008283 	.word	0x08008283
 800825c:	08008293 	.word	0x08008293
 8008260:	08008293 	.word	0x08008293
 8008264:	08008293 	.word	0x08008293
 8008268:	0800828b 	.word	0x0800828b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800826c:	f7fd fe9e 	bl	8005fac <HAL_RCC_GetPCLK1Freq>
 8008270:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008272:	e014      	b.n	800829e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008274:	f7fd feac 	bl	8005fd0 <HAL_RCC_GetPCLK2Freq>
 8008278:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800827a:	e010      	b.n	800829e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800827c:	4b5a      	ldr	r3, [pc, #360]	; (80083e8 <UART_SetConfig+0x4e4>)
 800827e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008280:	e00d      	b.n	800829e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008282:	f7fd fddf 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8008286:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008288:	e009      	b.n	800829e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800828a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800828e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008290:	e005      	b.n	800829e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800829c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 8089 	beq.w	80083b8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	4a4e      	ldr	r2, [pc, #312]	; (80083e4 <UART_SetConfig+0x4e0>)
 80082ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082b0:	461a      	mov	r2, r3
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80082b8:	005a      	lsls	r2, r3, #1
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	085b      	lsrs	r3, r3, #1
 80082c0:	441a      	add	r2, r3
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082ce:	6a3b      	ldr	r3, [r7, #32]
 80082d0:	2b0f      	cmp	r3, #15
 80082d2:	d916      	bls.n	8008302 <UART_SetConfig+0x3fe>
 80082d4:	6a3b      	ldr	r3, [r7, #32]
 80082d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082da:	d212      	bcs.n	8008302 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	b29b      	uxth	r3, r3
 80082e0:	f023 030f 	bic.w	r3, r3, #15
 80082e4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	085b      	lsrs	r3, r3, #1
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	f003 0307 	and.w	r3, r3, #7
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	8bfb      	ldrh	r3, [r7, #30]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	8bfa      	ldrh	r2, [r7, #30]
 80082fe:	60da      	str	r2, [r3, #12]
 8008300:	e05a      	b.n	80083b8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008308:	e056      	b.n	80083b8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800830a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800830e:	2b08      	cmp	r3, #8
 8008310:	d827      	bhi.n	8008362 <UART_SetConfig+0x45e>
 8008312:	a201      	add	r2, pc, #4	; (adr r2, 8008318 <UART_SetConfig+0x414>)
 8008314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008318:	0800833d 	.word	0x0800833d
 800831c:	08008345 	.word	0x08008345
 8008320:	0800834d 	.word	0x0800834d
 8008324:	08008363 	.word	0x08008363
 8008328:	08008353 	.word	0x08008353
 800832c:	08008363 	.word	0x08008363
 8008330:	08008363 	.word	0x08008363
 8008334:	08008363 	.word	0x08008363
 8008338:	0800835b 	.word	0x0800835b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800833c:	f7fd fe36 	bl	8005fac <HAL_RCC_GetPCLK1Freq>
 8008340:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008342:	e014      	b.n	800836e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008344:	f7fd fe44 	bl	8005fd0 <HAL_RCC_GetPCLK2Freq>
 8008348:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800834a:	e010      	b.n	800836e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800834c:	4b26      	ldr	r3, [pc, #152]	; (80083e8 <UART_SetConfig+0x4e4>)
 800834e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008350:	e00d      	b.n	800836e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008352:	f7fd fd77 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8008356:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008358:	e009      	b.n	800836e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800835a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008360:	e005      	b.n	800836e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800836c:	bf00      	nop
    }

    if (pclk != 0U)
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008370:	2b00      	cmp	r3, #0
 8008372:	d021      	beq.n	80083b8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	4a1a      	ldr	r2, [pc, #104]	; (80083e4 <UART_SetConfig+0x4e0>)
 800837a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800837e:	461a      	mov	r2, r3
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	fbb3 f2f2 	udiv	r2, r3, r2
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	085b      	lsrs	r3, r3, #1
 800838c:	441a      	add	r2, r3
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	fbb2 f3f3 	udiv	r3, r2, r3
 8008396:	b29b      	uxth	r3, r3
 8008398:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	2b0f      	cmp	r3, #15
 800839e:	d908      	bls.n	80083b2 <UART_SetConfig+0x4ae>
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083a6:	d204      	bcs.n	80083b2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6a3a      	ldr	r2, [r7, #32]
 80083ae:	60da      	str	r2, [r3, #12]
 80083b0:	e002      	b.n	80083b8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	2200      	movs	r2, #0
 80083cc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	2200      	movs	r2, #0
 80083d2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80083d4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3730      	adds	r7, #48	; 0x30
 80083dc:	46bd      	mov	sp, r7
 80083de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083e2:	bf00      	nop
 80083e4:	08010c64 	.word	0x08010c64
 80083e8:	00f42400 	.word	0x00f42400

080083ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841a:	f003 0302 	and.w	r3, r3, #2
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	430a      	orrs	r2, r1
 8008436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843c:	f003 0304 	and.w	r3, r3, #4
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00a      	beq.n	800845a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845e:	f003 0308 	and.w	r3, r3, #8
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008480:	f003 0310 	and.w	r3, r3, #16
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00a      	beq.n	800849e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a2:	f003 0320 	and.w	r3, r3, #32
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00a      	beq.n	80084c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	430a      	orrs	r2, r1
 80084be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d01a      	beq.n	8008502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084ea:	d10a      	bne.n	8008502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	430a      	orrs	r2, r1
 8008500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00a      	beq.n	8008524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	605a      	str	r2, [r3, #4]
  }
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	bc80      	pop	{r7}
 800852c:	4770      	bx	lr

0800852e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b086      	sub	sp, #24
 8008532:	af02      	add	r7, sp, #8
 8008534:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800853e:	f7f9 fce5 	bl	8001f0c <HAL_GetTick>
 8008542:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0308 	and.w	r3, r3, #8
 800854e:	2b08      	cmp	r3, #8
 8008550:	d10e      	bne.n	8008570 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008552:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f82f 	bl	80085c4 <UART_WaitOnFlagUntilTimeout>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e025      	b.n	80085bc <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0304 	and.w	r3, r3, #4
 800857a:	2b04      	cmp	r3, #4
 800857c:	d10e      	bne.n	800859c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800857e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f819 	bl	80085c4 <UART_WaitOnFlagUntilTimeout>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e00f      	b.n	80085bc <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2220      	movs	r2, #32
 80085a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2220      	movs	r2, #32
 80085a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b09c      	sub	sp, #112	; 0x70
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	4613      	mov	r3, r2
 80085d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085d4:	e0a9      	b.n	800872a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085dc:	f000 80a5 	beq.w	800872a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085e0:	f7f9 fc94 	bl	8001f0c <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d302      	bcc.n	80085f6 <UART_WaitOnFlagUntilTimeout+0x32>
 80085f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d140      	bne.n	8008678 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085fe:	e853 3f00 	ldrex	r3, [r3]
 8008602:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008606:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800860a:	667b      	str	r3, [r7, #100]	; 0x64
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	461a      	mov	r2, r3
 8008612:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008614:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008616:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008618:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800861a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800861c:	e841 2300 	strex	r3, r2, [r1]
 8008620:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1e6      	bne.n	80085f6 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3308      	adds	r3, #8
 800862e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008632:	e853 3f00 	ldrex	r3, [r3]
 8008636:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863a:	f023 0301 	bic.w	r3, r3, #1
 800863e:	663b      	str	r3, [r7, #96]	; 0x60
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3308      	adds	r3, #8
 8008646:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008648:	64ba      	str	r2, [r7, #72]	; 0x48
 800864a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800864e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008650:	e841 2300 	strex	r3, r2, [r1]
 8008654:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1e5      	bne.n	8008628 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2220      	movs	r2, #32
 8008660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2220      	movs	r2, #32
 8008668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e069      	b.n	800874c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0304 	and.w	r3, r3, #4
 8008682:	2b00      	cmp	r3, #0
 8008684:	d051      	beq.n	800872a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008694:	d149      	bne.n	800872a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800869e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086be:	637b      	str	r3, [r7, #52]	; 0x34
 80086c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e6      	bne.n	80086a0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3308      	adds	r3, #8
 80086d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	613b      	str	r3, [r7, #16]
   return(result);
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f023 0301 	bic.w	r3, r3, #1
 80086e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3308      	adds	r3, #8
 80086f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086f2:	623a      	str	r2, [r7, #32]
 80086f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	69f9      	ldr	r1, [r7, #28]
 80086f8:	6a3a      	ldr	r2, [r7, #32]
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e5      	bne.n	80086d2 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2220      	movs	r2, #32
 800870a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2220      	movs	r2, #32
 8008712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2220      	movs	r2, #32
 800871a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e010      	b.n	800874c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	69da      	ldr	r2, [r3, #28]
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	4013      	ands	r3, r2
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	429a      	cmp	r2, r3
 8008738:	bf0c      	ite	eq
 800873a:	2301      	moveq	r3, #1
 800873c:	2300      	movne	r3, #0
 800873e:	b2db      	uxtb	r3, r3
 8008740:	461a      	mov	r2, r3
 8008742:	79fb      	ldrb	r3, [r7, #7]
 8008744:	429a      	cmp	r2, r3
 8008746:	f43f af46 	beq.w	80085d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3770      	adds	r7, #112	; 0x70
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008754:	b480      	push	{r7}
 8008756:	b0a3      	sub	sp, #140	; 0x8c
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	4613      	mov	r3, r2
 8008760:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	88fa      	ldrh	r2, [r7, #6]
 800876c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	88fa      	ldrh	r2, [r7, #6]
 8008774:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008786:	d10e      	bne.n	80087a6 <UART_Start_Receive_IT+0x52>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d105      	bne.n	800879c <UART_Start_Receive_IT+0x48>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008796:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800879a:	e02d      	b.n	80087f8 <UART_Start_Receive_IT+0xa4>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	22ff      	movs	r2, #255	; 0xff
 80087a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087a4:	e028      	b.n	80087f8 <UART_Start_Receive_IT+0xa4>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10d      	bne.n	80087ca <UART_Start_Receive_IT+0x76>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d104      	bne.n	80087c0 <UART_Start_Receive_IT+0x6c>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	22ff      	movs	r2, #255	; 0xff
 80087ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087be:	e01b      	b.n	80087f8 <UART_Start_Receive_IT+0xa4>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	227f      	movs	r2, #127	; 0x7f
 80087c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087c8:	e016      	b.n	80087f8 <UART_Start_Receive_IT+0xa4>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087d2:	d10d      	bne.n	80087f0 <UART_Start_Receive_IT+0x9c>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d104      	bne.n	80087e6 <UART_Start_Receive_IT+0x92>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	227f      	movs	r2, #127	; 0x7f
 80087e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087e4:	e008      	b.n	80087f8 <UART_Start_Receive_IT+0xa4>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	223f      	movs	r2, #63	; 0x3f
 80087ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087ee:	e003      	b.n	80087f8 <UART_Start_Receive_IT+0xa4>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2222      	movs	r2, #34	; 0x22
 8008804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3308      	adds	r3, #8
 800880e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008812:	e853 3f00 	ldrex	r3, [r3]
 8008816:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800881a:	f043 0301 	orr.w	r3, r3, #1
 800881e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3308      	adds	r3, #8
 8008828:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800882c:	673a      	str	r2, [r7, #112]	; 0x70
 800882e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008830:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008832:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008834:	e841 2300 	strex	r3, r2, [r1]
 8008838:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800883a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1e3      	bne.n	8008808 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008848:	d153      	bne.n	80088f2 <UART_Start_Receive_IT+0x19e>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008850:	88fa      	ldrh	r2, [r7, #6]
 8008852:	429a      	cmp	r2, r3
 8008854:	d34d      	bcc.n	80088f2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800885e:	d107      	bne.n	8008870 <UART_Start_Receive_IT+0x11c>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d103      	bne.n	8008870 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4a4a      	ldr	r2, [pc, #296]	; (8008994 <UART_Start_Receive_IT+0x240>)
 800886c:	671a      	str	r2, [r3, #112]	; 0x70
 800886e:	e002      	b.n	8008876 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	4a49      	ldr	r2, [pc, #292]	; (8008998 <UART_Start_Receive_IT+0x244>)
 8008874:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d01a      	beq.n	80088bc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800888e:	e853 3f00 	ldrex	r3, [r3]
 8008892:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800889a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088aa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088b0:	e841 2300 	strex	r3, r2, [r1]
 80088b4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80088b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e4      	bne.n	8008886 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3308      	adds	r3, #8
 80088c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	3308      	adds	r3, #8
 80088da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80088dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80088de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e5      	bne.n	80088bc <UART_Start_Receive_IT+0x168>
 80088f0:	e04a      	b.n	8008988 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088fa:	d107      	bne.n	800890c <UART_Start_Receive_IT+0x1b8>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d103      	bne.n	800890c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	4a25      	ldr	r2, [pc, #148]	; (800899c <UART_Start_Receive_IT+0x248>)
 8008908:	671a      	str	r2, [r3, #112]	; 0x70
 800890a:	e002      	b.n	8008912 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4a24      	ldr	r2, [pc, #144]	; (80089a0 <UART_Start_Receive_IT+0x24c>)
 8008910:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d019      	beq.n	8008956 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	e853 3f00 	ldrex	r3, [r3]
 800892e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008936:	677b      	str	r3, [r7, #116]	; 0x74
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	461a      	mov	r2, r3
 800893e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008940:	637b      	str	r3, [r7, #52]	; 0x34
 8008942:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008948:	e841 2300 	strex	r3, r2, [r1]
 800894c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800894e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e6      	bne.n	8008922 <UART_Start_Receive_IT+0x1ce>
 8008954:	e018      	b.n	8008988 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	613b      	str	r3, [r7, #16]
   return(result);
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f043 0320 	orr.w	r3, r3, #32
 800896a:	67bb      	str	r3, [r7, #120]	; 0x78
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	461a      	mov	r2, r3
 8008972:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008974:	623b      	str	r3, [r7, #32]
 8008976:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	69f9      	ldr	r1, [r7, #28]
 800897a:	6a3a      	ldr	r2, [r7, #32]
 800897c:	e841 2300 	strex	r3, r2, [r1]
 8008980:	61bb      	str	r3, [r7, #24]
   return(result);
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e6      	bne.n	8008956 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	378c      	adds	r7, #140	; 0x8c
 800898e:	46bd      	mov	sp, r7
 8008990:	bc80      	pop	{r7}
 8008992:	4770      	bx	lr
 8008994:	08009261 	.word	0x08009261
 8008998:	08008f69 	.word	0x08008f69
 800899c:	08008e07 	.word	0x08008e07
 80089a0:	08008ca7 	.word	0x08008ca7

080089a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b08f      	sub	sp, #60	; 0x3c
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b2:	6a3b      	ldr	r3, [r7, #32]
 80089b4:	e853 3f00 	ldrex	r3, [r3]
 80089b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80089c0:	637b      	str	r3, [r7, #52]	; 0x34
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	461a      	mov	r2, r3
 80089c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089cc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089d2:	e841 2300 	strex	r3, r2, [r1]
 80089d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1e6      	bne.n	80089ac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	3308      	adds	r3, #8
 80089e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	e853 3f00 	ldrex	r3, [r3]
 80089ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80089f4:	633b      	str	r3, [r7, #48]	; 0x30
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3308      	adds	r3, #8
 80089fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089fe:	61ba      	str	r2, [r7, #24]
 8008a00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a02:	6979      	ldr	r1, [r7, #20]
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	e841 2300 	strex	r3, r2, [r1]
 8008a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1e5      	bne.n	80089de <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2220      	movs	r2, #32
 8008a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008a1a:	bf00      	nop
 8008a1c:	373c      	adds	r7, #60	; 0x3c
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bc80      	pop	{r7}
 8008a22:	4770      	bx	lr

08008a24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b095      	sub	sp, #84	; 0x54
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a34:	e853 3f00 	ldrex	r3, [r3]
 8008a38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	461a      	mov	r2, r3
 8008a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8008a4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a52:	e841 2300 	strex	r3, r2, [r1]
 8008a56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1e6      	bne.n	8008a2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3308      	adds	r3, #8
 8008a64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	e853 3f00 	ldrex	r3, [r3]
 8008a6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a74:	f023 0301 	bic.w	r3, r3, #1
 8008a78:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	3308      	adds	r3, #8
 8008a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a8a:	e841 2300 	strex	r3, r2, [r1]
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1e3      	bne.n	8008a5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d118      	bne.n	8008ad0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	e853 3f00 	ldrex	r3, [r3]
 8008aaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	f023 0310 	bic.w	r3, r3, #16
 8008ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008abc:	61bb      	str	r3, [r7, #24]
 8008abe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac0:	6979      	ldr	r1, [r7, #20]
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	e841 2300 	strex	r3, r2, [r1]
 8008ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1e6      	bne.n	8008a9e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2220      	movs	r2, #32
 8008ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008ae4:	bf00      	nop
 8008ae6:	3754      	adds	r7, #84	; 0x54
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bc80      	pop	{r7}
 8008aec:	4770      	bx	lr

08008aee <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b090      	sub	sp, #64	; 0x40
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0320 	and.w	r3, r3, #32
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d137      	bne.n	8008b7a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3308      	adds	r3, #8
 8008b18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	e853 3f00 	ldrex	r3, [r3]
 8008b20:	623b      	str	r3, [r7, #32]
   return(result);
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b28:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3308      	adds	r3, #8
 8008b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b32:	633a      	str	r2, [r7, #48]	; 0x30
 8008b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b3a:	e841 2300 	strex	r3, r2, [r1]
 8008b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1e5      	bne.n	8008b12 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	e853 3f00 	ldrex	r3, [r3]
 8008b52:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8008b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	461a      	mov	r2, r3
 8008b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b64:	61fb      	str	r3, [r7, #28]
 8008b66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b68:	69b9      	ldr	r1, [r7, #24]
 8008b6a:	69fa      	ldr	r2, [r7, #28]
 8008b6c:	e841 2300 	strex	r3, r2, [r1]
 8008b70:	617b      	str	r3, [r7, #20]
   return(result);
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1e6      	bne.n	8008b46 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b78:	e002      	b.n	8008b80 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008b7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008b7c:	f7f9 fee8 	bl	8002950 <HAL_UART_TxCpltCallback>
}
 8008b80:	bf00      	nop
 8008b82:	3740      	adds	r7, #64	; 0x40
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b94:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f7ff f996 	bl	8007ec8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b9c:	bf00      	nop
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bb8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bc0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bcc:	2b80      	cmp	r3, #128	; 0x80
 8008bce:	d109      	bne.n	8008be4 <UART_DMAError+0x40>
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	2b21      	cmp	r3, #33	; 0x21
 8008bd4:	d106      	bne.n	8008be4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008bde:	6978      	ldr	r0, [r7, #20]
 8008be0:	f7ff fee0 	bl	80089a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bee:	2b40      	cmp	r3, #64	; 0x40
 8008bf0:	d109      	bne.n	8008c06 <UART_DMAError+0x62>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2b22      	cmp	r3, #34	; 0x22
 8008bf6:	d106      	bne.n	8008c06 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008c00:	6978      	ldr	r0, [r7, #20]
 8008c02:	f7ff ff0f 	bl	8008a24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c0c:	f043 0210 	orr.w	r2, r3, #16
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c16:	6978      	ldr	r0, [r7, #20]
 8008c18:	f7ff f95f 	bl	8007eda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c1c:	bf00      	nop
 8008c1e:	3718      	adds	r7, #24
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f7ff f949 	bl	8007eda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c48:	bf00      	nop
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b088      	sub	sp, #32
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	e853 3f00 	ldrex	r3, [r3]
 8008c64:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c6c:	61fb      	str	r3, [r7, #28]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	461a      	mov	r2, r3
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	61bb      	str	r3, [r7, #24]
 8008c78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7a:	6979      	ldr	r1, [r7, #20]
 8008c7c:	69ba      	ldr	r2, [r7, #24]
 8008c7e:	e841 2300 	strex	r3, r2, [r1]
 8008c82:	613b      	str	r3, [r7, #16]
   return(result);
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1e6      	bne.n	8008c58 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7f9 fe59 	bl	8002950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c9e:	bf00      	nop
 8008ca0:	3720      	adds	r7, #32
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b096      	sub	sp, #88	; 0x58
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008cb4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cbe:	2b22      	cmp	r3, #34	; 0x22
 8008cc0:	f040 8095 	bne.w	8008dee <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cca:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008cce:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008cd2:	b2d9      	uxtb	r1, r3
 8008cd4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cde:	400a      	ands	r2, r1
 8008ce0:	b2d2      	uxtb	r2, r2
 8008ce2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ce8:	1c5a      	adds	r2, r3, #1
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d178      	bne.n	8008dfe <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d14:	e853 3f00 	ldrex	r3, [r3]
 8008d18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d20:	653b      	str	r3, [r7, #80]	; 0x50
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	461a      	mov	r2, r3
 8008d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8008d2c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d32:	e841 2300 	strex	r3, r2, [r1]
 8008d36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1e6      	bne.n	8008d0c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	3308      	adds	r3, #8
 8008d44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	e853 3f00 	ldrex	r3, [r3]
 8008d4c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	f023 0301 	bic.w	r3, r3, #1
 8008d54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3308      	adds	r3, #8
 8008d5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d5e:	633a      	str	r2, [r7, #48]	; 0x30
 8008d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d66:	e841 2300 	strex	r3, r2, [r1]
 8008d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1e5      	bne.n	8008d3e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2220      	movs	r2, #32
 8008d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d12e      	bne.n	8008de6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	e853 3f00 	ldrex	r3, [r3]
 8008d9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f023 0310 	bic.w	r3, r3, #16
 8008da2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	461a      	mov	r2, r3
 8008daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dac:	61fb      	str	r3, [r7, #28]
 8008dae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	69b9      	ldr	r1, [r7, #24]
 8008db2:	69fa      	ldr	r2, [r7, #28]
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	617b      	str	r3, [r7, #20]
   return(result);
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e6      	bne.n	8008d8e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	f003 0310 	and.w	r3, r3, #16
 8008dca:	2b10      	cmp	r3, #16
 8008dcc:	d103      	bne.n	8008dd6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2210      	movs	r2, #16
 8008dd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ddc:	4619      	mov	r1, r3
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7ff f884 	bl	8007eec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008de4:	e00b      	b.n	8008dfe <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7f9 fdc8 	bl	800297c <HAL_UART_RxCpltCallback>
}
 8008dec:	e007      	b.n	8008dfe <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	699a      	ldr	r2, [r3, #24]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f042 0208 	orr.w	r2, r2, #8
 8008dfc:	619a      	str	r2, [r3, #24]
}
 8008dfe:	bf00      	nop
 8008e00:	3758      	adds	r7, #88	; 0x58
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b096      	sub	sp, #88	; 0x58
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e1e:	2b22      	cmp	r3, #34	; 0x22
 8008e20:	f040 8095 	bne.w	8008f4e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e32:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e34:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008e38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e42:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e48:	1c9a      	adds	r2, r3, #2
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	3b01      	subs	r3, #1
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d178      	bne.n	8008f5e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8008e8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e6      	bne.n	8008e6c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3308      	adds	r3, #8
 8008ea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	e853 3f00 	ldrex	r3, [r3]
 8008eac:	61fb      	str	r3, [r7, #28]
   return(result);
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	f023 0301 	bic.w	r3, r3, #1
 8008eb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3308      	adds	r3, #8
 8008ebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ebe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ec0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ec6:	e841 2300 	strex	r3, r2, [r1]
 8008eca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1e5      	bne.n	8008e9e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2220      	movs	r2, #32
 8008ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d12e      	bne.n	8008f46 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	e853 3f00 	ldrex	r3, [r3]
 8008efa:	60bb      	str	r3, [r7, #8]
   return(result);
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	f023 0310 	bic.w	r3, r3, #16
 8008f02:	647b      	str	r3, [r7, #68]	; 0x44
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f0c:	61bb      	str	r3, [r7, #24]
 8008f0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f10:	6979      	ldr	r1, [r7, #20]
 8008f12:	69ba      	ldr	r2, [r7, #24]
 8008f14:	e841 2300 	strex	r3, r2, [r1]
 8008f18:	613b      	str	r3, [r7, #16]
   return(result);
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1e6      	bne.n	8008eee <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	f003 0310 	and.w	r3, r3, #16
 8008f2a:	2b10      	cmp	r3, #16
 8008f2c:	d103      	bne.n	8008f36 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2210      	movs	r2, #16
 8008f34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7fe ffd4 	bl	8007eec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f44:	e00b      	b.n	8008f5e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7f9 fd18 	bl	800297c <HAL_UART_RxCpltCallback>
}
 8008f4c:	e007      	b.n	8008f5e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	699a      	ldr	r2, [r3, #24]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f042 0208 	orr.w	r2, r2, #8
 8008f5c:	619a      	str	r2, [r3, #24]
}
 8008f5e:	bf00      	nop
 8008f60:	3758      	adds	r7, #88	; 0x58
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b0a6      	sub	sp, #152	; 0x98
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f76:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f9e:	2b22      	cmp	r3, #34	; 0x22
 8008fa0:	f040 814f 	bne.w	8009242 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008faa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fae:	e0f6      	b.n	800919e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008fba:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008fbe:	b2d9      	uxtb	r1, r3
 8008fc0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008fc4:	b2da      	uxtb	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fca:	400a      	ands	r2, r1
 8008fcc:	b2d2      	uxtb	r2, r2
 8008fce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ff6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ffa:	f003 0307 	and.w	r3, r3, #7
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d053      	beq.n	80090aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009002:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	d011      	beq.n	8009032 <UART_RxISR_8BIT_FIFOEN+0xca>
 800900e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00b      	beq.n	8009032 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2201      	movs	r2, #1
 8009020:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009028:	f043 0201 	orr.w	r2, r3, #1
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009032:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009036:	f003 0302 	and.w	r3, r3, #2
 800903a:	2b00      	cmp	r3, #0
 800903c:	d011      	beq.n	8009062 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800903e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00b      	beq.n	8009062 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2202      	movs	r2, #2
 8009050:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009058:	f043 0204 	orr.w	r2, r3, #4
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009062:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009066:	f003 0304 	and.w	r3, r3, #4
 800906a:	2b00      	cmp	r3, #0
 800906c:	d011      	beq.n	8009092 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800906e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00b      	beq.n	8009092 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2204      	movs	r2, #4
 8009080:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009088:	f043 0202 	orr.w	r2, r3, #2
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009098:	2b00      	cmp	r3, #0
 800909a:	d006      	beq.n	80090aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7fe ff1c 	bl	8007eda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d173      	bne.n	800919e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090be:	e853 3f00 	ldrex	r3, [r3]
 80090c2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80090c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80090d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80090da:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090dc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80090de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090e0:	e841 2300 	strex	r3, r2, [r1]
 80090e4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80090e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1e4      	bne.n	80090b6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3308      	adds	r3, #8
 80090f2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090f6:	e853 3f00 	ldrex	r3, [r3]
 80090fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80090fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009102:	f023 0301 	bic.w	r3, r3, #1
 8009106:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3308      	adds	r3, #8
 800910e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009110:	657a      	str	r2, [r7, #84]	; 0x54
 8009112:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009114:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009116:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009118:	e841 2300 	strex	r3, r2, [r1]
 800911c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800911e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1e3      	bne.n	80090ec <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2220      	movs	r2, #32
 8009128:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009136:	2b01      	cmp	r3, #1
 8009138:	d12e      	bne.n	8009198 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009148:	e853 3f00 	ldrex	r3, [r3]
 800914c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800914e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009150:	f023 0310 	bic.w	r3, r3, #16
 8009154:	67bb      	str	r3, [r7, #120]	; 0x78
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800915e:	643b      	str	r3, [r7, #64]	; 0x40
 8009160:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009162:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009164:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009166:	e841 2300 	strex	r3, r2, [r1]
 800916a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800916c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1e6      	bne.n	8009140 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	f003 0310 	and.w	r3, r3, #16
 800917c:	2b10      	cmp	r3, #16
 800917e:	d103      	bne.n	8009188 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2210      	movs	r2, #16
 8009186:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800918e:	4619      	mov	r1, r3
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7fe feab 	bl	8007eec <HAL_UARTEx_RxEventCallback>
 8009196:	e002      	b.n	800919e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f7f9 fbef 	bl	800297c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800919e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d006      	beq.n	80091b4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80091a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091aa:	f003 0320 	and.w	r3, r3, #32
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f47f aefe 	bne.w	8008fb0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091be:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d045      	beq.n	8009252 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d23e      	bcs.n	8009252 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	3308      	adds	r3, #8
 80091da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	e853 3f00 	ldrex	r3, [r3]
 80091e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091ea:	673b      	str	r3, [r7, #112]	; 0x70
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	3308      	adds	r3, #8
 80091f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80091f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091fc:	e841 2300 	strex	r3, r2, [r1]
 8009200:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1e5      	bne.n	80091d4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a14      	ldr	r2, [pc, #80]	; (800925c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800920c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	e853 3f00 	ldrex	r3, [r3]
 800921a:	60bb      	str	r3, [r7, #8]
   return(result);
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	f043 0320 	orr.w	r3, r3, #32
 8009222:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	461a      	mov	r2, r3
 800922a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800922c:	61bb      	str	r3, [r7, #24]
 800922e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009230:	6979      	ldr	r1, [r7, #20]
 8009232:	69ba      	ldr	r2, [r7, #24]
 8009234:	e841 2300 	strex	r3, r2, [r1]
 8009238:	613b      	str	r3, [r7, #16]
   return(result);
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1e6      	bne.n	800920e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009240:	e007      	b.n	8009252 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	699a      	ldr	r2, [r3, #24]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f042 0208 	orr.w	r2, r2, #8
 8009250:	619a      	str	r2, [r3, #24]
}
 8009252:	bf00      	nop
 8009254:	3798      	adds	r7, #152	; 0x98
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	08008ca7 	.word	0x08008ca7

08009260 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b0a8      	sub	sp, #160	; 0xa0
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800926e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	69db      	ldr	r3, [r3, #28]
 8009278:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009296:	2b22      	cmp	r3, #34	; 0x22
 8009298:	f040 8153 	bne.w	8009542 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80092a2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092a6:	e0fa      	b.n	800949e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ae:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80092ba:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80092be:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80092c2:	4013      	ands	r3, r2
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d0:	1c9a      	adds	r2, r3, #2
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092dc:	b29b      	uxth	r3, r3
 80092de:	3b01      	subs	r3, #1
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	69db      	ldr	r3, [r3, #28]
 80092ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80092f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092f6:	f003 0307 	and.w	r3, r3, #7
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d053      	beq.n	80093a6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d011      	beq.n	800932e <UART_RxISR_16BIT_FIFOEN+0xce>
 800930a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800930e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00b      	beq.n	800932e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2201      	movs	r2, #1
 800931c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009324:	f043 0201 	orr.w	r2, r3, #1
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800932e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009332:	f003 0302 	and.w	r3, r3, #2
 8009336:	2b00      	cmp	r3, #0
 8009338:	d011      	beq.n	800935e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800933a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800933e:	f003 0301 	and.w	r3, r3, #1
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00b      	beq.n	800935e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2202      	movs	r2, #2
 800934c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009354:	f043 0204 	orr.w	r2, r3, #4
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800935e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009362:	f003 0304 	and.w	r3, r3, #4
 8009366:	2b00      	cmp	r3, #0
 8009368:	d011      	beq.n	800938e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800936a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00b      	beq.n	800938e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2204      	movs	r2, #4
 800937c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009384:	f043 0202 	orr.w	r2, r3, #2
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009394:	2b00      	cmp	r3, #0
 8009396:	d006      	beq.n	80093a6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7fe fd9e 	bl	8007eda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d175      	bne.n	800949e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093ba:	e853 3f00 	ldrex	r3, [r3]
 80093be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80093c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	461a      	mov	r2, r3
 80093d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093d6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80093da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093dc:	e841 2300 	strex	r3, r2, [r1]
 80093e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80093e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1e4      	bne.n	80093b2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3308      	adds	r3, #8
 80093ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093f2:	e853 3f00 	ldrex	r3, [r3]
 80093f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80093f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093fe:	f023 0301 	bic.w	r3, r3, #1
 8009402:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3308      	adds	r3, #8
 800940c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009410:	65ba      	str	r2, [r7, #88]	; 0x58
 8009412:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009414:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009416:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009418:	e841 2300 	strex	r3, r2, [r1]
 800941c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800941e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1e1      	bne.n	80093e8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2220      	movs	r2, #32
 8009428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009436:	2b01      	cmp	r3, #1
 8009438:	d12e      	bne.n	8009498 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	e853 3f00 	ldrex	r3, [r3]
 800944c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800944e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009450:	f023 0310 	bic.w	r3, r3, #16
 8009454:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	461a      	mov	r2, r3
 800945c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800945e:	647b      	str	r3, [r7, #68]	; 0x44
 8009460:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009462:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009464:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009466:	e841 2300 	strex	r3, r2, [r1]
 800946a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800946c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1e6      	bne.n	8009440 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	69db      	ldr	r3, [r3, #28]
 8009478:	f003 0310 	and.w	r3, r3, #16
 800947c:	2b10      	cmp	r3, #16
 800947e:	d103      	bne.n	8009488 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2210      	movs	r2, #16
 8009486:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7fe fd2b 	bl	8007eec <HAL_UARTEx_RxEventCallback>
 8009496:	e002      	b.n	800949e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f7f9 fa6f 	bl	800297c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800949e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d006      	beq.n	80094b4 <UART_RxISR_16BIT_FIFOEN+0x254>
 80094a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094aa:	f003 0320 	and.w	r3, r3, #32
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f47f aefa 	bne.w	80092a8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094ba:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80094be:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d045      	beq.n	8009552 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094cc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d23e      	bcs.n	8009552 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	3308      	adds	r3, #8
 80094da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	e853 3f00 	ldrex	r3, [r3]
 80094e2:	623b      	str	r3, [r7, #32]
   return(result);
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094ea:	677b      	str	r3, [r7, #116]	; 0x74
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	3308      	adds	r3, #8
 80094f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80094f4:	633a      	str	r2, [r7, #48]	; 0x30
 80094f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094fc:	e841 2300 	strex	r3, r2, [r1]
 8009500:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1e5      	bne.n	80094d4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a14      	ldr	r2, [pc, #80]	; (800955c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800950c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	e853 3f00 	ldrex	r3, [r3]
 800951a:	60fb      	str	r3, [r7, #12]
   return(result);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f043 0320 	orr.w	r3, r3, #32
 8009522:	673b      	str	r3, [r7, #112]	; 0x70
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	461a      	mov	r2, r3
 800952a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800952c:	61fb      	str	r3, [r7, #28]
 800952e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009530:	69b9      	ldr	r1, [r7, #24]
 8009532:	69fa      	ldr	r2, [r7, #28]
 8009534:	e841 2300 	strex	r3, r2, [r1]
 8009538:	617b      	str	r3, [r7, #20]
   return(result);
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1e6      	bne.n	800950e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009540:	e007      	b.n	8009552 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	699a      	ldr	r2, [r3, #24]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f042 0208 	orr.w	r2, r2, #8
 8009550:	619a      	str	r2, [r3, #24]
}
 8009552:	bf00      	nop
 8009554:	37a0      	adds	r7, #160	; 0xa0
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	08008e07 	.word	0x08008e07

08009560 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	bc80      	pop	{r7}
 8009570:	4770      	bx	lr

08009572 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009572:	b480      	push	{r7}
 8009574:	b083      	sub	sp, #12
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800957a:	bf00      	nop
 800957c:	370c      	adds	r7, #12
 800957e:	46bd      	mov	sp, r7
 8009580:	bc80      	pop	{r7}
 8009582:	4770      	bx	lr

08009584 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	bc80      	pop	{r7}
 8009594:	4770      	bx	lr

08009596 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b088      	sub	sp, #32
 800959a:	af02      	add	r7, sp, #8
 800959c:	60f8      	str	r0, [r7, #12]
 800959e:	1d3b      	adds	r3, r7, #4
 80095a0:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d101      	bne.n	80095b6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 80095b2:	2302      	movs	r3, #2
 80095b4:	e046      	b.n	8009644 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2224      	movs	r2, #36	; 0x24
 80095c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f022 0201 	bic.w	r2, r2, #1
 80095d4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	430a      	orrs	r2, r1
 80095e8:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d105      	bne.n	80095fc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80095f0:	1d3b      	adds	r3, r7, #4
 80095f2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f000 f911 	bl	800981e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f042 0201 	orr.w	r2, r2, #1
 800960a:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800960c:	f7f8 fc7e 	bl	8001f0c <HAL_GetTick>
 8009610:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009612:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	2200      	movs	r2, #0
 800961c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f7fe ffcf 	bl	80085c4 <UART_WaitOnFlagUntilTimeout>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d002      	beq.n	8009632 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800962c:	2303      	movs	r3, #3
 800962e:	75fb      	strb	r3, [r7, #23]
 8009630:	e003      	b.n	800963a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2220      	movs	r2, #32
 8009636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009642:	7dfb      	ldrb	r3, [r7, #23]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800964c:	b480      	push	{r7}
 800964e:	b089      	sub	sp, #36	; 0x24
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800965a:	2b01      	cmp	r3, #1
 800965c:	d101      	bne.n	8009662 <HAL_UARTEx_EnableStopMode+0x16>
 800965e:	2302      	movs	r3, #2
 8009660:	e021      	b.n	80096a6 <HAL_UARTEx_EnableStopMode+0x5a>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	e853 3f00 	ldrex	r3, [r3]
 8009676:	60bb      	str	r3, [r7, #8]
   return(result);
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	f043 0302 	orr.w	r3, r3, #2
 800967e:	61fb      	str	r3, [r7, #28]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	461a      	mov	r2, r3
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	61bb      	str	r3, [r7, #24]
 800968a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968c:	6979      	ldr	r1, [r7, #20]
 800968e:	69ba      	ldr	r2, [r7, #24]
 8009690:	e841 2300 	strex	r3, r2, [r1]
 8009694:	613b      	str	r3, [r7, #16]
   return(result);
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1e6      	bne.n	800966a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3724      	adds	r7, #36	; 0x24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bc80      	pop	{r7}
 80096ae:	4770      	bx	lr

080096b0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d101      	bne.n	80096c6 <HAL_UARTEx_EnableFifoMode+0x16>
 80096c2:	2302      	movs	r3, #2
 80096c4:	e02b      	b.n	800971e <HAL_UARTEx_EnableFifoMode+0x6e>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2224      	movs	r2, #36	; 0x24
 80096d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f022 0201 	bic.w	r2, r2, #1
 80096ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80096f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80096fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f8ac 	bl	8009864 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2220      	movs	r2, #32
 8009710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b084      	sub	sp, #16
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009736:	2b01      	cmp	r3, #1
 8009738:	d101      	bne.n	800973e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800973a:	2302      	movs	r3, #2
 800973c:	e02d      	b.n	800979a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2224      	movs	r2, #36	; 0x24
 800974a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f022 0201 	bic.w	r2, r2, #1
 8009764:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	430a      	orrs	r2, r1
 8009778:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f872 	bl	8009864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2220      	movs	r2, #32
 800978c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d101      	bne.n	80097ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80097b6:	2302      	movs	r3, #2
 80097b8:	e02d      	b.n	8009816 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2224      	movs	r2, #36	; 0x24
 80097c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f022 0201 	bic.w	r2, r2, #1
 80097e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	430a      	orrs	r2, r1
 80097f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f834 	bl	8009864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2220      	movs	r2, #32
 8009808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800981e:	b480      	push	{r7}
 8009820:	b085      	sub	sp, #20
 8009822:	af00      	add	r7, sp, #0
 8009824:	60f8      	str	r0, [r7, #12]
 8009826:	1d3b      	adds	r3, r7, #4
 8009828:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f023 0210 	bic.w	r2, r3, #16
 8009836:	893b      	ldrh	r3, [r7, #8]
 8009838:	4619      	mov	r1, r3
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	430a      	orrs	r2, r1
 8009840:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800984c:	7abb      	ldrb	r3, [r7, #10]
 800984e:	061a      	lsls	r2, r3, #24
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	430a      	orrs	r2, r1
 8009856:	605a      	str	r2, [r3, #4]
}
 8009858:	bf00      	nop
 800985a:	3714      	adds	r7, #20
 800985c:	46bd      	mov	sp, r7
 800985e:	bc80      	pop	{r7}
 8009860:	4770      	bx	lr
	...

08009864 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009870:	2b00      	cmp	r3, #0
 8009872:	d108      	bne.n	8009886 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009884:	e031      	b.n	80098ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009886:	2308      	movs	r3, #8
 8009888:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800988a:	2308      	movs	r3, #8
 800988c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	0e5b      	lsrs	r3, r3, #25
 8009896:	b2db      	uxtb	r3, r3
 8009898:	f003 0307 	and.w	r3, r3, #7
 800989c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	0f5b      	lsrs	r3, r3, #29
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	f003 0307 	and.w	r3, r3, #7
 80098ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098ae:	7bbb      	ldrb	r3, [r7, #14]
 80098b0:	7b3a      	ldrb	r2, [r7, #12]
 80098b2:	4910      	ldr	r1, [pc, #64]	; (80098f4 <UARTEx_SetNbDataToProcess+0x90>)
 80098b4:	5c8a      	ldrb	r2, [r1, r2]
 80098b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80098ba:	7b3a      	ldrb	r2, [r7, #12]
 80098bc:	490e      	ldr	r1, [pc, #56]	; (80098f8 <UARTEx_SetNbDataToProcess+0x94>)
 80098be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
 80098ce:	7b7a      	ldrb	r2, [r7, #13]
 80098d0:	4908      	ldr	r1, [pc, #32]	; (80098f4 <UARTEx_SetNbDataToProcess+0x90>)
 80098d2:	5c8a      	ldrb	r2, [r1, r2]
 80098d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80098d8:	7b7a      	ldrb	r2, [r7, #13]
 80098da:	4907      	ldr	r1, [pc, #28]	; (80098f8 <UARTEx_SetNbDataToProcess+0x94>)
 80098dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098de:	fb93 f3f2 	sdiv	r3, r3, r2
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80098ea:	bf00      	nop
 80098ec:	3714      	adds	r7, #20
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bc80      	pop	{r7}
 80098f2:	4770      	bx	lr
 80098f4:	08010c7c 	.word	0x08010c7c
 80098f8:	08010c84 	.word	0x08010c84

080098fc <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af02      	add	r7, sp, #8
 8009902:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8009904:	4a21      	ldr	r2, [pc, #132]	; (800998c <RadioInit+0x90>)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800990a:	4b21      	ldr	r3, [pc, #132]	; (8009990 <RadioInit+0x94>)
 800990c:	2200      	movs	r2, #0
 800990e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8009910:	4b1f      	ldr	r3, [pc, #124]	; (8009990 <RadioInit+0x94>)
 8009912:	2200      	movs	r2, #0
 8009914:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8009916:	4b1e      	ldr	r3, [pc, #120]	; (8009990 <RadioInit+0x94>)
 8009918:	2200      	movs	r2, #0
 800991a:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 800991c:	481d      	ldr	r0, [pc, #116]	; (8009994 <RadioInit+0x98>)
 800991e:	f001 feb7 	bl	800b690 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8009922:	2000      	movs	r0, #0
 8009924:	f001 f81e 	bl	800a964 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8009928:	f002 f948 	bl	800bbbc <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800992c:	2100      	movs	r1, #0
 800992e:	2000      	movs	r0, #0
 8009930:	f002 fca8 	bl	800c284 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8009934:	2204      	movs	r2, #4
 8009936:	2100      	movs	r1, #0
 8009938:	2001      	movs	r0, #1
 800993a:	f002 facd 	bl	800bed8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800993e:	2300      	movs	r3, #0
 8009940:	2200      	movs	r2, #0
 8009942:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009946:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800994a:	f002 f9fd 	bl	800bd48 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 800994e:	f000 fe9b 	bl	800a688 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8009952:	2300      	movs	r3, #0
 8009954:	9300      	str	r3, [sp, #0]
 8009956:	4b10      	ldr	r3, [pc, #64]	; (8009998 <RadioInit+0x9c>)
 8009958:	2200      	movs	r2, #0
 800995a:	f04f 31ff 	mov.w	r1, #4294967295
 800995e:	480f      	ldr	r0, [pc, #60]	; (800999c <RadioInit+0xa0>)
 8009960:	f003 fdc6 	bl	800d4f0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8009964:	2300      	movs	r3, #0
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	4b0d      	ldr	r3, [pc, #52]	; (80099a0 <RadioInit+0xa4>)
 800996a:	2200      	movs	r2, #0
 800996c:	f04f 31ff 	mov.w	r1, #4294967295
 8009970:	480c      	ldr	r0, [pc, #48]	; (80099a4 <RadioInit+0xa8>)
 8009972:	f003 fdbd 	bl	800d4f0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8009976:	4809      	ldr	r0, [pc, #36]	; (800999c <RadioInit+0xa0>)
 8009978:	f003 fe5e 	bl	800d638 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800997c:	4809      	ldr	r0, [pc, #36]	; (80099a4 <RadioInit+0xa8>)
 800997e:	f003 fe5b 	bl	800d638 <UTIL_TIMER_Stop>
}
 8009982:	bf00      	nop
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	20000550 	.word	0x20000550
 8009990:	20000554 	.word	0x20000554
 8009994:	0800aa49 	.word	0x0800aa49
 8009998:	0800a9d1 	.word	0x0800a9d1
 800999c:	200005ac 	.word	0x200005ac
 80099a0:	0800a9e5 	.word	0x0800a9e5
 80099a4:	200005c4 	.word	0x200005c4

080099a8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80099ac:	f001 feb2 	bl	800b714 <SUBGRF_GetOperatingMode>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b07      	cmp	r3, #7
 80099b4:	d00a      	beq.n	80099cc <RadioGetStatus+0x24>
 80099b6:	2b07      	cmp	r3, #7
 80099b8:	dc0a      	bgt.n	80099d0 <RadioGetStatus+0x28>
 80099ba:	2b04      	cmp	r3, #4
 80099bc:	d002      	beq.n	80099c4 <RadioGetStatus+0x1c>
 80099be:	2b05      	cmp	r3, #5
 80099c0:	d002      	beq.n	80099c8 <RadioGetStatus+0x20>
 80099c2:	e005      	b.n	80099d0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80099c4:	2302      	movs	r3, #2
 80099c6:	e004      	b.n	80099d2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e002      	b.n	80099d2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80099cc:	2303      	movs	r3, #3
 80099ce:	e000      	b.n	80099d2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80099d0:	2300      	movs	r3, #0
    }
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	bd80      	pop	{r7, pc}
	...

080099d8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80099e2:	4a25      	ldr	r2, [pc, #148]	; (8009a78 <RadioSetModem+0xa0>)
 80099e4:	79fb      	ldrb	r3, [r7, #7]
 80099e6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 80099e8:	79fb      	ldrb	r3, [r7, #7]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f003 f80d 	bl	800ca0a <RFW_SetRadioModem>
    switch( modem )
 80099f0:	79fb      	ldrb	r3, [r7, #7]
 80099f2:	3b01      	subs	r3, #1
 80099f4:	2b03      	cmp	r3, #3
 80099f6:	d80b      	bhi.n	8009a10 <RadioSetModem+0x38>
 80099f8:	a201      	add	r2, pc, #4	; (adr r2, 8009a00 <RadioSetModem+0x28>)
 80099fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fe:	bf00      	nop
 8009a00:	08009a1f 	.word	0x08009a1f
 8009a04:	08009a45 	.word	0x08009a45
 8009a08:	08009a53 	.word	0x08009a53
 8009a0c:	08009a61 	.word	0x08009a61
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8009a10:	2000      	movs	r0, #0
 8009a12:	f002 fa3b 	bl	800be8c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8009a16:	4b18      	ldr	r3, [pc, #96]	; (8009a78 <RadioSetModem+0xa0>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	735a      	strb	r2, [r3, #13]
        break;
 8009a1c:	e028      	b.n	8009a70 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8009a1e:	2001      	movs	r0, #1
 8009a20:	f002 fa34 	bl	800be8c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8009a24:	4b14      	ldr	r3, [pc, #80]	; (8009a78 <RadioSetModem+0xa0>)
 8009a26:	7b5a      	ldrb	r2, [r3, #13]
 8009a28:	4b13      	ldr	r3, [pc, #76]	; (8009a78 <RadioSetModem+0xa0>)
 8009a2a:	7b1b      	ldrb	r3, [r3, #12]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d01e      	beq.n	8009a6e <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8009a30:	4b11      	ldr	r3, [pc, #68]	; (8009a78 <RadioSetModem+0xa0>)
 8009a32:	7b1a      	ldrb	r2, [r3, #12]
 8009a34:	4b10      	ldr	r3, [pc, #64]	; (8009a78 <RadioSetModem+0xa0>)
 8009a36:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8009a38:	4b0f      	ldr	r3, [pc, #60]	; (8009a78 <RadioSetModem+0xa0>)
 8009a3a:	7b5b      	ldrb	r3, [r3, #13]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f000 ff91 	bl	800a964 <RadioSetPublicNetwork>
        }
        break;
 8009a42:	e014      	b.n	8009a6e <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8009a44:	2002      	movs	r0, #2
 8009a46:	f002 fa21 	bl	800be8c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8009a4a:	4b0b      	ldr	r3, [pc, #44]	; (8009a78 <RadioSetModem+0xa0>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	735a      	strb	r2, [r3, #13]
        break;
 8009a50:	e00e      	b.n	8009a70 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8009a52:	2002      	movs	r0, #2
 8009a54:	f002 fa1a 	bl	800be8c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8009a58:	4b07      	ldr	r3, [pc, #28]	; (8009a78 <RadioSetModem+0xa0>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	735a      	strb	r2, [r3, #13]
        break;
 8009a5e:	e007      	b.n	8009a70 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8009a60:	2000      	movs	r0, #0
 8009a62:	f002 fa13 	bl	800be8c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8009a66:	4b04      	ldr	r3, [pc, #16]	; (8009a78 <RadioSetModem+0xa0>)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	735a      	strb	r2, [r3, #13]
        break;
 8009a6c:	e000      	b.n	8009a70 <RadioSetModem+0x98>
        break;
 8009a6e:	bf00      	nop
    }
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	20000554 	.word	0x20000554

08009a7c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f002 f9bb 	bl	800be00 <SUBGRF_SetRfFrequency>
}
 8009a8a:	bf00      	nop
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b090      	sub	sp, #64	; 0x40
 8009a96:	af0a      	add	r7, sp, #40	; 0x28
 8009a98:	60f8      	str	r0, [r7, #12]
 8009a9a:	60b9      	str	r1, [r7, #8]
 8009a9c:	603b      	str	r3, [r7, #0]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8009aae:	f000 fdfe 	bl	800a6ae <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	f7ff ff90 	bl	80099d8 <RadioSetModem>

    RadioSetChannel( freq );
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f7ff ffdf 	bl	8009a7c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8009abe:	2301      	movs	r3, #1
 8009ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	9308      	str	r3, [sp, #32]
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	9307      	str	r3, [sp, #28]
 8009aca:	2300      	movs	r3, #0
 8009acc:	9306      	str	r3, [sp, #24]
 8009ace:	2300      	movs	r3, #0
 8009ad0:	9305      	str	r3, [sp, #20]
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	9304      	str	r3, [sp, #16]
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	9303      	str	r3, [sp, #12]
 8009ada:	2300      	movs	r3, #0
 8009adc:	9302      	str	r3, [sp, #8]
 8009ade:	2303      	movs	r3, #3
 8009ae0:	9301      	str	r3, [sp, #4]
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009aec:	68b9      	ldr	r1, [r7, #8]
 8009aee:	2000      	movs	r0, #0
 8009af0:	f000 f840 	bl	8009b74 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8009af4:	2000      	movs	r0, #0
 8009af6:	f000 fde1 	bl	800a6bc <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8009afa:	f000 ff61 	bl	800a9c0 <RadioGetWakeupTime>
 8009afe:	4603      	mov	r3, r0
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7f8 fa17 	bl	8001f34 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8009b06:	f003 feb1 	bl	800d86c <UTIL_TIMER_GetCurrentTime>
 8009b0a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8009b0c:	e00d      	b.n	8009b2a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8009b0e:	2000      	movs	r0, #0
 8009b10:	f000 fea6 	bl	800a860 <RadioRssi>
 8009b14:	4603      	mov	r3, r0
 8009b16:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8009b18:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8009b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	dd02      	ble.n	8009b2a <RadioIsChannelFree+0x98>
        {
            status = false;
 8009b24:	2300      	movs	r3, #0
 8009b26:	75fb      	strb	r3, [r7, #23]
            break;
 8009b28:	e006      	b.n	8009b38 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8009b2a:	6938      	ldr	r0, [r7, #16]
 8009b2c:	f003 feb0 	bl	800d890 <UTIL_TIMER_GetElapsedTime>
 8009b30:	4602      	mov	r2, r0
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d8ea      	bhi.n	8009b0e <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8009b38:	f000 fdb9 	bl	800a6ae <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 8009b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3718      	adds	r7, #24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b082      	sub	sp, #8
 8009b4a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8009b50:	2001      	movs	r0, #1
 8009b52:	f7ff ff41 	bl	80099d8 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8009b56:	2300      	movs	r3, #0
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	f002 f8f3 	bl	800bd48 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8009b62:	f001 fea8 	bl	800b8b6 <SUBGRF_GetRandom>
 8009b66:	6078      	str	r0, [r7, #4]

    return rnd;
 8009b68:	687b      	ldr	r3, [r7, #4]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
	...

08009b74 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b08a      	sub	sp, #40	; 0x28
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60b9      	str	r1, [r7, #8]
 8009b7c:	607a      	str	r2, [r7, #4]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	4603      	mov	r3, r0
 8009b82:	73fb      	strb	r3, [r7, #15]
 8009b84:	4613      	mov	r3, r2
 8009b86:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8009b88:	4abd      	ldr	r2, [pc, #756]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009b8a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8009b8e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8009b90:	f002 fef9 	bl	800c986 <RFW_DeInit>
    if( rxContinuous == true )
 8009b94:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d001      	beq.n	8009ba0 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8009ba0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d004      	beq.n	8009bb2 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8009ba8:	4ab6      	ldr	r2, [pc, #728]	; (8009e84 <RadioSetRxConfig+0x310>)
 8009baa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009bae:	7013      	strb	r3, [r2, #0]
 8009bb0:	e002      	b.n	8009bb8 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8009bb2:	4bb4      	ldr	r3, [pc, #720]	; (8009e84 <RadioSetRxConfig+0x310>)
 8009bb4:	22ff      	movs	r2, #255	; 0xff
 8009bb6:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
 8009bba:	2b04      	cmp	r3, #4
 8009bbc:	d009      	beq.n	8009bd2 <RadioSetRxConfig+0x5e>
 8009bbe:	2b04      	cmp	r3, #4
 8009bc0:	f300 81da 	bgt.w	8009f78 <RadioSetRxConfig+0x404>
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 80bf 	beq.w	8009d48 <RadioSetRxConfig+0x1d4>
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	f000 812c 	beq.w	8009e28 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8009bd0:	e1d2      	b.n	8009f78 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8009bd2:	2001      	movs	r0, #1
 8009bd4:	f001 ffb4 	bl	800bb40 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009bd8:	4ba9      	ldr	r3, [pc, #676]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8009be0:	4aa7      	ldr	r2, [pc, #668]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8009be6:	4ba6      	ldr	r3, [pc, #664]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009be8:	2209      	movs	r2, #9
 8009bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8009bee:	4ba4      	ldr	r3, [pc, #656]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009bf0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009bf4:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8009bf6:	68b8      	ldr	r0, [r7, #8]
 8009bf8:	f002 fdf8 	bl	800c7ec <SUBGRF_GetFskBandwidthRegValue>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	461a      	mov	r2, r3
 8009c00:	4b9f      	ldr	r3, [pc, #636]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009c06:	4b9e      	ldr	r3, [pc, #632]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009c08:	2200      	movs	r2, #0
 8009c0a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009c0c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009c0e:	00db      	lsls	r3, r3, #3
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	4b9b      	ldr	r3, [pc, #620]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009c14:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8009c16:	4b9a      	ldr	r3, [pc, #616]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009c18:	2200      	movs	r2, #0
 8009c1a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8009c1c:	4b98      	ldr	r3, [pc, #608]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009c1e:	2210      	movs	r2, #16
 8009c20:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8009c22:	4b97      	ldr	r3, [pc, #604]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8009c28:	4b95      	ldr	r3, [pc, #596]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8009c2e:	4b95      	ldr	r3, [pc, #596]	; (8009e84 <RadioSetRxConfig+0x310>)
 8009c30:	781a      	ldrb	r2, [r3, #0]
 8009c32:	4b93      	ldr	r3, [pc, #588]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009c34:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8009c36:	4b92      	ldr	r3, [pc, #584]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009c38:	2201      	movs	r2, #1
 8009c3a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8009c3c:	4b90      	ldr	r3, [pc, #576]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009c3e:	2200      	movs	r2, #0
 8009c40:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8009c42:	2004      	movs	r0, #4
 8009c44:	f7ff fec8 	bl	80099d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009c48:	488f      	ldr	r0, [pc, #572]	; (8009e88 <RadioSetRxConfig+0x314>)
 8009c4a:	f002 f9ab 	bl	800bfa4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009c4e:	488f      	ldr	r0, [pc, #572]	; (8009e8c <RadioSetRxConfig+0x318>)
 8009c50:	f002 fa7a 	bl	800c148 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8009c54:	4a8e      	ldr	r2, [pc, #568]	; (8009e90 <RadioSetRxConfig+0x31c>)
 8009c56:	f107 031c 	add.w	r3, r7, #28
 8009c5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c5e:	e883 0003 	stmia.w	r3, {r0, r1}
 8009c62:	f107 031c 	add.w	r3, r7, #28
 8009c66:	4618      	mov	r0, r3
 8009c68:	f001 fda3 	bl	800b7b2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009c6c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009c70:	f001 fdee 	bl	800b850 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8009c74:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8009c78:	f000 fe11 	bl	800a89e <RadioRead>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8009c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c86:	f023 0310 	bic.w	r3, r3, #16
 8009c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8009c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c92:	4619      	mov	r1, r3
 8009c94:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8009c98:	f000 fdef 	bl	800a87a <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8009c9c:	2104      	movs	r1, #4
 8009c9e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8009ca2:	f000 fdea 	bl	800a87a <RadioWrite>
            modReg= RadioRead(0x89b);
 8009ca6:	f640 009b 	movw	r0, #2203	; 0x89b
 8009caa:	f000 fdf8 	bl	800a89e <RadioRead>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8009cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cb8:	f023 031c 	bic.w	r3, r3, #28
 8009cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8009cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cc4:	f043 0308 	orr.w	r3, r3, #8
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	4619      	mov	r1, r3
 8009ccc:	f640 009b 	movw	r0, #2203	; 0x89b
 8009cd0:	f000 fdd3 	bl	800a87a <RadioWrite>
            modReg= RadioRead(0x6d1);
 8009cd4:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8009cd8:	f000 fde1 	bl	800a89e <RadioRead>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8009ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ce6:	f023 0318 	bic.w	r3, r3, #24
 8009cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8009cee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cf2:	f043 0318 	orr.w	r3, r3, #24
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8009cfe:	f000 fdbc 	bl	800a87a <RadioWrite>
            modReg= RadioRead(0x6ac);
 8009d02:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8009d06:	f000 fdca 	bl	800a89e <RadioRead>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8009d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8009d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d20:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	4619      	mov	r1, r3
 8009d28:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8009d2c:	f000 fda5 	bl	800a87a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8009d30:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009d32:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009d36:	fb02 f303 	mul.w	r3, r2, r3
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d42:	4a4f      	ldr	r2, [pc, #316]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009d44:	6093      	str	r3, [r2, #8]
            break;
 8009d46:	e118      	b.n	8009f7a <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8009d48:	2000      	movs	r0, #0
 8009d4a:	f001 fef9 	bl	800bb40 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009d4e:	4b4c      	ldr	r3, [pc, #304]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8009d56:	4a4a      	ldr	r2, [pc, #296]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8009d5c:	4b48      	ldr	r3, [pc, #288]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009d5e:	220b      	movs	r2, #11
 8009d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8009d64:	68b8      	ldr	r0, [r7, #8]
 8009d66:	f002 fd41 	bl	800c7ec <SUBGRF_GetFskBandwidthRegValue>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	4b44      	ldr	r3, [pc, #272]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009d74:	4b42      	ldr	r3, [pc, #264]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009d7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009d7c:	00db      	lsls	r3, r3, #3
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	4b3f      	ldr	r3, [pc, #252]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009d82:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8009d84:	4b3e      	ldr	r3, [pc, #248]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009d86:	2204      	movs	r2, #4
 8009d88:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8009d8a:	4b3d      	ldr	r3, [pc, #244]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009d8c:	2218      	movs	r2, #24
 8009d8e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8009d90:	4b3b      	ldr	r3, [pc, #236]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8009d96:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009d9a:	f083 0301 	eor.w	r3, r3, #1
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	461a      	mov	r2, r3
 8009da2:	4b37      	ldr	r3, [pc, #220]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009da4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8009da6:	4b37      	ldr	r3, [pc, #220]	; (8009e84 <RadioSetRxConfig+0x310>)
 8009da8:	781a      	ldrb	r2, [r3, #0]
 8009daa:	4b35      	ldr	r3, [pc, #212]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009dac:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8009dae:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d003      	beq.n	8009dbe <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8009db6:	4b32      	ldr	r3, [pc, #200]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009db8:	22f2      	movs	r2, #242	; 0xf2
 8009dba:	75da      	strb	r2, [r3, #23]
 8009dbc:	e002      	b.n	8009dc4 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8009dbe:	4b30      	ldr	r3, [pc, #192]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8009dc4:	4b2e      	ldr	r3, [pc, #184]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8009dca:	f000 fc70 	bl	800a6ae <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8009dce:	4b2c      	ldr	r3, [pc, #176]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009dd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	bf14      	ite	ne
 8009dd8:	2301      	movne	r3, #1
 8009dda:	2300      	moveq	r3, #0
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7ff fdfa 	bl	80099d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009de4:	4828      	ldr	r0, [pc, #160]	; (8009e88 <RadioSetRxConfig+0x314>)
 8009de6:	f002 f8dd 	bl	800bfa4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009dea:	4828      	ldr	r0, [pc, #160]	; (8009e8c <RadioSetRxConfig+0x318>)
 8009dec:	f002 f9ac 	bl	800c148 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8009df0:	4a28      	ldr	r2, [pc, #160]	; (8009e94 <RadioSetRxConfig+0x320>)
 8009df2:	f107 0314 	add.w	r3, r7, #20
 8009df6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009dfa:	e883 0003 	stmia.w	r3, {r0, r1}
 8009dfe:	f107 0314 	add.w	r3, r7, #20
 8009e02:	4618      	mov	r0, r3
 8009e04:	f001 fcd5 	bl	800b7b2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009e08:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009e0c:	f001 fd20 	bl	800b850 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8009e10:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e12:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009e16:	fb02 f303 	mul.w	r3, r2, r3
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e22:	4a17      	ldr	r2, [pc, #92]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009e24:	6093      	str	r3, [r2, #8]
            break;
 8009e26:	e0a8      	b.n	8009f7a <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8009e28:	2000      	movs	r0, #0
 8009e2a:	f001 fe89 	bl	800bb40 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009e2e:	4b14      	ldr	r3, [pc, #80]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009e30:	2201      	movs	r2, #1
 8009e32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	b2da      	uxtb	r2, r3
 8009e3a:	4b11      	ldr	r3, [pc, #68]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8009e40:	4a15      	ldr	r2, [pc, #84]	; (8009e98 <RadioSetRxConfig+0x324>)
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	4413      	add	r3, r2
 8009e46:	781a      	ldrb	r2, [r3, #0]
 8009e48:	4b0d      	ldr	r3, [pc, #52]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8009e4e:	4a0c      	ldr	r2, [pc, #48]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009e50:	7bbb      	ldrb	r3, [r7, #14]
 8009e52:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d105      	bne.n	8009e68 <RadioSetRxConfig+0x2f4>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b0b      	cmp	r3, #11
 8009e60:	d008      	beq.n	8009e74 <RadioSetRxConfig+0x300>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b0c      	cmp	r3, #12
 8009e66:	d005      	beq.n	8009e74 <RadioSetRxConfig+0x300>
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d116      	bne.n	8009e9c <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2b0c      	cmp	r3, #12
 8009e72:	d113      	bne.n	8009e9c <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8009e74:	4b02      	ldr	r3, [pc, #8]	; (8009e80 <RadioSetRxConfig+0x30c>)
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8009e7c:	e012      	b.n	8009ea4 <RadioSetRxConfig+0x330>
 8009e7e:	bf00      	nop
 8009e80:	20000554 	.word	0x20000554
 8009e84:	20000010 	.word	0x20000010
 8009e88:	2000058c 	.word	0x2000058c
 8009e8c:	20000562 	.word	0x20000562
 8009e90:	08010a74 	.word	0x08010a74
 8009e94:	08010a7c 	.word	0x08010a7c
 8009e98:	08010d10 	.word	0x08010d10
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8009e9c:	4b39      	ldr	r3, [pc, #228]	; (8009f84 <RadioSetRxConfig+0x410>)
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009ea4:	4b37      	ldr	r3, [pc, #220]	; (8009f84 <RadioSetRxConfig+0x410>)
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009eaa:	4b36      	ldr	r3, [pc, #216]	; (8009f84 <RadioSetRxConfig+0x410>)
 8009eac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009eb0:	2b05      	cmp	r3, #5
 8009eb2:	d004      	beq.n	8009ebe <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8009eb4:	4b33      	ldr	r3, [pc, #204]	; (8009f84 <RadioSetRxConfig+0x410>)
 8009eb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009eba:	2b06      	cmp	r3, #6
 8009ebc:	d10a      	bne.n	8009ed4 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8009ebe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009ec0:	2b0b      	cmp	r3, #11
 8009ec2:	d803      	bhi.n	8009ecc <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8009ec4:	4b2f      	ldr	r3, [pc, #188]	; (8009f84 <RadioSetRxConfig+0x410>)
 8009ec6:	220c      	movs	r2, #12
 8009ec8:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8009eca:	e006      	b.n	8009eda <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009ecc:	4a2d      	ldr	r2, [pc, #180]	; (8009f84 <RadioSetRxConfig+0x410>)
 8009ece:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009ed0:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8009ed2:	e002      	b.n	8009eda <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009ed4:	4a2b      	ldr	r2, [pc, #172]	; (8009f84 <RadioSetRxConfig+0x410>)
 8009ed6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009ed8:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8009eda:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8009ede:	4b29      	ldr	r3, [pc, #164]	; (8009f84 <RadioSetRxConfig+0x410>)
 8009ee0:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009ee2:	4b29      	ldr	r3, [pc, #164]	; (8009f88 <RadioSetRxConfig+0x414>)
 8009ee4:	781a      	ldrb	r2, [r3, #0]
 8009ee6:	4b27      	ldr	r3, [pc, #156]	; (8009f84 <RadioSetRxConfig+0x410>)
 8009ee8:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8009eea:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8009eee:	4b25      	ldr	r3, [pc, #148]	; (8009f84 <RadioSetRxConfig+0x410>)
 8009ef0:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8009ef4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8009ef8:	4b22      	ldr	r3, [pc, #136]	; (8009f84 <RadioSetRxConfig+0x410>)
 8009efa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8009efe:	f000 fbd6 	bl	800a6ae <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8009f02:	4b20      	ldr	r3, [pc, #128]	; (8009f84 <RadioSetRxConfig+0x410>)
 8009f04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	bf14      	ite	ne
 8009f0c:	2301      	movne	r3, #1
 8009f0e:	2300      	moveq	r3, #0
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7ff fd60 	bl	80099d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009f18:	481c      	ldr	r0, [pc, #112]	; (8009f8c <RadioSetRxConfig+0x418>)
 8009f1a:	f002 f843 	bl	800bfa4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009f1e:	481c      	ldr	r0, [pc, #112]	; (8009f90 <RadioSetRxConfig+0x41c>)
 8009f20:	f002 f912 	bl	800c148 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8009f24:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f001 fe18 	bl	800bb5e <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8009f2e:	4b15      	ldr	r3, [pc, #84]	; (8009f84 <RadioSetRxConfig+0x410>)
 8009f30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d10d      	bne.n	8009f54 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8009f38:	f240 7036 	movw	r0, #1846	; 0x736
 8009f3c:	f002 fa60 	bl	800c400 <SUBGRF_ReadRegister>
 8009f40:	4603      	mov	r3, r0
 8009f42:	f023 0304 	bic.w	r3, r3, #4
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	4619      	mov	r1, r3
 8009f4a:	f240 7036 	movw	r0, #1846	; 0x736
 8009f4e:	f002 fa43 	bl	800c3d8 <SUBGRF_WriteRegister>
 8009f52:	e00c      	b.n	8009f6e <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8009f54:	f240 7036 	movw	r0, #1846	; 0x736
 8009f58:	f002 fa52 	bl	800c400 <SUBGRF_ReadRegister>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	f043 0304 	orr.w	r3, r3, #4
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	4619      	mov	r1, r3
 8009f66:	f240 7036 	movw	r0, #1846	; 0x736
 8009f6a:	f002 fa35 	bl	800c3d8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8009f6e:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <RadioSetRxConfig+0x410>)
 8009f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f74:	609a      	str	r2, [r3, #8]
            break;
 8009f76:	e000      	b.n	8009f7a <RadioSetRxConfig+0x406>
            break;
 8009f78:	bf00      	nop
    }
}
 8009f7a:	bf00      	nop
 8009f7c:	3728      	adds	r7, #40	; 0x28
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	20000554 	.word	0x20000554
 8009f88:	20000010 	.word	0x20000010
 8009f8c:	2000058c 	.word	0x2000058c
 8009f90:	20000562 	.word	0x20000562

08009f94 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60ba      	str	r2, [r7, #8]
 8009f9c:	607b      	str	r3, [r7, #4]
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	73fb      	strb	r3, [r7, #15]
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8009fa6:	f002 fcee 	bl	800c986 <RFW_DeInit>
    switch( modem )
 8009faa:	7bfb      	ldrb	r3, [r7, #15]
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	f000 80d7 	beq.w	800a160 <RadioSetTxConfig+0x1cc>
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	f300 80e6 	bgt.w	800a184 <RadioSetTxConfig+0x1f0>
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d002      	beq.n	8009fc2 <RadioSetTxConfig+0x2e>
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d061      	beq.n	800a084 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8009fc0:	e0e0      	b.n	800a184 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009fc2:	4b7c      	ldr	r3, [pc, #496]	; (800a1b4 <RadioSetTxConfig+0x220>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8009fca:	4a7a      	ldr	r2, [pc, #488]	; (800a1b4 <RadioSetTxConfig+0x220>)
 8009fcc:	6a3b      	ldr	r3, [r7, #32]
 8009fce:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8009fd0:	4b78      	ldr	r3, [pc, #480]	; (800a1b4 <RadioSetTxConfig+0x220>)
 8009fd2:	220b      	movs	r2, #11
 8009fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f002 fc07 	bl	800c7ec <SUBGRF_GetFskBandwidthRegValue>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	4b74      	ldr	r3, [pc, #464]	; (800a1b4 <RadioSetTxConfig+0x220>)
 8009fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8009fe8:	4a72      	ldr	r2, [pc, #456]	; (800a1b4 <RadioSetTxConfig+0x220>)
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009fee:	4b71      	ldr	r3, [pc, #452]	; (800a1b4 <RadioSetTxConfig+0x220>)
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009ff4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ff6:	00db      	lsls	r3, r3, #3
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	4b6e      	ldr	r3, [pc, #440]	; (800a1b4 <RadioSetTxConfig+0x220>)
 8009ffc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8009ffe:	4b6d      	ldr	r3, [pc, #436]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a000:	2204      	movs	r2, #4
 800a002:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800a004:	4b6b      	ldr	r3, [pc, #428]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a006:	2218      	movs	r2, #24
 800a008:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800a00a:	4b6a      	ldr	r3, [pc, #424]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800a010:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a014:	f083 0301 	eor.w	r3, r3, #1
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	461a      	mov	r2, r3
 800a01c:	4b65      	ldr	r3, [pc, #404]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a01e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 800a020:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a024:	2b00      	cmp	r3, #0
 800a026:	d003      	beq.n	800a030 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800a028:	4b62      	ldr	r3, [pc, #392]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a02a:	22f2      	movs	r2, #242	; 0xf2
 800a02c:	75da      	strb	r2, [r3, #23]
 800a02e:	e002      	b.n	800a036 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800a030:	4b60      	ldr	r3, [pc, #384]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a032:	2201      	movs	r2, #1
 800a034:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800a036:	4b5f      	ldr	r3, [pc, #380]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a038:	2201      	movs	r2, #1
 800a03a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800a03c:	f000 fb37 	bl	800a6ae <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800a040:	4b5c      	ldr	r3, [pc, #368]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a042:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a046:	2b00      	cmp	r3, #0
 800a048:	bf14      	ite	ne
 800a04a:	2301      	movne	r3, #1
 800a04c:	2300      	moveq	r3, #0
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	4618      	mov	r0, r3
 800a052:	f7ff fcc1 	bl	80099d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a056:	4858      	ldr	r0, [pc, #352]	; (800a1b8 <RadioSetTxConfig+0x224>)
 800a058:	f001 ffa4 	bl	800bfa4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a05c:	4857      	ldr	r0, [pc, #348]	; (800a1bc <RadioSetTxConfig+0x228>)
 800a05e:	f002 f873 	bl	800c148 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800a062:	4a57      	ldr	r2, [pc, #348]	; (800a1c0 <RadioSetTxConfig+0x22c>)
 800a064:	f107 0310 	add.w	r3, r7, #16
 800a068:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a06c:	e883 0003 	stmia.w	r3, {r0, r1}
 800a070:	f107 0310 	add.w	r3, r7, #16
 800a074:	4618      	mov	r0, r3
 800a076:	f001 fb9c 	bl	800b7b2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800a07a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a07e:	f001 fbe7 	bl	800b850 <SUBGRF_SetWhiteningSeed>
            break;
 800a082:	e080      	b.n	800a186 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a084:	4b4b      	ldr	r3, [pc, #300]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a086:	2201      	movs	r2, #1
 800a088:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	b2da      	uxtb	r2, r3
 800a090:	4b48      	ldr	r3, [pc, #288]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800a096:	4a4b      	ldr	r2, [pc, #300]	; (800a1c4 <RadioSetTxConfig+0x230>)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4413      	add	r3, r2
 800a09c:	781a      	ldrb	r2, [r3, #0]
 800a09e:	4b45      	ldr	r3, [pc, #276]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a0a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800a0a4:	4a43      	ldr	r2, [pc, #268]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a0a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a0aa:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d105      	bne.n	800a0c0 <RadioSetTxConfig+0x12c>
 800a0b4:	6a3b      	ldr	r3, [r7, #32]
 800a0b6:	2b0b      	cmp	r3, #11
 800a0b8:	d008      	beq.n	800a0cc <RadioSetTxConfig+0x138>
 800a0ba:	6a3b      	ldr	r3, [r7, #32]
 800a0bc:	2b0c      	cmp	r3, #12
 800a0be:	d005      	beq.n	800a0cc <RadioSetTxConfig+0x138>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d107      	bne.n	800a0d6 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800a0c6:	6a3b      	ldr	r3, [r7, #32]
 800a0c8:	2b0c      	cmp	r3, #12
 800a0ca:	d104      	bne.n	800a0d6 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800a0cc:	4b39      	ldr	r3, [pc, #228]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800a0d4:	e003      	b.n	800a0de <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800a0d6:	4b37      	ldr	r3, [pc, #220]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a0de:	4b35      	ldr	r3, [pc, #212]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800a0e4:	4b33      	ldr	r3, [pc, #204]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a0e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a0ea:	2b05      	cmp	r3, #5
 800a0ec:	d004      	beq.n	800a0f8 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800a0ee:	4b31      	ldr	r3, [pc, #196]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a0f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800a0f4:	2b06      	cmp	r3, #6
 800a0f6:	d10a      	bne.n	800a10e <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 800a0f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a0fa:	2b0b      	cmp	r3, #11
 800a0fc:	d803      	bhi.n	800a106 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800a0fe:	4b2d      	ldr	r3, [pc, #180]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a100:	220c      	movs	r2, #12
 800a102:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800a104:	e006      	b.n	800a114 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800a106:	4a2b      	ldr	r2, [pc, #172]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a108:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a10a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800a10c:	e002      	b.n	800a114 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800a10e:	4a29      	ldr	r2, [pc, #164]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a110:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a112:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800a114:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800a118:	4b26      	ldr	r3, [pc, #152]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a11a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800a11c:	4b2a      	ldr	r3, [pc, #168]	; (800a1c8 <RadioSetTxConfig+0x234>)
 800a11e:	781a      	ldrb	r2, [r3, #0]
 800a120:	4b24      	ldr	r3, [pc, #144]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a122:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800a124:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800a128:	4b22      	ldr	r3, [pc, #136]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a12a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800a12e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800a132:	4b20      	ldr	r3, [pc, #128]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800a138:	f000 fab9 	bl	800a6ae <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800a13c:	4b1d      	ldr	r3, [pc, #116]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a13e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a142:	2b00      	cmp	r3, #0
 800a144:	bf14      	ite	ne
 800a146:	2301      	movne	r3, #1
 800a148:	2300      	moveq	r3, #0
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7ff fc43 	bl	80099d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a152:	4819      	ldr	r0, [pc, #100]	; (800a1b8 <RadioSetTxConfig+0x224>)
 800a154:	f001 ff26 	bl	800bfa4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a158:	4818      	ldr	r0, [pc, #96]	; (800a1bc <RadioSetTxConfig+0x228>)
 800a15a:	f001 fff5 	bl	800c148 <SUBGRF_SetPacketParams>
            break;
 800a15e:	e012      	b.n	800a186 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800a160:	2003      	movs	r0, #3
 800a162:	f7ff fc39 	bl	80099d8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800a166:	4b13      	ldr	r3, [pc, #76]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a168:	2202      	movs	r2, #2
 800a16a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800a16e:	4a11      	ldr	r2, [pc, #68]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a170:	6a3b      	ldr	r3, [r7, #32]
 800a172:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800a174:	4b0f      	ldr	r3, [pc, #60]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a176:	2216      	movs	r2, #22
 800a178:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a17c:	480e      	ldr	r0, [pc, #56]	; (800a1b8 <RadioSetTxConfig+0x224>)
 800a17e:	f001 ff11 	bl	800bfa4 <SUBGRF_SetModulationParams>
            break;
 800a182:	e000      	b.n	800a186 <RadioSetTxConfig+0x1f2>
            break;
 800a184:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800a186:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f002 fa40 	bl	800c610 <SUBGRF_SetRfTxPower>
 800a190:	4603      	mov	r3, r0
 800a192:	461a      	mov	r2, r3
 800a194:	4b07      	ldr	r3, [pc, #28]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a196:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800a19a:	4b06      	ldr	r3, [pc, #24]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a19c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f002 fc04 	bl	800c9ae <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800a1a6:	4a03      	ldr	r2, [pc, #12]	; (800a1b4 <RadioSetTxConfig+0x220>)
 800a1a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1aa:	6053      	str	r3, [r2, #4]
}
 800a1ac:	bf00      	nop
 800a1ae:	3718      	adds	r7, #24
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	20000554 	.word	0x20000554
 800a1b8:	2000058c 	.word	0x2000058c
 800a1bc:	20000562 	.word	0x20000562
 800a1c0:	08010a7c 	.word	0x08010a7c
 800a1c4:	08010d10 	.word	0x08010d10
 800a1c8:	20000010 	.word	0x20000010

0800a1cc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
    return true;
 800a1d4:	2301      	movs	r3, #1
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	370c      	adds	r7, #12
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bc80      	pop	{r7}
 800a1de:	4770      	bx	lr

0800a1e0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800a1ee:	79fb      	ldrb	r3, [r7, #7]
 800a1f0:	2b0a      	cmp	r3, #10
 800a1f2:	d83e      	bhi.n	800a272 <RadioGetLoRaBandwidthInHz+0x92>
 800a1f4:	a201      	add	r2, pc, #4	; (adr r2, 800a1fc <RadioGetLoRaBandwidthInHz+0x1c>)
 800a1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fa:	bf00      	nop
 800a1fc:	0800a229 	.word	0x0800a229
 800a200:	0800a239 	.word	0x0800a239
 800a204:	0800a249 	.word	0x0800a249
 800a208:	0800a259 	.word	0x0800a259
 800a20c:	0800a261 	.word	0x0800a261
 800a210:	0800a267 	.word	0x0800a267
 800a214:	0800a26d 	.word	0x0800a26d
 800a218:	0800a273 	.word	0x0800a273
 800a21c:	0800a231 	.word	0x0800a231
 800a220:	0800a241 	.word	0x0800a241
 800a224:	0800a251 	.word	0x0800a251
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 800a228:	f641 6384 	movw	r3, #7812	; 0x1e84
 800a22c:	60fb      	str	r3, [r7, #12]
        break;
 800a22e:	e020      	b.n	800a272 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800a230:	f642 03b1 	movw	r3, #10417	; 0x28b1
 800a234:	60fb      	str	r3, [r7, #12]
        break;
 800a236:	e01c      	b.n	800a272 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800a238:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a23c:	60fb      	str	r3, [r7, #12]
        break;
 800a23e:	e018      	b.n	800a272 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800a240:	f245 1361 	movw	r3, #20833	; 0x5161
 800a244:	60fb      	str	r3, [r7, #12]
        break;
 800a246:	e014      	b.n	800a272 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800a248:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a24c:	60fb      	str	r3, [r7, #12]
        break;
 800a24e:	e010      	b.n	800a272 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800a250:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 800a254:	60fb      	str	r3, [r7, #12]
        break;
 800a256:	e00c      	b.n	800a272 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800a258:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a25c:	60fb      	str	r3, [r7, #12]
        break;
 800a25e:	e008      	b.n	800a272 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800a260:	4b07      	ldr	r3, [pc, #28]	; (800a280 <RadioGetLoRaBandwidthInHz+0xa0>)
 800a262:	60fb      	str	r3, [r7, #12]
        break;
 800a264:	e005      	b.n	800a272 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800a266:	4b07      	ldr	r3, [pc, #28]	; (800a284 <RadioGetLoRaBandwidthInHz+0xa4>)
 800a268:	60fb      	str	r3, [r7, #12]
        break;
 800a26a:	e002      	b.n	800a272 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800a26c:	4b06      	ldr	r3, [pc, #24]	; (800a288 <RadioGetLoRaBandwidthInHz+0xa8>)
 800a26e:	60fb      	str	r3, [r7, #12]
        break;
 800a270:	bf00      	nop
    }

    return bandwidthInHz;
 800a272:	68fb      	ldr	r3, [r7, #12]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3714      	adds	r7, #20
 800a278:	46bd      	mov	sp, r7
 800a27a:	bc80      	pop	{r7}
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	0001e848 	.word	0x0001e848
 800a284:	0003d090 	.word	0x0003d090
 800a288:	0007a120 	.word	0x0007a120

0800a28c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	4608      	mov	r0, r1
 800a296:	4611      	mov	r1, r2
 800a298:	461a      	mov	r2, r3
 800a29a:	4603      	mov	r3, r0
 800a29c:	70fb      	strb	r3, [r7, #3]
 800a29e:	460b      	mov	r3, r1
 800a2a0:	803b      	strh	r3, [r7, #0]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800a2a6:	883b      	ldrh	r3, [r7, #0]
 800a2a8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800a2aa:	78ba      	ldrb	r2, [r7, #2]
 800a2ac:	f082 0201 	eor.w	r2, r2, #1
 800a2b0:	b2d2      	uxtb	r2, r2
 800a2b2:	2a00      	cmp	r2, #0
 800a2b4:	d001      	beq.n	800a2ba <RadioGetGfskTimeOnAirNumerator+0x2e>
 800a2b6:	2208      	movs	r2, #8
 800a2b8:	e000      	b.n	800a2bc <RadioGetGfskTimeOnAirNumerator+0x30>
 800a2ba:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 800a2bc:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800a2be:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800a2c2:	7c3b      	ldrb	r3, [r7, #16]
 800a2c4:	7d39      	ldrb	r1, [r7, #20]
 800a2c6:	2900      	cmp	r1, #0
 800a2c8:	d001      	beq.n	800a2ce <RadioGetGfskTimeOnAirNumerator+0x42>
 800a2ca:	2102      	movs	r1, #2
 800a2cc:	e000      	b.n	800a2d0 <RadioGetGfskTimeOnAirNumerator+0x44>
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	440b      	add	r3, r1
 800a2d2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800a2d4:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bc80      	pop	{r7}
 800a2de:	4770      	bx	lr

0800a2e0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b08b      	sub	sp, #44	; 0x2c
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	71fb      	strb	r3, [r7, #7]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800a2f6:	79fb      	ldrb	r3, [r7, #7]
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	2b05      	cmp	r3, #5
 800a306:	d002      	beq.n	800a30e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	2b06      	cmp	r3, #6
 800a30c:	d104      	bne.n	800a318 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800a30e:	88bb      	ldrh	r3, [r7, #4]
 800a310:	2b0b      	cmp	r3, #11
 800a312:	d801      	bhi.n	800a318 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 800a314:	230c      	movs	r3, #12
 800a316:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d105      	bne.n	800a32a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	2b0b      	cmp	r3, #11
 800a322:	d008      	beq.n	800a336 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	2b0c      	cmp	r3, #12
 800a328:	d005      	beq.n	800a336 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d105      	bne.n	800a33c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	2b0c      	cmp	r3, #12
 800a334:	d102      	bne.n	800a33c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 800a336:	2301      	movs	r3, #1
 800a338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800a33c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a340:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800a342:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a346:	2a00      	cmp	r2, #0
 800a348:	d001      	beq.n	800a34e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800a34a:	2210      	movs	r2, #16
 800a34c:	e000      	b.n	800a350 <RadioGetLoRaTimeOnAirNumerator+0x70>
 800a34e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800a350:	4413      	add	r3, r2
 800a352:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 800a358:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800a35a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800a35e:	2a00      	cmp	r2, #0
 800a360:	d001      	beq.n	800a366 <RadioGetLoRaTimeOnAirNumerator+0x86>
 800a362:	2200      	movs	r2, #0
 800a364:	e000      	b.n	800a368 <RadioGetLoRaTimeOnAirNumerator+0x88>
 800a366:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 800a368:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800a36a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	2b06      	cmp	r3, #6
 800a370:	d803      	bhi.n	800a37a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	623b      	str	r3, [r7, #32]
 800a378:	e00e      	b.n	800a398 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	3308      	adds	r3, #8
 800a37e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800a380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a384:	2b00      	cmp	r3, #0
 800a386:	d004      	beq.n	800a392 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	3b02      	subs	r3, #2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	623b      	str	r3, [r7, #32]
 800a390:	e002      	b.n	800a398 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	da01      	bge.n	800a3a2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800a3a2:	69fa      	ldr	r2, [r7, #28]
 800a3a4:	6a3b      	ldr	r3, [r7, #32]
 800a3a6:	4413      	add	r3, r2
 800a3a8:	1e5a      	subs	r2, r3, #1
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	fb92 f3f3 	sdiv	r3, r2, r3
 800a3b0:	697a      	ldr	r2, [r7, #20]
 800a3b2:	fb03 f202 	mul.w	r2, r3, r2
 800a3b6:	88bb      	ldrh	r3, [r7, #4]
 800a3b8:	4413      	add	r3, r2
    int32_t intermediate =
 800a3ba:	330c      	adds	r3, #12
 800a3bc:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	2b06      	cmp	r3, #6
 800a3c2:	d802      	bhi.n	800a3ca <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	3302      	adds	r3, #2
 800a3c8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	1c5a      	adds	r2, r3, #1
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	3b02      	subs	r3, #2
 800a3d4:	fa02 f303 	lsl.w	r3, r2, r3
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	372c      	adds	r7, #44	; 0x2c
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bc80      	pop	{r7}
 800a3e0:	4770      	bx	lr
	...

0800a3e4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08a      	sub	sp, #40	; 0x28
 800a3e8:	af04      	add	r7, sp, #16
 800a3ea:	60b9      	str	r1, [r7, #8]
 800a3ec:	607a      	str	r2, [r7, #4]
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	73fb      	strb	r3, [r7, #15]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	613b      	str	r3, [r7, #16]

    switch( modem )
 800a400:	7bfb      	ldrb	r3, [r7, #15]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d002      	beq.n	800a40c <RadioTimeOnAir+0x28>
 800a406:	2b01      	cmp	r3, #1
 800a408:	d017      	beq.n	800a43a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800a40a:	e035      	b.n	800a478 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800a40c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800a410:	8c3a      	ldrh	r2, [r7, #32]
 800a412:	7bb9      	ldrb	r1, [r7, #14]
 800a414:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a418:	9301      	str	r3, [sp, #4]
 800a41a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	4603      	mov	r3, r0
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7ff ff32 	bl	800a28c <RadioGetGfskTimeOnAirNumerator>
 800a428:	4603      	mov	r3, r0
 800a42a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a42e:	fb02 f303 	mul.w	r3, r2, r3
 800a432:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	613b      	str	r3, [r7, #16]
        break;
 800a438:	e01e      	b.n	800a478 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800a43a:	8c39      	ldrh	r1, [r7, #32]
 800a43c:	7bba      	ldrb	r2, [r7, #14]
 800a43e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a442:	9302      	str	r3, [sp, #8]
 800a444:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a448:	9301      	str	r3, [sp, #4]
 800a44a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	460b      	mov	r3, r1
 800a452:	6879      	ldr	r1, [r7, #4]
 800a454:	68b8      	ldr	r0, [r7, #8]
 800a456:	f7ff ff43 	bl	800a2e0 <RadioGetLoRaTimeOnAirNumerator>
 800a45a:	4603      	mov	r3, r0
 800a45c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a460:	fb02 f303 	mul.w	r3, r2, r3
 800a464:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800a466:	4a0a      	ldr	r2, [pc, #40]	; (800a490 <RadioTimeOnAir+0xac>)
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	4413      	add	r3, r2
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	4618      	mov	r0, r3
 800a470:	f7ff feb6 	bl	800a1e0 <RadioGetLoRaBandwidthInHz>
 800a474:	6138      	str	r0, [r7, #16]
        break;
 800a476:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	4413      	add	r3, r2
 800a47e:	1e5a      	subs	r2, r3, #1
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800a486:	4618      	mov	r0, r3
 800a488:	3718      	adds	r7, #24
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	08010d10 	.word	0x08010d10

0800a494 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	460b      	mov	r3, r1
 800a49e:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f240 2101 	movw	r1, #513	; 0x201
 800a4a8:	f240 2001 	movw	r0, #513	; 0x201
 800a4ac:	f001 fc4c 	bl	800bd48 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    //DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 800a4b0:	4b70      	ldr	r3, [pc, #448]	; (800a674 <RadioSend+0x1e0>)
 800a4b2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a4b6:	2101      	movs	r1, #1
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f002 f881 	bl	800c5c0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 800a4be:	4b6d      	ldr	r3, [pc, #436]	; (800a674 <RadioSend+0x1e0>)
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d112      	bne.n	800a4ec <RadioSend+0x58>
 800a4c6:	4b6b      	ldr	r3, [pc, #428]	; (800a674 <RadioSend+0x1e0>)
 800a4c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a4cc:	2b06      	cmp	r3, #6
 800a4ce:	d10d      	bne.n	800a4ec <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800a4d0:	f640 0089 	movw	r0, #2185	; 0x889
 800a4d4:	f001 ff94 	bl	800c400 <SUBGRF_ReadRegister>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	f023 0304 	bic.w	r3, r3, #4
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	f640 0089 	movw	r0, #2185	; 0x889
 800a4e6:	f001 ff77 	bl	800c3d8 <SUBGRF_WriteRegister>
 800a4ea:	e00c      	b.n	800a506 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800a4ec:	f640 0089 	movw	r0, #2185	; 0x889
 800a4f0:	f001 ff86 	bl	800c400 <SUBGRF_ReadRegister>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	f043 0304 	orr.w	r3, r3, #4
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	f640 0089 	movw	r0, #2185	; 0x889
 800a502:	f001 ff69 	bl	800c3d8 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 800a506:	4b5b      	ldr	r3, [pc, #364]	; (800a674 <RadioSend+0x1e0>)
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	2b03      	cmp	r3, #3
 800a50c:	f200 80a5 	bhi.w	800a65a <RadioSend+0x1c6>
 800a510:	a201      	add	r2, pc, #4	; (adr r2, 800a518 <RadioSend+0x84>)
 800a512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a516:	bf00      	nop
 800a518:	0800a543 	.word	0x0800a543
 800a51c:	0800a529 	.word	0x0800a529
 800a520:	0800a5a3 	.word	0x0800a5a3
 800a524:	0800a5c3 	.word	0x0800a5c3
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800a528:	4a52      	ldr	r2, [pc, #328]	; (800a674 <RadioSend+0x1e0>)
 800a52a:	78fb      	ldrb	r3, [r7, #3]
 800a52c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a52e:	4852      	ldr	r0, [pc, #328]	; (800a678 <RadioSend+0x1e4>)
 800a530:	f001 fe0a 	bl	800c148 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800a534:	78fb      	ldrb	r3, [r7, #3]
 800a536:	2200      	movs	r2, #0
 800a538:	4619      	mov	r1, r3
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f001 f926 	bl	800b78c <SUBGRF_SendPayload>
            break;
 800a540:	e08c      	b.n	800a65c <RadioSend+0x1c8>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800a542:	f002 fa26 	bl	800c992 <RFW_Is_Init>
 800a546:	4603      	mov	r3, r0
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d11d      	bne.n	800a588 <RadioSend+0xf4>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800a54c:	f107 020d 	add.w	r2, r7, #13
 800a550:	78fb      	ldrb	r3, [r7, #3]
 800a552:	4619      	mov	r1, r3
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f002 fa34 	bl	800c9c2 <RFW_TransmitInit>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10c      	bne.n	800a57a <RadioSend+0xe6>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800a560:	7b7a      	ldrb	r2, [r7, #13]
 800a562:	4b44      	ldr	r3, [pc, #272]	; (800a674 <RadioSend+0x1e0>)
 800a564:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a566:	4844      	ldr	r0, [pc, #272]	; (800a678 <RadioSend+0x1e4>)
 800a568:	f001 fdee 	bl	800c148 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800a56c:	7b7b      	ldrb	r3, [r7, #13]
 800a56e:	2200      	movs	r2, #0
 800a570:	4619      	mov	r1, r3
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f001 f90a 	bl	800b78c <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 800a578:	e070      	b.n	800a65c <RadioSend+0x1c8>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 800a57a:	4b40      	ldr	r3, [pc, #256]	; (800a67c <RadioSend+0x1e8>)
 800a57c:	2201      	movs	r2, #1
 800a57e:	2100      	movs	r1, #0
 800a580:	2002      	movs	r0, #2
 800a582:	f002 fa69 	bl	800ca58 <UTIL_ADV_TRACE_COND_FSend>
 800a586:	e072      	b.n	800a66e <RadioSend+0x1da>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800a588:	4a3a      	ldr	r2, [pc, #232]	; (800a674 <RadioSend+0x1e0>)
 800a58a:	78fb      	ldrb	r3, [r7, #3]
 800a58c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a58e:	483a      	ldr	r0, [pc, #232]	; (800a678 <RadioSend+0x1e4>)
 800a590:	f001 fdda 	bl	800c148 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800a594:	78fb      	ldrb	r3, [r7, #3]
 800a596:	2200      	movs	r2, #0
 800a598:	4619      	mov	r1, r3
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f001 f8f6 	bl	800b78c <SUBGRF_SendPayload>
            break;
 800a5a0:	e05c      	b.n	800a65c <RadioSend+0x1c8>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800a5a2:	4b34      	ldr	r3, [pc, #208]	; (800a674 <RadioSend+0x1e0>)
 800a5a4:	2202      	movs	r2, #2
 800a5a6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800a5a8:	4a32      	ldr	r2, [pc, #200]	; (800a674 <RadioSend+0x1e0>)
 800a5aa:	78fb      	ldrb	r3, [r7, #3]
 800a5ac:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a5ae:	4832      	ldr	r0, [pc, #200]	; (800a678 <RadioSend+0x1e4>)
 800a5b0:	f001 fdca 	bl	800c148 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800a5b4:	78fb      	ldrb	r3, [r7, #3]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f001 f8e6 	bl	800b78c <SUBGRF_SendPayload>
            break;
 800a5c0:	e04c      	b.n	800a65c <RadioSend+0x1c8>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 800a5c2:	78fb      	ldrb	r3, [r7, #3]
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	6879      	ldr	r1, [r7, #4]
 800a5c8:	482d      	ldr	r0, [pc, #180]	; (800a680 <RadioSend+0x1ec>)
 800a5ca:	f000 fc66 	bl	800ae9a <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800a5ce:	4b29      	ldr	r3, [pc, #164]	; (800a674 <RadioSend+0x1e0>)
 800a5d0:	2202      	movs	r2, #2
 800a5d2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800a5d4:	78fb      	ldrb	r3, [r7, #3]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	4b26      	ldr	r3, [pc, #152]	; (800a674 <RadioSend+0x1e0>)
 800a5dc:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a5de:	4826      	ldr	r0, [pc, #152]	; (800a678 <RadioSend+0x1e4>)
 800a5e0:	f001 fdb2 	bl	800c148 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 800a5e4:	2100      	movs	r1, #0
 800a5e6:	20f1      	movs	r0, #241	; 0xf1
 800a5e8:	f000 f947 	bl	800a87a <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	20f0      	movs	r0, #240	; 0xf0
 800a5f0:	f000 f943 	bl	800a87a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800a5f4:	4b1f      	ldr	r3, [pc, #124]	; (800a674 <RadioSend+0x1e0>)
 800a5f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5f8:	2b64      	cmp	r3, #100	; 0x64
 800a5fa:	d108      	bne.n	800a60e <RadioSend+0x17a>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 800a5fc:	2170      	movs	r1, #112	; 0x70
 800a5fe:	20f3      	movs	r0, #243	; 0xf3
 800a600:	f000 f93b 	bl	800a87a <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 800a604:	211d      	movs	r1, #29
 800a606:	20f2      	movs	r0, #242	; 0xf2
 800a608:	f000 f937 	bl	800a87a <RadioWrite>
 800a60c:	e007      	b.n	800a61e <RadioSend+0x18a>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 800a60e:	21e1      	movs	r1, #225	; 0xe1
 800a610:	20f3      	movs	r0, #243	; 0xf3
 800a612:	f000 f932 	bl	800a87a <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 800a616:	2104      	movs	r1, #4
 800a618:	20f2      	movs	r0, #242	; 0xf2
 800a61a:	f000 f92e 	bl	800a87a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 800a61e:	78fb      	ldrb	r3, [r7, #3]
 800a620:	b29b      	uxth	r3, r3
 800a622:	00db      	lsls	r3, r3, #3
 800a624:	b29b      	uxth	r3, r3
 800a626:	3302      	adds	r3, #2
 800a628:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800a62a:	89fb      	ldrh	r3, [r7, #14]
 800a62c:	0a1b      	lsrs	r3, r3, #8
 800a62e:	b29b      	uxth	r3, r3
 800a630:	b2db      	uxtb	r3, r3
 800a632:	4619      	mov	r1, r3
 800a634:	20f4      	movs	r0, #244	; 0xf4
 800a636:	f000 f920 	bl	800a87a <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 800a63a:	89fb      	ldrh	r3, [r7, #14]
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	4619      	mov	r1, r3
 800a640:	20f5      	movs	r0, #245	; 0xf5
 800a642:	f000 f91a 	bl	800a87a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 800a646:	78fb      	ldrb	r3, [r7, #3]
 800a648:	3301      	adds	r3, #1
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800a650:	4619      	mov	r1, r3
 800a652:	480b      	ldr	r0, [pc, #44]	; (800a680 <RadioSend+0x1ec>)
 800a654:	f001 f89a 	bl	800b78c <SUBGRF_SendPayload>
            break;
 800a658:	e000      	b.n	800a65c <RadioSend+0x1c8>
        }
        default:
            break;
 800a65a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800a65c:	4b05      	ldr	r3, [pc, #20]	; (800a674 <RadioSend+0x1e0>)
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	4619      	mov	r1, r3
 800a662:	4808      	ldr	r0, [pc, #32]	; (800a684 <RadioSend+0x1f0>)
 800a664:	f003 f858 	bl	800d718 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800a668:	4806      	ldr	r0, [pc, #24]	; (800a684 <RadioSend+0x1f0>)
 800a66a:	f002 ff77 	bl	800d55c <UTIL_TIMER_Start>
}
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	20000554 	.word	0x20000554
 800a678:	20000562 	.word	0x20000562
 800a67c:	08010a84 	.word	0x08010a84
 800a680:	20000450 	.word	0x20000450
 800a684:	200005ac 	.word	0x200005ac

0800a688 <RadioSleep>:

static void RadioSleep( void )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800a68e:	2300      	movs	r3, #0
 800a690:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800a692:	793b      	ldrb	r3, [r7, #4]
 800a694:	f043 0304 	orr.w	r3, r3, #4
 800a698:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800a69a:	7938      	ldrb	r0, [r7, #4]
 800a69c:	f001 f952 	bl	800b944 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 800a6a0:	2002      	movs	r0, #2
 800a6a2:	f7f7 fc47 	bl	8001f34 <HAL_Delay>
}
 800a6a6:	bf00      	nop
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <RadioStandby>:

static void RadioStandby( void )
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800a6b2:	2000      	movs	r0, #0
 800a6b4:	f001 f978 	bl	800b9a8 <SUBGRF_SetStandby>
}
 800a6b8:	bf00      	nop
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 800a6c4:	f002 f965 	bl	800c992 <RFW_Is_Init>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d102      	bne.n	800a6d4 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 800a6ce:	f002 f988 	bl	800c9e2 <RFW_ReceiveInit>
 800a6d2:	e007      	b.n	800a6e4 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f240 2162 	movw	r1, #610	; 0x262
 800a6dc:	f240 2062 	movw	r0, #610	; 0x262
 800a6e0:	f001 fb32 	bl	800bd48 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d006      	beq.n	800a6f8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	480f      	ldr	r0, [pc, #60]	; (800a72c <RadioRx+0x70>)
 800a6ee:	f003 f813 	bl	800d718 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800a6f2:	480e      	ldr	r0, [pc, #56]	; (800a72c <RadioRx+0x70>)
 800a6f4:	f002 ff32 	bl	800d55c <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    //DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800a6f8:	4b0d      	ldr	r3, [pc, #52]	; (800a730 <RadioRx+0x74>)
 800a6fa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a6fe:	2100      	movs	r1, #0
 800a700:	4618      	mov	r0, r3
 800a702:	f001 ff5d 	bl	800c5c0 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 800a706:	4b0a      	ldr	r3, [pc, #40]	; (800a730 <RadioRx+0x74>)
 800a708:	785b      	ldrb	r3, [r3, #1]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d004      	beq.n	800a718 <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a70e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a712:	f001 f985 	bl	800ba20 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800a716:	e005      	b.n	800a724 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800a718:	4b05      	ldr	r3, [pc, #20]	; (800a730 <RadioRx+0x74>)
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	019b      	lsls	r3, r3, #6
 800a71e:	4618      	mov	r0, r3
 800a720:	f001 f97e 	bl	800ba20 <SUBGRF_SetRx>
}
 800a724:	bf00      	nop
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	200005c4 	.word	0x200005c4
 800a730:	20000554 	.word	0x20000554

0800a734 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 800a73c:	f002 f929 	bl	800c992 <RFW_Is_Init>
 800a740:	4603      	mov	r3, r0
 800a742:	2b01      	cmp	r3, #1
 800a744:	d102      	bne.n	800a74c <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 800a746:	f002 f94c 	bl	800c9e2 <RFW_ReceiveInit>
 800a74a:	e007      	b.n	800a75c <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800a74c:	2300      	movs	r3, #0
 800a74e:	2200      	movs	r2, #0
 800a750:	f240 2162 	movw	r1, #610	; 0x262
 800a754:	f240 2062 	movw	r0, #610	; 0x262
 800a758:	f001 faf6 	bl	800bd48 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d006      	beq.n	800a770 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800a762:	6879      	ldr	r1, [r7, #4]
 800a764:	480f      	ldr	r0, [pc, #60]	; (800a7a4 <RadioRxBoosted+0x70>)
 800a766:	f002 ffd7 	bl	800d718 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800a76a:	480e      	ldr	r0, [pc, #56]	; (800a7a4 <RadioRxBoosted+0x70>)
 800a76c:	f002 fef6 	bl	800d55c <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800a770:	4b0d      	ldr	r3, [pc, #52]	; (800a7a8 <RadioRxBoosted+0x74>)
 800a772:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a776:	2100      	movs	r1, #0
 800a778:	4618      	mov	r0, r3
 800a77a:	f001 ff21 	bl	800c5c0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800a77e:	4b0a      	ldr	r3, [pc, #40]	; (800a7a8 <RadioRxBoosted+0x74>)
 800a780:	785b      	ldrb	r3, [r3, #1]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d004      	beq.n	800a790 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800a786:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a78a:	f001 f969 	bl	800ba60 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800a78e:	e005      	b.n	800a79c <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800a790:	4b05      	ldr	r3, [pc, #20]	; (800a7a8 <RadioRxBoosted+0x74>)
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	019b      	lsls	r3, r3, #6
 800a796:	4618      	mov	r0, r3
 800a798:	f001 f962 	bl	800ba60 <SUBGRF_SetRxBoosted>
}
 800a79c:	bf00      	nop
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	200005c4 	.word	0x200005c4
 800a7a8:	20000554 	.word	0x20000554

0800a7ac <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800a7b6:	4b07      	ldr	r3, [pc, #28]	; (800a7d4 <RadioSetRxDutyCycle+0x28>)
 800a7b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a7bc:	2100      	movs	r1, #0
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f001 fefe 	bl	800c5c0 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f001 f96e 	bl	800baa8 <SUBGRF_SetRxDutyCycle>
}
 800a7cc:	bf00      	nop
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	20000554 	.word	0x20000554

0800a7d8 <RadioStartCad>:

static void RadioStartCad( void )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800a7dc:	4b09      	ldr	r3, [pc, #36]	; (800a804 <RadioStartCad+0x2c>)
 800a7de:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f001 feeb 	bl	800c5c0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800a7f2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800a7f6:	f001 faa7 	bl	800bd48 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800a7fa:	f001 f981 	bl	800bb00 <SUBGRF_SetCad>
}
 800a7fe:	bf00      	nop
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	20000554 	.word	0x20000554

0800a808 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	460b      	mov	r3, r1
 800a812:	70fb      	strb	r3, [r7, #3]
 800a814:	4613      	mov	r3, r2
 800a816:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 800a818:	883b      	ldrh	r3, [r7, #0]
 800a81a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a81e:	fb02 f303 	mul.w	r3, r2, r3
 800a822:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f001 faeb 	bl	800be00 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800a82a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a82e:	4618      	mov	r0, r3
 800a830:	f001 feee 	bl	800c610 <SUBGRF_SetRfTxPower>
 800a834:	4603      	mov	r3, r0
 800a836:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 800a838:	7afb      	ldrb	r3, [r7, #11]
 800a83a:	2101      	movs	r1, #1
 800a83c:	4618      	mov	r0, r3
 800a83e:	f001 febf 	bl	800c5c0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800a842:	f001 f96b 	bl	800bb1c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800a846:	68f9      	ldr	r1, [r7, #12]
 800a848:	4804      	ldr	r0, [pc, #16]	; (800a85c <RadioSetTxContinuousWave+0x54>)
 800a84a:	f002 ff65 	bl	800d718 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800a84e:	4803      	ldr	r0, [pc, #12]	; (800a85c <RadioSetTxContinuousWave+0x54>)
 800a850:	f002 fe84 	bl	800d55c <UTIL_TIMER_Start>
}
 800a854:	bf00      	nop
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	200005ac 	.word	0x200005ac

0800a860 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	4603      	mov	r3, r0
 800a868:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800a86a:	f001 fd22 	bl	800c2b2 <SUBGRF_GetRssiInst>
 800a86e:	4603      	mov	r3, r0
 800a870:	b21b      	sxth	r3, r3
}
 800a872:	4618      	mov	r0, r3
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b082      	sub	sp, #8
 800a87e:	af00      	add	r7, sp, #0
 800a880:	4603      	mov	r3, r0
 800a882:	460a      	mov	r2, r1
 800a884:	80fb      	strh	r3, [r7, #6]
 800a886:	4613      	mov	r3, r2
 800a888:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 800a88a:	797a      	ldrb	r2, [r7, #5]
 800a88c:	88fb      	ldrh	r3, [r7, #6]
 800a88e:	4611      	mov	r1, r2
 800a890:	4618      	mov	r0, r3
 800a892:	f001 fda1 	bl	800c3d8 <SUBGRF_WriteRegister>
}
 800a896:	bf00      	nop
 800a898:	3708      	adds	r7, #8
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b082      	sub	sp, #8
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 800a8a8:	88fb      	ldrh	r3, [r7, #6]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f001 fda8 	bl	800c400 <SUBGRF_ReadRegister>
 800a8b0:	4603      	mov	r3, r0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b082      	sub	sp, #8
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	6039      	str	r1, [r7, #0]
 800a8c4:	80fb      	strh	r3, [r7, #6]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800a8ca:	797b      	ldrb	r3, [r7, #5]
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	88fb      	ldrh	r3, [r7, #6]
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f001 fda8 	bl	800c428 <SUBGRF_WriteRegisters>
}
 800a8d8:	bf00      	nop
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	6039      	str	r1, [r7, #0]
 800a8ea:	80fb      	strh	r3, [r7, #6]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800a8f0:	797b      	ldrb	r3, [r7, #5]
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	88fb      	ldrh	r3, [r7, #6]
 800a8f6:	6839      	ldr	r1, [r7, #0]
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f001 fdb7 	bl	800c46c <SUBGRF_ReadRegisters>
}
 800a8fe:	bf00      	nop
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
	...

0800a908 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	460a      	mov	r2, r1
 800a912:	71fb      	strb	r3, [r7, #7]
 800a914:	4613      	mov	r3, r2
 800a916:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800a918:	79fb      	ldrb	r3, [r7, #7]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d10a      	bne.n	800a934 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800a91e:	4a0e      	ldr	r2, [pc, #56]	; (800a958 <RadioSetMaxPayloadLength+0x50>)
 800a920:	79bb      	ldrb	r3, [r7, #6]
 800a922:	7013      	strb	r3, [r2, #0]
 800a924:	4b0c      	ldr	r3, [pc, #48]	; (800a958 <RadioSetMaxPayloadLength+0x50>)
 800a926:	781a      	ldrb	r2, [r3, #0]
 800a928:	4b0c      	ldr	r3, [pc, #48]	; (800a95c <RadioSetMaxPayloadLength+0x54>)
 800a92a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a92c:	480c      	ldr	r0, [pc, #48]	; (800a960 <RadioSetMaxPayloadLength+0x58>)
 800a92e:	f001 fc0b 	bl	800c148 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800a932:	e00d      	b.n	800a950 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800a934:	4b09      	ldr	r3, [pc, #36]	; (800a95c <RadioSetMaxPayloadLength+0x54>)
 800a936:	7d5b      	ldrb	r3, [r3, #21]
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d109      	bne.n	800a950 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800a93c:	4a06      	ldr	r2, [pc, #24]	; (800a958 <RadioSetMaxPayloadLength+0x50>)
 800a93e:	79bb      	ldrb	r3, [r7, #6]
 800a940:	7013      	strb	r3, [r2, #0]
 800a942:	4b05      	ldr	r3, [pc, #20]	; (800a958 <RadioSetMaxPayloadLength+0x50>)
 800a944:	781a      	ldrb	r2, [r3, #0]
 800a946:	4b05      	ldr	r3, [pc, #20]	; (800a95c <RadioSetMaxPayloadLength+0x54>)
 800a948:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a94a:	4805      	ldr	r0, [pc, #20]	; (800a960 <RadioSetMaxPayloadLength+0x58>)
 800a94c:	f001 fbfc 	bl	800c148 <SUBGRF_SetPacketParams>
}
 800a950:	bf00      	nop
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	20000010 	.word	0x20000010
 800a95c:	20000554 	.word	0x20000554
 800a960:	20000562 	.word	0x20000562

0800a964 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	4603      	mov	r3, r0
 800a96c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800a96e:	4a13      	ldr	r2, [pc, #76]	; (800a9bc <RadioSetPublicNetwork+0x58>)
 800a970:	79fb      	ldrb	r3, [r7, #7]
 800a972:	7313      	strb	r3, [r2, #12]
 800a974:	4b11      	ldr	r3, [pc, #68]	; (800a9bc <RadioSetPublicNetwork+0x58>)
 800a976:	7b1a      	ldrb	r2, [r3, #12]
 800a978:	4b10      	ldr	r3, [pc, #64]	; (800a9bc <RadioSetPublicNetwork+0x58>)
 800a97a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800a97c:	2001      	movs	r0, #1
 800a97e:	f7ff f82b 	bl	80099d8 <RadioSetModem>
    if( enable == true )
 800a982:	79fb      	ldrb	r3, [r7, #7]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00a      	beq.n	800a99e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800a988:	2134      	movs	r1, #52	; 0x34
 800a98a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800a98e:	f001 fd23 	bl	800c3d8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800a992:	2144      	movs	r1, #68	; 0x44
 800a994:	f240 7041 	movw	r0, #1857	; 0x741
 800a998:	f001 fd1e 	bl	800c3d8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800a99c:	e009      	b.n	800a9b2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800a99e:	2114      	movs	r1, #20
 800a9a0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800a9a4:	f001 fd18 	bl	800c3d8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800a9a8:	2124      	movs	r1, #36	; 0x24
 800a9aa:	f240 7041 	movw	r0, #1857	; 0x741
 800a9ae:	f001 fd13 	bl	800c3d8 <SUBGRF_WriteRegister>
}
 800a9b2:	bf00      	nop
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	20000554 	.word	0x20000554

0800a9c0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800a9c4:	f001 fe58 	bl	800c678 <SUBGRF_GetRadioWakeUpTime>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	3303      	adds	r3, #3
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800a9d8:	f000 f80e 	bl	800a9f8 <RadioOnTxTimeoutProcess>
}
 800a9dc:	bf00      	nop
 800a9de:	3708      	adds	r7, #8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800a9ec:	f000 f818 	bl	800aa20 <RadioOnRxTimeoutProcess>
}
 800a9f0:	bf00      	nop
 800a9f2:	3708      	adds	r7, #8
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    //DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800a9fc:	4b07      	ldr	r3, [pc, #28]	; (800aa1c <RadioOnTxTimeoutProcess+0x24>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d008      	beq.n	800aa16 <RadioOnTxTimeoutProcess+0x1e>
 800aa04:	4b05      	ldr	r3, [pc, #20]	; (800aa1c <RadioOnTxTimeoutProcess+0x24>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d003      	beq.n	800aa16 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800aa0e:	4b03      	ldr	r3, [pc, #12]	; (800aa1c <RadioOnTxTimeoutProcess+0x24>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	4798      	blx	r3
    }
}
 800aa16:	bf00      	nop
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	20000550 	.word	0x20000550

0800aa20 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    //DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800aa24:	4b07      	ldr	r3, [pc, #28]	; (800aa44 <RadioOnRxTimeoutProcess+0x24>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d008      	beq.n	800aa3e <RadioOnRxTimeoutProcess+0x1e>
 800aa2c:	4b05      	ldr	r3, [pc, #20]	; (800aa44 <RadioOnRxTimeoutProcess+0x24>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d003      	beq.n	800aa3e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800aa36:	4b03      	ldr	r3, [pc, #12]	; (800aa44 <RadioOnRxTimeoutProcess+0x24>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	4798      	blx	r3
    }
}
 800aa3e:	bf00      	nop
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	20000550 	.word	0x20000550

0800aa48 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	4603      	mov	r3, r0
 800aa50:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800aa52:	4a05      	ldr	r2, [pc, #20]	; (800aa68 <RadioOnDioIrq+0x20>)
 800aa54:	88fb      	ldrh	r3, [r7, #6]
 800aa56:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800aa5a:	f000 f807 	bl	800aa6c <RadioIrqProcess>
}
 800aa5e:	bf00      	nop
 800aa60:	3708      	adds	r7, #8
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	20000554 	.word	0x20000554

0800aa6c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800aa6c:	b590      	push	{r4, r7, lr}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800aa72:	2300      	movs	r3, #0
 800aa74:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800aa76:	2300      	movs	r3, #0
 800aa78:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 800aa7a:	4bb5      	ldr	r3, [pc, #724]	; (800ad50 <RadioIrqProcess+0x2e4>)
 800aa7c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800aa80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa84:	f000 810c 	beq.w	800aca0 <RadioIrqProcess+0x234>
 800aa88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa8c:	f300 81b5 	bgt.w	800adfa <RadioIrqProcess+0x38e>
 800aa90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa94:	f000 80f0 	beq.w	800ac78 <RadioIrqProcess+0x20c>
 800aa98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa9c:	f300 81ad 	bgt.w	800adfa <RadioIrqProcess+0x38e>
 800aaa0:	2b80      	cmp	r3, #128	; 0x80
 800aaa2:	f000 80d5 	beq.w	800ac50 <RadioIrqProcess+0x1e4>
 800aaa6:	2b80      	cmp	r3, #128	; 0x80
 800aaa8:	f300 81a7 	bgt.w	800adfa <RadioIrqProcess+0x38e>
 800aaac:	2b20      	cmp	r3, #32
 800aaae:	dc49      	bgt.n	800ab44 <RadioIrqProcess+0xd8>
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f340 81a2 	ble.w	800adfa <RadioIrqProcess+0x38e>
 800aab6:	3b01      	subs	r3, #1
 800aab8:	2b1f      	cmp	r3, #31
 800aaba:	f200 819e 	bhi.w	800adfa <RadioIrqProcess+0x38e>
 800aabe:	a201      	add	r2, pc, #4	; (adr r2, 800aac4 <RadioIrqProcess+0x58>)
 800aac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac4:	0800ab4d 	.word	0x0800ab4d
 800aac8:	0800ab87 	.word	0x0800ab87
 800aacc:	0800adfb 	.word	0x0800adfb
 800aad0:	0800ad19 	.word	0x0800ad19
 800aad4:	0800adfb 	.word	0x0800adfb
 800aad8:	0800adfb 	.word	0x0800adfb
 800aadc:	0800adfb 	.word	0x0800adfb
 800aae0:	0800ad27 	.word	0x0800ad27
 800aae4:	0800adfb 	.word	0x0800adfb
 800aae8:	0800adfb 	.word	0x0800adfb
 800aaec:	0800adfb 	.word	0x0800adfb
 800aaf0:	0800adfb 	.word	0x0800adfb
 800aaf4:	0800adfb 	.word	0x0800adfb
 800aaf8:	0800adfb 	.word	0x0800adfb
 800aafc:	0800adfb 	.word	0x0800adfb
 800ab00:	0800ad43 	.word	0x0800ad43
 800ab04:	0800adfb 	.word	0x0800adfb
 800ab08:	0800adfb 	.word	0x0800adfb
 800ab0c:	0800adfb 	.word	0x0800adfb
 800ab10:	0800adfb 	.word	0x0800adfb
 800ab14:	0800adfb 	.word	0x0800adfb
 800ab18:	0800adfb 	.word	0x0800adfb
 800ab1c:	0800adfb 	.word	0x0800adfb
 800ab20:	0800adfb 	.word	0x0800adfb
 800ab24:	0800adfb 	.word	0x0800adfb
 800ab28:	0800adfb 	.word	0x0800adfb
 800ab2c:	0800adfb 	.word	0x0800adfb
 800ab30:	0800adfb 	.word	0x0800adfb
 800ab34:	0800adfb 	.word	0x0800adfb
 800ab38:	0800adfb 	.word	0x0800adfb
 800ab3c:	0800adfb 	.word	0x0800adfb
 800ab40:	0800ad7d 	.word	0x0800ad7d
 800ab44:	2b40      	cmp	r3, #64	; 0x40
 800ab46:	f000 813a 	beq.w	800adbe <RadioIrqProcess+0x352>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 800ab4a:	e156      	b.n	800adfa <RadioIrqProcess+0x38e>
        TimerStop( &TxTimeoutTimer );
 800ab4c:	4881      	ldr	r0, [pc, #516]	; (800ad54 <RadioIrqProcess+0x2e8>)
 800ab4e:	f002 fd73 	bl	800d638 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800ab52:	2000      	movs	r0, #0
 800ab54:	f000 ff28 	bl	800b9a8 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 800ab58:	f001 ff22 	bl	800c9a0 <RFW_Is_LongPacketModeEnabled>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d101      	bne.n	800ab66 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800ab62:	f001 ff46 	bl	800c9f2 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800ab66:	4b7c      	ldr	r3, [pc, #496]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f000 8147 	beq.w	800adfe <RadioIrqProcess+0x392>
 800ab70:	4b79      	ldr	r3, [pc, #484]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f000 8141 	beq.w	800adfe <RadioIrqProcess+0x392>
            RadioEvents->TxDone( );
 800ab7c:	4b76      	ldr	r3, [pc, #472]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4798      	blx	r3
        break;
 800ab84:	e13b      	b.n	800adfe <RadioIrqProcess+0x392>
        TimerStop( &RxTimeoutTimer );
 800ab86:	4875      	ldr	r0, [pc, #468]	; (800ad5c <RadioIrqProcess+0x2f0>)
 800ab88:	f002 fd56 	bl	800d638 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800ab8c:	4b70      	ldr	r3, [pc, #448]	; (800ad50 <RadioIrqProcess+0x2e4>)
 800ab8e:	785b      	ldrb	r3, [r3, #1]
 800ab90:	f083 0301 	eor.w	r3, r3, #1
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d014      	beq.n	800abc4 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	f000 ff04 	bl	800b9a8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 800aba0:	2100      	movs	r1, #0
 800aba2:	f640 1002 	movw	r0, #2306	; 0x902
 800aba6:	f001 fc17 	bl	800c3d8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800abaa:	f640 1044 	movw	r0, #2372	; 0x944
 800abae:	f001 fc27 	bl	800c400 <SUBGRF_ReadRegister>
 800abb2:	4603      	mov	r3, r0
 800abb4:	f043 0302 	orr.w	r3, r3, #2
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	4619      	mov	r1, r3
 800abbc:	f640 1044 	movw	r0, #2372	; 0x944
 800abc0:	f001 fc0a 	bl	800c3d8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 800abc4:	1dfb      	adds	r3, r7, #7
 800abc6:	22ff      	movs	r2, #255	; 0xff
 800abc8:	4619      	mov	r1, r3
 800abca:	4865      	ldr	r0, [pc, #404]	; (800ad60 <RadioIrqProcess+0x2f4>)
 800abcc:	f000 fdbc 	bl	800b748 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 800abd0:	4864      	ldr	r0, [pc, #400]	; (800ad64 <RadioIrqProcess+0x2f8>)
 800abd2:	f001 fbaf 	bl	800c334 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800abd6:	4b60      	ldr	r3, [pc, #384]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d036      	beq.n	800ac4c <RadioIrqProcess+0x1e0>
 800abde:	4b5e      	ldr	r3, [pc, #376]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d031      	beq.n	800ac4c <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 800abe8:	4b59      	ldr	r3, [pc, #356]	; (800ad50 <RadioIrqProcess+0x2e4>)
 800abea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d10e      	bne.n	800ac10 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800abf2:	4b59      	ldr	r3, [pc, #356]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	689c      	ldr	r4, [r3, #8]
 800abf8:	79fb      	ldrb	r3, [r7, #7]
 800abfa:	b299      	uxth	r1, r3
 800abfc:	4b54      	ldr	r3, [pc, #336]	; (800ad50 <RadioIrqProcess+0x2e4>)
 800abfe:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800ac02:	b21a      	sxth	r2, r3
 800ac04:	4b52      	ldr	r3, [pc, #328]	; (800ad50 <RadioIrqProcess+0x2e4>)
 800ac06:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800ac0a:	4855      	ldr	r0, [pc, #340]	; (800ad60 <RadioIrqProcess+0x2f4>)
 800ac0c:	47a0      	blx	r4
                break;
 800ac0e:	e01e      	b.n	800ac4e <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800ac10:	4b4f      	ldr	r3, [pc, #316]	; (800ad50 <RadioIrqProcess+0x2e4>)
 800ac12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac14:	463a      	mov	r2, r7
 800ac16:	4611      	mov	r1, r2
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f001 fe0f 	bl	800c83c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800ac1e:	4b4e      	ldr	r3, [pc, #312]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	689c      	ldr	r4, [r3, #8]
 800ac24:	79fb      	ldrb	r3, [r7, #7]
 800ac26:	b299      	uxth	r1, r3
 800ac28:	4b49      	ldr	r3, [pc, #292]	; (800ad50 <RadioIrqProcess+0x2e4>)
 800ac2a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800ac2e:	b218      	sxth	r0, r3
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ac36:	4a4c      	ldr	r2, [pc, #304]	; (800ad68 <RadioIrqProcess+0x2fc>)
 800ac38:	fb82 c203 	smull	ip, r2, r2, r3
 800ac3c:	1192      	asrs	r2, r2, #6
 800ac3e:	17db      	asrs	r3, r3, #31
 800ac40:	1ad3      	subs	r3, r2, r3
 800ac42:	b25b      	sxtb	r3, r3
 800ac44:	4602      	mov	r2, r0
 800ac46:	4846      	ldr	r0, [pc, #280]	; (800ad60 <RadioIrqProcess+0x2f4>)
 800ac48:	47a0      	blx	r4
                break;
 800ac4a:	e000      	b.n	800ac4e <RadioIrqProcess+0x1e2>
        }
 800ac4c:	bf00      	nop
        break;
 800ac4e:	e0e3      	b.n	800ae18 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800ac50:	2000      	movs	r0, #0
 800ac52:	f000 fea9 	bl	800b9a8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800ac56:	4b40      	ldr	r3, [pc, #256]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f000 80d1 	beq.w	800ae02 <RadioIrqProcess+0x396>
 800ac60:	4b3d      	ldr	r3, [pc, #244]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	699b      	ldr	r3, [r3, #24]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	f000 80cb 	beq.w	800ae02 <RadioIrqProcess+0x396>
            RadioEvents->CadDone( false );
 800ac6c:	4b3a      	ldr	r3, [pc, #232]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	699b      	ldr	r3, [r3, #24]
 800ac72:	2000      	movs	r0, #0
 800ac74:	4798      	blx	r3
        break;
 800ac76:	e0c4      	b.n	800ae02 <RadioIrqProcess+0x396>
        SUBGRF_SetStandby( STDBY_RC );
 800ac78:	2000      	movs	r0, #0
 800ac7a:	f000 fe95 	bl	800b9a8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800ac7e:	4b36      	ldr	r3, [pc, #216]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	f000 80bf 	beq.w	800ae06 <RadioIrqProcess+0x39a>
 800ac88:	4b33      	ldr	r3, [pc, #204]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f000 80b9 	beq.w	800ae06 <RadioIrqProcess+0x39a>
            RadioEvents->CadDone( true );
 800ac94:	4b30      	ldr	r3, [pc, #192]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	2001      	movs	r0, #1
 800ac9c:	4798      	blx	r3
        break;
 800ac9e:	e0b2      	b.n	800ae06 <RadioIrqProcess+0x39a>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800aca0:	4b32      	ldr	r3, [pc, #200]	; (800ad6c <RadioIrqProcess+0x300>)
 800aca2:	2201      	movs	r2, #1
 800aca4:	2100      	movs	r1, #0
 800aca6:	2002      	movs	r0, #2
 800aca8:	f001 fed6 	bl	800ca58 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800acac:	f000 fd32 	bl	800b714 <SUBGRF_GetOperatingMode>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b04      	cmp	r3, #4
 800acb4:	d115      	bne.n	800ace2 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 800acb6:	4827      	ldr	r0, [pc, #156]	; (800ad54 <RadioIrqProcess+0x2e8>)
 800acb8:	f002 fcbe 	bl	800d638 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800acbc:	2000      	movs	r0, #0
 800acbe:	f000 fe73 	bl	800b9a8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800acc2:	4b25      	ldr	r3, [pc, #148]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	f000 809f 	beq.w	800ae0a <RadioIrqProcess+0x39e>
 800accc:	4b22      	ldr	r3, [pc, #136]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f000 8099 	beq.w	800ae0a <RadioIrqProcess+0x39e>
                RadioEvents->TxTimeout( );
 800acd8:	4b1f      	ldr	r3, [pc, #124]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	4798      	blx	r3
        break;
 800ace0:	e093      	b.n	800ae0a <RadioIrqProcess+0x39e>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800ace2:	f000 fd17 	bl	800b714 <SUBGRF_GetOperatingMode>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b05      	cmp	r3, #5
 800acea:	f040 808e 	bne.w	800ae0a <RadioIrqProcess+0x39e>
            TimerStop( &RxTimeoutTimer );
 800acee:	481b      	ldr	r0, [pc, #108]	; (800ad5c <RadioIrqProcess+0x2f0>)
 800acf0:	f002 fca2 	bl	800d638 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800acf4:	2000      	movs	r0, #0
 800acf6:	f000 fe57 	bl	800b9a8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800acfa:	4b17      	ldr	r3, [pc, #92]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	f000 8083 	beq.w	800ae0a <RadioIrqProcess+0x39e>
 800ad04:	4b14      	ldr	r3, [pc, #80]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d07d      	beq.n	800ae0a <RadioIrqProcess+0x39e>
                RadioEvents->RxTimeout( );
 800ad0e:	4b12      	ldr	r3, [pc, #72]	; (800ad58 <RadioIrqProcess+0x2ec>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	4798      	blx	r3
        break;
 800ad16:	e078      	b.n	800ae0a <RadioIrqProcess+0x39e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800ad18:	4b15      	ldr	r3, [pc, #84]	; (800ad70 <RadioIrqProcess+0x304>)
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	2002      	movs	r0, #2
 800ad20:	f001 fe9a 	bl	800ca58 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800ad24:	e078      	b.n	800ae18 <RadioIrqProcess+0x3ac>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800ad26:	4b13      	ldr	r3, [pc, #76]	; (800ad74 <RadioIrqProcess+0x308>)
 800ad28:	2201      	movs	r2, #1
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	2002      	movs	r0, #2
 800ad2e:	f001 fe93 	bl	800ca58 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 800ad32:	f001 fe2e 	bl	800c992 <RFW_Is_Init>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d168      	bne.n	800ae0e <RadioIrqProcess+0x3a2>
            RFW_ReceivePayload( );
 800ad3c:	f001 fe5f 	bl	800c9fe <RFW_ReceivePayload>
        break;
 800ad40:	e065      	b.n	800ae0e <RadioIrqProcess+0x3a2>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800ad42:	4b0d      	ldr	r3, [pc, #52]	; (800ad78 <RadioIrqProcess+0x30c>)
 800ad44:	2201      	movs	r2, #1
 800ad46:	2100      	movs	r1, #0
 800ad48:	2002      	movs	r0, #2
 800ad4a:	f001 fe85 	bl	800ca58 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800ad4e:	e063      	b.n	800ae18 <RadioIrqProcess+0x3ac>
 800ad50:	20000554 	.word	0x20000554
 800ad54:	200005ac 	.word	0x200005ac
 800ad58:	20000550 	.word	0x20000550
 800ad5c:	200005c4 	.word	0x200005c4
 800ad60:	20000450 	.word	0x20000450
 800ad64:	20000578 	.word	0x20000578
 800ad68:	10624dd3 	.word	0x10624dd3
 800ad6c:	08010a9c 	.word	0x08010a9c
 800ad70:	08010ab0 	.word	0x08010ab0
 800ad74:	08010abc 	.word	0x08010abc
 800ad78:	08010ac8 	.word	0x08010ac8
        TimerStop( &RxTimeoutTimer );
 800ad7c:	4828      	ldr	r0, [pc, #160]	; (800ae20 <RadioIrqProcess+0x3b4>)
 800ad7e:	f002 fc5b 	bl	800d638 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800ad82:	4b28      	ldr	r3, [pc, #160]	; (800ae24 <RadioIrqProcess+0x3b8>)
 800ad84:	785b      	ldrb	r3, [r3, #1]
 800ad86:	f083 0301 	eor.w	r3, r3, #1
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d002      	beq.n	800ad96 <RadioIrqProcess+0x32a>
            SUBGRF_SetStandby( STDBY_RC );
 800ad90:	2000      	movs	r0, #0
 800ad92:	f000 fe09 	bl	800b9a8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ad96:	4b24      	ldr	r3, [pc, #144]	; (800ae28 <RadioIrqProcess+0x3bc>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d039      	beq.n	800ae12 <RadioIrqProcess+0x3a6>
 800ad9e:	4b22      	ldr	r3, [pc, #136]	; (800ae28 <RadioIrqProcess+0x3bc>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d034      	beq.n	800ae12 <RadioIrqProcess+0x3a6>
            RadioEvents->RxTimeout( );
 800ada8:	4b1f      	ldr	r3, [pc, #124]	; (800ae28 <RadioIrqProcess+0x3bc>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800adb0:	4b1e      	ldr	r3, [pc, #120]	; (800ae2c <RadioIrqProcess+0x3c0>)
 800adb2:	2201      	movs	r2, #1
 800adb4:	2100      	movs	r1, #0
 800adb6:	2002      	movs	r0, #2
 800adb8:	f001 fe4e 	bl	800ca58 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800adbc:	e029      	b.n	800ae12 <RadioIrqProcess+0x3a6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800adbe:	4b1c      	ldr	r3, [pc, #112]	; (800ae30 <RadioIrqProcess+0x3c4>)
 800adc0:	2201      	movs	r2, #1
 800adc2:	2100      	movs	r1, #0
 800adc4:	2002      	movs	r0, #2
 800adc6:	f001 fe47 	bl	800ca58 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800adca:	4b16      	ldr	r3, [pc, #88]	; (800ae24 <RadioIrqProcess+0x3b8>)
 800adcc:	785b      	ldrb	r3, [r3, #1]
 800adce:	f083 0301 	eor.w	r3, r3, #1
 800add2:	b2db      	uxtb	r3, r3
 800add4:	2b00      	cmp	r3, #0
 800add6:	d002      	beq.n	800adde <RadioIrqProcess+0x372>
            SUBGRF_SetStandby( STDBY_RC );
 800add8:	2000      	movs	r0, #0
 800adda:	f000 fde5 	bl	800b9a8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800adde:	4b12      	ldr	r3, [pc, #72]	; (800ae28 <RadioIrqProcess+0x3bc>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d017      	beq.n	800ae16 <RadioIrqProcess+0x3aa>
 800ade6:	4b10      	ldr	r3, [pc, #64]	; (800ae28 <RadioIrqProcess+0x3bc>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d012      	beq.n	800ae16 <RadioIrqProcess+0x3aa>
            RadioEvents->RxError( );
 800adf0:	4b0d      	ldr	r3, [pc, #52]	; (800ae28 <RadioIrqProcess+0x3bc>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	4798      	blx	r3
        break;
 800adf8:	e00d      	b.n	800ae16 <RadioIrqProcess+0x3aa>
        break;
 800adfa:	bf00      	nop
 800adfc:	e00c      	b.n	800ae18 <RadioIrqProcess+0x3ac>
        break;
 800adfe:	bf00      	nop
 800ae00:	e00a      	b.n	800ae18 <RadioIrqProcess+0x3ac>
        break;
 800ae02:	bf00      	nop
 800ae04:	e008      	b.n	800ae18 <RadioIrqProcess+0x3ac>
        break;
 800ae06:	bf00      	nop
 800ae08:	e006      	b.n	800ae18 <RadioIrqProcess+0x3ac>
        break;
 800ae0a:	bf00      	nop
 800ae0c:	e004      	b.n	800ae18 <RadioIrqProcess+0x3ac>
        break;
 800ae0e:	bf00      	nop
 800ae10:	e002      	b.n	800ae18 <RadioIrqProcess+0x3ac>
        break;
 800ae12:	bf00      	nop
 800ae14:	e000      	b.n	800ae18 <RadioIrqProcess+0x3ac>
        break;
 800ae16:	bf00      	nop
  }
}
 800ae18:	bf00      	nop
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd90      	pop	{r4, r7, pc}
 800ae20:	200005c4 	.word	0x200005c4
 800ae24:	20000554 	.word	0x20000554
 800ae28:	20000550 	.word	0x20000550
 800ae2c:	08010ad4 	.word	0x08010ad4
 800ae30:	08010ae0 	.word	0x08010ae0

0800ae34 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800ae38:	4b09      	ldr	r3, [pc, #36]	; (800ae60 <RadioTxPrbs+0x2c>)
 800ae3a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800ae3e:	2101      	movs	r1, #1
 800ae40:	4618      	mov	r0, r3
 800ae42:	f001 fbbd 	bl	800c5c0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 800ae46:	4b07      	ldr	r3, [pc, #28]	; (800ae64 <RadioTxPrbs+0x30>)
 800ae48:	212d      	movs	r1, #45	; 0x2d
 800ae4a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800ae4e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800ae50:	f000 fe6d 	bl	800bb2e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800ae54:	4804      	ldr	r0, [pc, #16]	; (800ae68 <RadioTxPrbs+0x34>)
 800ae56:	f000 fdc3 	bl	800b9e0 <SUBGRF_SetTx>
}
 800ae5a:	bf00      	nop
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	20000554 	.word	0x20000554
 800ae64:	0800a87b 	.word	0x0800a87b
 800ae68:	000fffff 	.word	0x000fffff

0800ae6c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	4603      	mov	r3, r0
 800ae74:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800ae76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f001 fbc8 	bl	800c610 <SUBGRF_SetRfTxPower>
 800ae80:	4603      	mov	r3, r0
 800ae82:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800ae84:	7bfb      	ldrb	r3, [r7, #15]
 800ae86:	2101      	movs	r1, #1
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f001 fb99 	bl	800c5c0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800ae8e:	f000 fe45 	bl	800bb1c <SUBGRF_SetTxContinuousWave>
}
 800ae92:	bf00      	nop
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800ae9a:	b480      	push	{r7}
 800ae9c:	b089      	sub	sp, #36	; 0x24
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	60f8      	str	r0, [r7, #12]
 800aea2:	60b9      	str	r1, [r7, #8]
 800aea4:	4613      	mov	r3, r2
 800aea6:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	61bb      	str	r3, [r7, #24]
 800aeb4:	e011      	b.n	800aeda <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	4413      	add	r3, r2
 800aebc:	781a      	ldrb	r2, [r3, #0]
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	68b9      	ldr	r1, [r7, #8]
 800aec2:	440b      	add	r3, r1
 800aec4:	43d2      	mvns	r2, r2
 800aec6:	b2d2      	uxtb	r2, r2
 800aec8:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	4413      	add	r3, r2
 800aed0:	2200      	movs	r2, #0
 800aed2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	3301      	adds	r3, #1
 800aed8:	61bb      	str	r3, [r7, #24]
 800aeda:	79fb      	ldrb	r3, [r7, #7]
 800aedc:	69ba      	ldr	r2, [r7, #24]
 800aede:	429a      	cmp	r2, r3
 800aee0:	dbe9      	blt.n	800aeb6 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 800aee2:	2300      	movs	r3, #0
 800aee4:	61bb      	str	r3, [r7, #24]
 800aee6:	e049      	b.n	800af7c <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	425a      	negs	r2, r3
 800aeec:	f003 0307 	and.w	r3, r3, #7
 800aef0:	f002 0207 	and.w	r2, r2, #7
 800aef4:	bf58      	it	pl
 800aef6:	4253      	negpl	r3, r2
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	f1c3 0307 	rsb	r3, r3, #7
 800aefe:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	2b00      	cmp	r3, #0
 800af04:	da00      	bge.n	800af08 <payload_integration+0x6e>
 800af06:	3307      	adds	r3, #7
 800af08:	10db      	asrs	r3, r3, #3
 800af0a:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	3301      	adds	r3, #1
 800af10:	425a      	negs	r2, r3
 800af12:	f003 0307 	and.w	r3, r3, #7
 800af16:	f002 0207 	and.w	r2, r2, #7
 800af1a:	bf58      	it	pl
 800af1c:	4253      	negpl	r3, r2
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	f1c3 0307 	rsb	r3, r3, #7
 800af24:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	3301      	adds	r3, #1
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	da00      	bge.n	800af30 <payload_integration+0x96>
 800af2e:	3307      	adds	r3, #7
 800af30:	10db      	asrs	r3, r3, #3
 800af32:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800af34:	7dbb      	ldrb	r3, [r7, #22]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	4413      	add	r3, r2
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	461a      	mov	r2, r3
 800af3e:	7dfb      	ldrb	r3, [r7, #23]
 800af40:	fa42 f303 	asr.w	r3, r2, r3
 800af44:	b2db      	uxtb	r3, r3
 800af46:	f003 0301 	and.w	r3, r3, #1
 800af4a:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800af4c:	7ffa      	ldrb	r2, [r7, #31]
 800af4e:	7cfb      	ldrb	r3, [r7, #19]
 800af50:	4053      	eors	r3, r2
 800af52:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800af54:	7d3b      	ldrb	r3, [r7, #20]
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	4413      	add	r3, r2
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	b25a      	sxtb	r2, r3
 800af5e:	7ff9      	ldrb	r1, [r7, #31]
 800af60:	7d7b      	ldrb	r3, [r7, #21]
 800af62:	fa01 f303 	lsl.w	r3, r1, r3
 800af66:	b25b      	sxtb	r3, r3
 800af68:	4313      	orrs	r3, r2
 800af6a:	b259      	sxtb	r1, r3
 800af6c:	7d3b      	ldrb	r3, [r7, #20]
 800af6e:	68fa      	ldr	r2, [r7, #12]
 800af70:	4413      	add	r3, r2
 800af72:	b2ca      	uxtb	r2, r1
 800af74:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	3301      	adds	r3, #1
 800af7a:	61bb      	str	r3, [r7, #24]
 800af7c:	79fb      	ldrb	r3, [r7, #7]
 800af7e:	00db      	lsls	r3, r3, #3
 800af80:	69ba      	ldr	r2, [r7, #24]
 800af82:	429a      	cmp	r2, r3
 800af84:	dbb0      	blt.n	800aee8 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800af86:	7ffb      	ldrb	r3, [r7, #31]
 800af88:	01db      	lsls	r3, r3, #7
 800af8a:	b25a      	sxtb	r2, r3
 800af8c:	7ffb      	ldrb	r3, [r7, #31]
 800af8e:	019b      	lsls	r3, r3, #6
 800af90:	b25b      	sxtb	r3, r3
 800af92:	4313      	orrs	r3, r2
 800af94:	b25b      	sxtb	r3, r3
 800af96:	7ffa      	ldrb	r2, [r7, #31]
 800af98:	2a00      	cmp	r2, #0
 800af9a:	d101      	bne.n	800afa0 <payload_integration+0x106>
 800af9c:	2220      	movs	r2, #32
 800af9e:	e000      	b.n	800afa2 <payload_integration+0x108>
 800afa0:	2200      	movs	r2, #0
 800afa2:	4313      	orrs	r3, r2
 800afa4:	b259      	sxtb	r1, r3
 800afa6:	79fb      	ldrb	r3, [r7, #7]
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	4413      	add	r3, r2
 800afac:	b2ca      	uxtb	r2, r1
 800afae:	701a      	strb	r2, [r3, #0]
}
 800afb0:	bf00      	nop
 800afb2:	3724      	adds	r7, #36	; 0x24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bc80      	pop	{r7}
 800afb8:	4770      	bx	lr
	...

0800afbc <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b08c      	sub	sp, #48	; 0x30
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60b9      	str	r1, [r7, #8]
 800afc4:	607a      	str	r2, [r7, #4]
 800afc6:	603b      	str	r3, [r7, #0]
 800afc8:	4603      	mov	r3, r0
 800afca:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800afcc:	2300      	movs	r3, #0
 800afce:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 800afd0:	2300      	movs	r3, #0
 800afd2:	61fb      	str	r3, [r7, #28]
 800afd4:	2300      	movs	r3, #0
 800afd6:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800afd8:	f001 fcd5 	bl	800c986 <RFW_DeInit>

    if( rxContinuous != 0 )
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800afe2:	2300      	movs	r3, #0
 800afe4:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	bf14      	ite	ne
 800afec:	2301      	movne	r3, #1
 800afee:	2300      	moveq	r3, #0
 800aff0:	b2da      	uxtb	r2, r3
 800aff2:	4b9f      	ldr	r3, [pc, #636]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800aff4:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800aff6:	7bfb      	ldrb	r3, [r7, #15]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d003      	beq.n	800b004 <RadioSetRxGenericConfig+0x48>
 800affc:	2b01      	cmp	r3, #1
 800affe:	f000 80e8 	beq.w	800b1d2 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800b002:	e1a0      	b.n	800b346 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d003      	beq.n	800b014 <RadioSetRxGenericConfig+0x58>
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d102      	bne.n	800b01a <RadioSetRxGenericConfig+0x5e>
            return -1;
 800b014:	f04f 33ff 	mov.w	r3, #4294967295
 800b018:	e196      	b.n	800b348 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	7d5b      	ldrb	r3, [r3, #21]
 800b01e:	2b08      	cmp	r3, #8
 800b020:	d902      	bls.n	800b028 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800b022:	f04f 33ff 	mov.w	r3, #4294967295
 800b026:	e18f      	b.n	800b348 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800b028:	2300      	movs	r3, #0
 800b02a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b02c:	e00d      	b.n	800b04a <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	699a      	ldr	r2, [r3, #24]
 800b032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b034:	4413      	add	r3, r2
 800b036:	7819      	ldrb	r1, [r3, #0]
 800b038:	f107 021c 	add.w	r2, r7, #28
 800b03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03e:	4413      	add	r3, r2
 800b040:	460a      	mov	r2, r1
 800b042:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800b044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b046:	3301      	adds	r3, #1
 800b048:	62bb      	str	r3, [r7, #40]	; 0x28
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	7d5b      	ldrb	r3, [r3, #21]
 800b04e:	461a      	mov	r2, r3
 800b050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b052:	4293      	cmp	r3, r2
 800b054:	dbeb      	blt.n	800b02e <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	bf14      	ite	ne
 800b05e:	2301      	movne	r3, #1
 800b060:	2300      	moveq	r3, #0
 800b062:	b2db      	uxtb	r3, r3
 800b064:	4618      	mov	r0, r3
 800b066:	f000 fd6b 	bl	800bb40 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800b06a:	4b81      	ldr	r3, [pc, #516]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	4a7e      	ldr	r2, [pc, #504]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b078:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	791a      	ldrb	r2, [r3, #4]
 800b07e:	4b7c      	ldr	r3, [pc, #496]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	4618      	mov	r0, r3
 800b08a:	f001 fbaf 	bl	800c7ec <SUBGRF_GetFskBandwidthRegValue>
 800b08e:	4603      	mov	r3, r0
 800b090:	461a      	mov	r2, r3
 800b092:	4b77      	ldr	r3, [pc, #476]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800b098:	4b75      	ldr	r3, [pc, #468]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b09a:	2200      	movs	r2, #0
 800b09c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	00db      	lsls	r3, r3, #3
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	4b71      	ldr	r3, [pc, #452]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b0aa:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	7d1a      	ldrb	r2, [r3, #20]
 800b0b0:	4b6f      	ldr	r3, [pc, #444]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b0b2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	7d5b      	ldrb	r3, [r3, #21]
 800b0b8:	00db      	lsls	r3, r3, #3
 800b0ba:	b2da      	uxtb	r2, r3
 800b0bc:	4b6c      	ldr	r3, [pc, #432]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b0be:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800b0c6:	4b6a      	ldr	r3, [pc, #424]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b0c8:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d105      	bne.n	800b0e0 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	69db      	ldr	r3, [r3, #28]
 800b0d8:	b2da      	uxtb	r2, r3
 800b0da:	4b65      	ldr	r3, [pc, #404]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b0dc:	759a      	strb	r2, [r3, #22]
 800b0de:	e00b      	b.n	800b0f8 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	d103      	bne.n	800b0f2 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800b0ea:	4b61      	ldr	r3, [pc, #388]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b0ec:	22ff      	movs	r2, #255	; 0xff
 800b0ee:	759a      	strb	r2, [r3, #22]
 800b0f0:	e002      	b.n	800b0f8 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800b0f2:	4b5f      	ldr	r3, [pc, #380]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b0f4:	22ff      	movs	r2, #255	; 0xff
 800b0f6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d004      	beq.n	800b10c <RadioSetRxGenericConfig+0x150>
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b108:	2b02      	cmp	r3, #2
 800b10a:	d12d      	bne.n	800b168 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b112:	2bf1      	cmp	r3, #241	; 0xf1
 800b114:	d00c      	beq.n	800b130 <RadioSetRxGenericConfig+0x174>
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b11c:	2bf2      	cmp	r3, #242	; 0xf2
 800b11e:	d007      	beq.n	800b130 <RadioSetRxGenericConfig+0x174>
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b126:	2b01      	cmp	r3, #1
 800b128:	d002      	beq.n	800b130 <RadioSetRxGenericConfig+0x174>
            return -1;
 800b12a:	f04f 33ff 	mov.w	r3, #4294967295
 800b12e:	e10b      	b.n	800b348 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 800b130:	2300      	movs	r3, #0
 800b132:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800b138:	4b4e      	ldr	r3, [pc, #312]	; (800b274 <RadioSetRxGenericConfig+0x2b8>)
 800b13a:	6819      	ldr	r1, [r3, #0]
 800b13c:	f107 0310 	add.w	r3, r7, #16
 800b140:	4a4d      	ldr	r2, [pc, #308]	; (800b278 <RadioSetRxGenericConfig+0x2bc>)
 800b142:	4618      	mov	r0, r3
 800b144:	f001 fc12 	bl	800c96c <RFW_Init>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d002      	beq.n	800b154 <RadioSetRxGenericConfig+0x198>
            return -1;
 800b14e:	f04f 33ff 	mov.w	r3, #4294967295
 800b152:	e0f9      	b.n	800b348 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800b154:	4b46      	ldr	r3, [pc, #280]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b156:	2200      	movs	r2, #0
 800b158:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800b15a:	4b45      	ldr	r3, [pc, #276]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b15c:	2201      	movs	r2, #1
 800b15e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800b160:	4b43      	ldr	r3, [pc, #268]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b162:	2200      	movs	r2, #0
 800b164:	755a      	strb	r2, [r3, #21]
        {
 800b166:	e00e      	b.n	800b186 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800b16e:	4b40      	ldr	r3, [pc, #256]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b170:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800b178:	4b3d      	ldr	r3, [pc, #244]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b17a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800b182:	4b3b      	ldr	r3, [pc, #236]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b184:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800b186:	f7ff fa92 	bl	800a6ae <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800b18a:	2000      	movs	r0, #0
 800b18c:	f7fe fc24 	bl	80099d8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b190:	483a      	ldr	r0, [pc, #232]	; (800b27c <RadioSetRxGenericConfig+0x2c0>)
 800b192:	f000 ff07 	bl	800bfa4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b196:	483a      	ldr	r0, [pc, #232]	; (800b280 <RadioSetRxGenericConfig+0x2c4>)
 800b198:	f000 ffd6 	bl	800c148 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800b19c:	f107 031c 	add.w	r3, r7, #28
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f000 fb06 	bl	800b7b2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	8c1b      	ldrh	r3, [r3, #32]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 fb50 	bl	800b850 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f000 fb2b 	bl	800b810 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800b1c0:	fb03 f202 	mul.w	r2, r3, r2
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1cc:	4a28      	ldr	r2, [pc, #160]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b1ce:	6093      	str	r3, [r2, #8]
        break;
 800b1d0:	e0b9      	b.n	800b346 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d102      	bne.n	800b1e0 <RadioSetRxGenericConfig+0x224>
            return -1;
 800b1da:	f04f 33ff 	mov.w	r3, #4294967295
 800b1de:	e0b3      	b.n	800b348 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d104      	bne.n	800b1f4 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	69db      	ldr	r3, [r3, #28]
 800b1ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b1f2:	e002      	b.n	800b1fa <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 800b1f4:	23ff      	movs	r3, #255	; 0xff
 800b1f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	bf14      	ite	ne
 800b202:	2301      	movne	r3, #1
 800b204:	2300      	moveq	r3, #0
 800b206:	b2db      	uxtb	r3, r3
 800b208:	4618      	mov	r0, r3
 800b20a:	f000 fc99 	bl	800bb40 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	b2db      	uxtb	r3, r3
 800b212:	4618      	mov	r0, r3
 800b214:	f000 fca3 	bl	800bb5e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800b218:	4b15      	ldr	r3, [pc, #84]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b21a:	2201      	movs	r2, #1
 800b21c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b226:	4b12      	ldr	r3, [pc, #72]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800b232:	4b0f      	ldr	r3, [pc, #60]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800b23e:	4b0c      	ldr	r3, [pc, #48]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b240:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800b24a:	2b02      	cmp	r3, #2
 800b24c:	d01a      	beq.n	800b284 <RadioSetRxGenericConfig+0x2c8>
 800b24e:	2b02      	cmp	r3, #2
 800b250:	dc2c      	bgt.n	800b2ac <RadioSetRxGenericConfig+0x2f0>
 800b252:	2b00      	cmp	r3, #0
 800b254:	d002      	beq.n	800b25c <RadioSetRxGenericConfig+0x2a0>
 800b256:	2b01      	cmp	r3, #1
 800b258:	d005      	beq.n	800b266 <RadioSetRxGenericConfig+0x2aa>
            break;
 800b25a:	e027      	b.n	800b2ac <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b25c:	4b04      	ldr	r3, [pc, #16]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b264:	e023      	b.n	800b2ae <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b266:	4b02      	ldr	r3, [pc, #8]	; (800b270 <RadioSetRxGenericConfig+0x2b4>)
 800b268:	2201      	movs	r2, #1
 800b26a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b26e:	e01e      	b.n	800b2ae <RadioSetRxGenericConfig+0x2f2>
 800b270:	20000554 	.word	0x20000554
 800b274:	20000550 	.word	0x20000550
 800b278:	200005c4 	.word	0x200005c4
 800b27c:	2000058c 	.word	0x2000058c
 800b280:	20000562 	.word	0x20000562
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b28a:	2b0b      	cmp	r3, #11
 800b28c:	d004      	beq.n	800b298 <RadioSetRxGenericConfig+0x2dc>
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b294:	2b0c      	cmp	r3, #12
 800b296:	d104      	bne.n	800b2a2 <RadioSetRxGenericConfig+0x2e6>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b298:	4b2d      	ldr	r3, [pc, #180]	; (800b350 <RadioSetRxGenericConfig+0x394>)
 800b29a:	2201      	movs	r2, #1
 800b29c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b2a0:	e005      	b.n	800b2ae <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b2a2:	4b2b      	ldr	r3, [pc, #172]	; (800b350 <RadioSetRxGenericConfig+0x394>)
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b2aa:	e000      	b.n	800b2ae <RadioSetRxGenericConfig+0x2f2>
            break;
 800b2ac:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800b2ae:	4b28      	ldr	r3, [pc, #160]	; (800b350 <RadioSetRxGenericConfig+0x394>)
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800b2b8:	4b25      	ldr	r3, [pc, #148]	; (800b350 <RadioSetRxGenericConfig+0x394>)
 800b2ba:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800b2c2:	4b23      	ldr	r3, [pc, #140]	; (800b350 <RadioSetRxGenericConfig+0x394>)
 800b2c4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800b2c6:	4a22      	ldr	r2, [pc, #136]	; (800b350 <RadioSetRxGenericConfig+0x394>)
 800b2c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2cc:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800b2d4:	4b1e      	ldr	r3, [pc, #120]	; (800b350 <RadioSetRxGenericConfig+0x394>)
 800b2d6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800b2e0:	4b1b      	ldr	r3, [pc, #108]	; (800b350 <RadioSetRxGenericConfig+0x394>)
 800b2e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800b2e6:	f7ff f9e2 	bl	800a6ae <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800b2ea:	2001      	movs	r0, #1
 800b2ec:	f7fe fb74 	bl	80099d8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b2f0:	4818      	ldr	r0, [pc, #96]	; (800b354 <RadioSetRxGenericConfig+0x398>)
 800b2f2:	f000 fe57 	bl	800bfa4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b2f6:	4818      	ldr	r0, [pc, #96]	; (800b358 <RadioSetRxGenericConfig+0x39c>)
 800b2f8:	f000 ff26 	bl	800c148 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800b2fc:	4b14      	ldr	r3, [pc, #80]	; (800b350 <RadioSetRxGenericConfig+0x394>)
 800b2fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b302:	2b01      	cmp	r3, #1
 800b304:	d10d      	bne.n	800b322 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800b306:	f240 7036 	movw	r0, #1846	; 0x736
 800b30a:	f001 f879 	bl	800c400 <SUBGRF_ReadRegister>
 800b30e:	4603      	mov	r3, r0
 800b310:	f023 0304 	bic.w	r3, r3, #4
 800b314:	b2db      	uxtb	r3, r3
 800b316:	4619      	mov	r1, r3
 800b318:	f240 7036 	movw	r0, #1846	; 0x736
 800b31c:	f001 f85c 	bl	800c3d8 <SUBGRF_WriteRegister>
 800b320:	e00c      	b.n	800b33c <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800b322:	f240 7036 	movw	r0, #1846	; 0x736
 800b326:	f001 f86b 	bl	800c400 <SUBGRF_ReadRegister>
 800b32a:	4603      	mov	r3, r0
 800b32c:	f043 0304 	orr.w	r3, r3, #4
 800b330:	b2db      	uxtb	r3, r3
 800b332:	4619      	mov	r1, r3
 800b334:	f240 7036 	movw	r0, #1846	; 0x736
 800b338:	f001 f84e 	bl	800c3d8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800b33c:	4b04      	ldr	r3, [pc, #16]	; (800b350 <RadioSetRxGenericConfig+0x394>)
 800b33e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b342:	609a      	str	r2, [r3, #8]
        break;
 800b344:	bf00      	nop
    }
    return status;
 800b346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3730      	adds	r7, #48	; 0x30
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	20000554 	.word	0x20000554
 800b354:	2000058c 	.word	0x2000058c
 800b358:	20000562 	.word	0x20000562

0800b35c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b08a      	sub	sp, #40	; 0x28
 800b360:	af00      	add	r7, sp, #0
 800b362:	60b9      	str	r1, [r7, #8]
 800b364:	607b      	str	r3, [r7, #4]
 800b366:	4603      	mov	r3, r0
 800b368:	73fb      	strb	r3, [r7, #15]
 800b36a:	4613      	mov	r3, r2
 800b36c:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 800b36e:	2300      	movs	r3, #0
 800b370:	61fb      	str	r3, [r7, #28]
 800b372:	2300      	movs	r3, #0
 800b374:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800b376:	f001 fb06 	bl	800c986 <RFW_DeInit>
    switch( modem )
 800b37a:	7bfb      	ldrb	r3, [r7, #15]
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	f000 8144 	beq.w	800b60a <RadioSetTxGenericConfig+0x2ae>
 800b382:	2b02      	cmp	r3, #2
 800b384:	f300 8160 	bgt.w	800b648 <RadioSetTxGenericConfig+0x2ec>
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d003      	beq.n	800b394 <RadioSetTxGenericConfig+0x38>
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	f000 80b7 	beq.w	800b500 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 800b392:	e159      	b.n	800b648 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d003      	beq.n	800b3a4 <RadioSetTxGenericConfig+0x48>
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	691b      	ldr	r3, [r3, #16]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d102      	bne.n	800b3aa <RadioSetTxGenericConfig+0x4e>
            return -1;
 800b3a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3a8:	e163      	b.n	800b672 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	7d1b      	ldrb	r3, [r3, #20]
 800b3ae:	2b08      	cmp	r3, #8
 800b3b0:	d902      	bls.n	800b3b8 <RadioSetTxGenericConfig+0x5c>
            return -1;
 800b3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3b6:	e15c      	b.n	800b672 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	627b      	str	r3, [r7, #36]	; 0x24
 800b3bc:	e00d      	b.n	800b3da <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	699a      	ldr	r2, [r3, #24]
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c4:	4413      	add	r3, r2
 800b3c6:	7819      	ldrb	r1, [r3, #0]
 800b3c8:	f107 021c 	add.w	r2, r7, #28
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ce:	4413      	add	r3, r2
 800b3d0:	460a      	mov	r2, r1
 800b3d2:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	627b      	str	r3, [r7, #36]	; 0x24
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	7d1b      	ldrb	r3, [r3, #20]
 800b3de:	461a      	mov	r2, r3
 800b3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	dbeb      	blt.n	800b3be <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800b3e6:	4ba5      	ldr	r3, [pc, #660]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	4aa2      	ldr	r2, [pc, #648]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b3f4:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	781a      	ldrb	r2, [r3, #0]
 800b3fa:	4ba0      	ldr	r3, [pc, #640]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b3fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	4618      	mov	r0, r3
 800b406:	f001 f9f1 	bl	800c7ec <SUBGRF_GetFskBandwidthRegValue>
 800b40a:	4603      	mov	r3, r0
 800b40c:	461a      	mov	r2, r3
 800b40e:	4b9b      	ldr	r3, [pc, #620]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	4a98      	ldr	r2, [pc, #608]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b41a:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800b41c:	4b97      	ldr	r3, [pc, #604]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b41e:	2200      	movs	r2, #0
 800b420:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	b29b      	uxth	r3, r3
 800b428:	00db      	lsls	r3, r3, #3
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	4b93      	ldr	r3, [pc, #588]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b42e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800b430:	4b92      	ldr	r3, [pc, #584]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b432:	2204      	movs	r2, #4
 800b434:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	7d1b      	ldrb	r3, [r3, #20]
 800b43a:	00db      	lsls	r3, r3, #3
 800b43c:	b2da      	uxtb	r2, r3
 800b43e:	4b8f      	ldr	r3, [pc, #572]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b440:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800b442:	4b8e      	ldr	r3, [pc, #568]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b444:	2200      	movs	r2, #0
 800b446:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b44e:	2b02      	cmp	r3, #2
 800b450:	d003      	beq.n	800b45a <RadioSetTxGenericConfig+0xfe>
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	7f9b      	ldrb	r3, [r3, #30]
 800b456:	2b02      	cmp	r3, #2
 800b458:	d12a      	bne.n	800b4b0 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	7fdb      	ldrb	r3, [r3, #31]
 800b45e:	2bf1      	cmp	r3, #241	; 0xf1
 800b460:	d00a      	beq.n	800b478 <RadioSetTxGenericConfig+0x11c>
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	7fdb      	ldrb	r3, [r3, #31]
 800b466:	2bf2      	cmp	r3, #242	; 0xf2
 800b468:	d006      	beq.n	800b478 <RadioSetTxGenericConfig+0x11c>
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	7fdb      	ldrb	r3, [r3, #31]
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d002      	beq.n	800b478 <RadioSetTxGenericConfig+0x11c>
                return -1;
 800b472:	f04f 33ff 	mov.w	r3, #4294967295
 800b476:	e0fc      	b.n	800b672 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 800b478:	2301      	movs	r3, #1
 800b47a:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800b480:	4b7f      	ldr	r3, [pc, #508]	; (800b680 <RadioSetTxGenericConfig+0x324>)
 800b482:	6819      	ldr	r1, [r3, #0]
 800b484:	f107 0310 	add.w	r3, r7, #16
 800b488:	4a7e      	ldr	r2, [pc, #504]	; (800b684 <RadioSetTxGenericConfig+0x328>)
 800b48a:	4618      	mov	r0, r3
 800b48c:	f001 fa6e 	bl	800c96c <RFW_Init>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d002      	beq.n	800b49c <RadioSetTxGenericConfig+0x140>
              return -1;
 800b496:	f04f 33ff 	mov.w	r3, #4294967295
 800b49a:	e0ea      	b.n	800b672 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800b49c:	4b77      	ldr	r3, [pc, #476]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b49e:	2200      	movs	r2, #0
 800b4a0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800b4a2:	4b76      	ldr	r3, [pc, #472]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800b4a8:	4b74      	ldr	r3, [pc, #464]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	755a      	strb	r2, [r3, #21]
        {
 800b4ae:	e00c      	b.n	800b4ca <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	7fda      	ldrb	r2, [r3, #31]
 800b4b4:	4b71      	ldr	r3, [pc, #452]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b4b6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800b4be:	4b6f      	ldr	r3, [pc, #444]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b4c0:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	7f9a      	ldrb	r2, [r3, #30]
 800b4c6:	4b6d      	ldr	r3, [pc, #436]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b4c8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800b4ca:	f7ff f8f0 	bl	800a6ae <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800b4ce:	2000      	movs	r0, #0
 800b4d0:	f7fe fa82 	bl	80099d8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b4d4:	486c      	ldr	r0, [pc, #432]	; (800b688 <RadioSetTxGenericConfig+0x32c>)
 800b4d6:	f000 fd65 	bl	800bfa4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b4da:	486c      	ldr	r0, [pc, #432]	; (800b68c <RadioSetTxGenericConfig+0x330>)
 800b4dc:	f000 fe34 	bl	800c148 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800b4e0:	f107 031c 	add.w	r3, r7, #28
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f000 f964 	bl	800b7b2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	8b9b      	ldrh	r3, [r3, #28]
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f000 f9ae 	bl	800b850 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	8c1b      	ldrh	r3, [r3, #32]
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f000 f989 	bl	800b810 <SUBGRF_SetCrcPolynomial>
        break;
 800b4fe:	e0a4      	b.n	800b64a <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800b500:	4b5e      	ldr	r3, [pc, #376]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b502:	2201      	movs	r2, #1
 800b504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800b50e:	4b5b      	ldr	r3, [pc, #364]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800b51a:	4b58      	ldr	r3, [pc, #352]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b51c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800b526:	4b55      	ldr	r3, [pc, #340]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b528:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b532:	2b02      	cmp	r3, #2
 800b534:	d010      	beq.n	800b558 <RadioSetTxGenericConfig+0x1fc>
 800b536:	2b02      	cmp	r3, #2
 800b538:	dc22      	bgt.n	800b580 <RadioSetTxGenericConfig+0x224>
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d002      	beq.n	800b544 <RadioSetTxGenericConfig+0x1e8>
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d005      	beq.n	800b54e <RadioSetTxGenericConfig+0x1f2>
            break;
 800b542:	e01d      	b.n	800b580 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b544:	4b4d      	ldr	r3, [pc, #308]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b546:	2200      	movs	r2, #0
 800b548:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b54c:	e019      	b.n	800b582 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b54e:	4b4b      	ldr	r3, [pc, #300]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b550:	2201      	movs	r2, #1
 800b552:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b556:	e014      	b.n	800b582 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b55e:	2b0b      	cmp	r3, #11
 800b560:	d004      	beq.n	800b56c <RadioSetTxGenericConfig+0x210>
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b568:	2b0c      	cmp	r3, #12
 800b56a:	d104      	bne.n	800b576 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b56c:	4b43      	ldr	r3, [pc, #268]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b56e:	2201      	movs	r2, #1
 800b570:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b574:	e005      	b.n	800b582 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b576:	4b41      	ldr	r3, [pc, #260]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b57e:	e000      	b.n	800b582 <RadioSetTxGenericConfig+0x226>
            break;
 800b580:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800b582:	4b3e      	ldr	r3, [pc, #248]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b584:	2201      	movs	r2, #1
 800b586:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b58c:	4b3b      	ldr	r3, [pc, #236]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b58e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800b596:	4b39      	ldr	r3, [pc, #228]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b598:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b5a0:	4b36      	ldr	r3, [pc, #216]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b5a2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b5ac:	4b33      	ldr	r3, [pc, #204]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b5ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800b5b2:	f7ff f87c 	bl	800a6ae <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800b5b6:	2001      	movs	r0, #1
 800b5b8:	f7fe fa0e 	bl	80099d8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b5bc:	4832      	ldr	r0, [pc, #200]	; (800b688 <RadioSetTxGenericConfig+0x32c>)
 800b5be:	f000 fcf1 	bl	800bfa4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b5c2:	4832      	ldr	r0, [pc, #200]	; (800b68c <RadioSetTxGenericConfig+0x330>)
 800b5c4:	f000 fdc0 	bl	800c148 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800b5c8:	4b2c      	ldr	r3, [pc, #176]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b5ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b5ce:	2b06      	cmp	r3, #6
 800b5d0:	d10d      	bne.n	800b5ee <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800b5d2:	f640 0089 	movw	r0, #2185	; 0x889
 800b5d6:	f000 ff13 	bl	800c400 <SUBGRF_ReadRegister>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	f023 0304 	bic.w	r3, r3, #4
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	f640 0089 	movw	r0, #2185	; 0x889
 800b5e8:	f000 fef6 	bl	800c3d8 <SUBGRF_WriteRegister>
        break;
 800b5ec:	e02d      	b.n	800b64a <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800b5ee:	f640 0089 	movw	r0, #2185	; 0x889
 800b5f2:	f000 ff05 	bl	800c400 <SUBGRF_ReadRegister>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	f043 0304 	orr.w	r3, r3, #4
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	4619      	mov	r1, r3
 800b600:	f640 0089 	movw	r0, #2185	; 0x889
 800b604:	f000 fee8 	bl	800c3d8 <SUBGRF_WriteRegister>
        break;
 800b608:	e01f      	b.n	800b64a <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d004      	beq.n	800b61c <RadioSetTxGenericConfig+0x2c0>
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b61a:	d902      	bls.n	800b622 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 800b61c:	f04f 33ff 	mov.w	r3, #4294967295
 800b620:	e027      	b.n	800b672 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 800b622:	2002      	movs	r0, #2
 800b624:	f7fe f9d8 	bl	80099d8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800b628:	4b14      	ldr	r3, [pc, #80]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b62a:	2202      	movs	r2, #2
 800b62c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b634:	4a11      	ldr	r2, [pc, #68]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b636:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800b638:	4b10      	ldr	r3, [pc, #64]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b63a:	2216      	movs	r2, #22
 800b63c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b640:	4811      	ldr	r0, [pc, #68]	; (800b688 <RadioSetTxGenericConfig+0x32c>)
 800b642:	f000 fcaf 	bl	800bfa4 <SUBGRF_SetModulationParams>
        break;
 800b646:	e000      	b.n	800b64a <RadioSetTxGenericConfig+0x2ee>
        break;
 800b648:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800b64a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b64e:	4618      	mov	r0, r3
 800b650:	f000 ffde 	bl	800c610 <SUBGRF_SetRfTxPower>
 800b654:	4603      	mov	r3, r0
 800b656:	461a      	mov	r2, r3
 800b658:	4b08      	ldr	r3, [pc, #32]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b65a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800b65e:	4b07      	ldr	r3, [pc, #28]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b660:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800b664:	4618      	mov	r0, r3
 800b666:	f001 f9a2 	bl	800c9ae <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800b66a:	4a04      	ldr	r2, [pc, #16]	; (800b67c <RadioSetTxGenericConfig+0x320>)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6053      	str	r3, [r2, #4]
    return 0;
 800b670:	2300      	movs	r3, #0
}
 800b672:	4618      	mov	r0, r3
 800b674:	3728      	adds	r7, #40	; 0x28
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	20000554 	.word	0x20000554
 800b680:	20000550 	.word	0x20000550
 800b684:	200005ac 	.word	0x200005ac
 800b688:	2000058c 	.word	0x2000058c
 800b68c:	20000562 	.word	0x20000562

0800b690 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d002      	beq.n	800b6a4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800b69e:	4a1a      	ldr	r2, [pc, #104]	; (800b708 <SUBGRF_Init+0x78>)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800b6a4:	f7f6 fb84 	bl	8001db0 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800b6a8:	2002      	movs	r0, #2
 800b6aa:	f001 f87d 	bl	800c7a8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800b6ae:	4b17      	ldr	r3, [pc, #92]	; (800b70c <SUBGRF_Init+0x7c>)
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	f000 f977 	bl	800b9a8 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800b6ba:	f7f7 fd53 	bl	8003164 <RBI_IsTCXO>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d10e      	bne.n	800b6e2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800b6c4:	2140      	movs	r1, #64	; 0x40
 800b6c6:	2001      	movs	r0, #1
 800b6c8:	f000 fb78 	bl	800bdbc <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	f640 1011 	movw	r0, #2321	; 0x911
 800b6d2:	f000 fe81 	bl	800c3d8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800b6d6:	237f      	movs	r3, #127	; 0x7f
 800b6d8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800b6da:	7b38      	ldrb	r0, [r7, #12]
 800b6dc:	f000 fa85 	bl	800bbea <SUBGRF_Calibrate>
 800b6e0:	e009      	b.n	800b6f6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800b6e2:	2120      	movs	r1, #32
 800b6e4:	f640 1011 	movw	r0, #2321	; 0x911
 800b6e8:	f000 fe76 	bl	800c3d8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800b6ec:	2120      	movs	r1, #32
 800b6ee:	f640 1012 	movw	r0, #2322	; 0x912
 800b6f2:	f000 fe71 	bl	800c3d8 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 800b6f6:	f7f7 fd19 	bl	800312c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800b6fa:	4b05      	ldr	r3, [pc, #20]	; (800b710 <SUBGRF_Init+0x80>)
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	701a      	strb	r2, [r3, #0]
}
 800b700:	bf00      	nop
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	200005e8 	.word	0x200005e8
 800b70c:	200005e4 	.word	0x200005e4
 800b710:	200005dc 	.word	0x200005dc

0800b714 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800b714:	b480      	push	{r7}
 800b716:	af00      	add	r7, sp, #0
    return OperatingMode;
 800b718:	4b02      	ldr	r3, [pc, #8]	; (800b724 <SUBGRF_GetOperatingMode+0x10>)
 800b71a:	781b      	ldrb	r3, [r3, #0]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	46bd      	mov	sp, r7
 800b720:	bc80      	pop	{r7}
 800b722:	4770      	bx	lr
 800b724:	200005dc 	.word	0x200005dc

0800b728 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	460b      	mov	r3, r1
 800b732:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800b734:	78fb      	ldrb	r3, [r7, #3]
 800b736:	461a      	mov	r2, r3
 800b738:	6879      	ldr	r1, [r7, #4]
 800b73a:	2000      	movs	r0, #0
 800b73c:	f000 feb8 	bl	800c4b0 <SUBGRF_WriteBuffer>
}
 800b740:	bf00      	nop
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b086      	sub	sp, #24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	4613      	mov	r3, r2
 800b754:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800b756:	2300      	movs	r3, #0
 800b758:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800b75a:	f107 0317 	add.w	r3, r7, #23
 800b75e:	4619      	mov	r1, r3
 800b760:	68b8      	ldr	r0, [r7, #8]
 800b762:	f000 fdbb 	bl	800c2dc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	79fa      	ldrb	r2, [r7, #7]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d201      	bcs.n	800b774 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800b770:	2301      	movs	r3, #1
 800b772:	e007      	b.n	800b784 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800b774:	7df8      	ldrb	r0, [r7, #23]
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	461a      	mov	r2, r3
 800b77c:	68f9      	ldr	r1, [r7, #12]
 800b77e:	f000 feb9 	bl	800c4f4 <SUBGRF_ReadBuffer>

    return 0;
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	3718      	adds	r7, #24
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	460b      	mov	r3, r1
 800b796:	607a      	str	r2, [r7, #4]
 800b798:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800b79a:	7afb      	ldrb	r3, [r7, #11]
 800b79c:	4619      	mov	r1, r3
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f7ff ffc2 	bl	800b728 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 f91b 	bl	800b9e0 <SUBGRF_SetTx>
}
 800b7aa:	bf00      	nop
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b082      	sub	sp, #8
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800b7ba:	2208      	movs	r2, #8
 800b7bc:	6879      	ldr	r1, [r7, #4]
 800b7be:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800b7c2:	f000 fe31 	bl	800c428 <SUBGRF_WriteRegisters>
    return 0;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800b7da:	88fb      	ldrh	r3, [r7, #6]
 800b7dc:	0a1b      	lsrs	r3, r3, #8
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800b7e4:	88fb      	ldrh	r3, [r7, #6]
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800b7ea:	f000 fb6b 	bl	800bec4 <SUBGRF_GetPacketType>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d108      	bne.n	800b806 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800b7f4:	f107 030c 	add.w	r3, r7, #12
 800b7f8:	2202      	movs	r2, #2
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800b800:	f000 fe12 	bl	800c428 <SUBGRF_WriteRegisters>
            break;
 800b804:	e000      	b.n	800b808 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800b806:	bf00      	nop
    }
}
 800b808:	bf00      	nop
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	4603      	mov	r3, r0
 800b818:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800b81a:	88fb      	ldrh	r3, [r7, #6]
 800b81c:	0a1b      	lsrs	r3, r3, #8
 800b81e:	b29b      	uxth	r3, r3
 800b820:	b2db      	uxtb	r3, r3
 800b822:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800b824:	88fb      	ldrh	r3, [r7, #6]
 800b826:	b2db      	uxtb	r3, r3
 800b828:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800b82a:	f000 fb4b 	bl	800bec4 <SUBGRF_GetPacketType>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d108      	bne.n	800b846 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800b834:	f107 030c 	add.w	r3, r7, #12
 800b838:	2202      	movs	r2, #2
 800b83a:	4619      	mov	r1, r3
 800b83c:	f240 60be 	movw	r0, #1726	; 0x6be
 800b840:	f000 fdf2 	bl	800c428 <SUBGRF_WriteRegisters>
            break;
 800b844:	e000      	b.n	800b848 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800b846:	bf00      	nop
    }
}
 800b848:	bf00      	nop
 800b84a:	3710      	adds	r7, #16
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	4603      	mov	r3, r0
 800b858:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800b85a:	2300      	movs	r3, #0
 800b85c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800b85e:	f000 fb31 	bl	800bec4 <SUBGRF_GetPacketType>
 800b862:	4603      	mov	r3, r0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d121      	bne.n	800b8ac <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800b868:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800b86c:	f000 fdc8 	bl	800c400 <SUBGRF_ReadRegister>
 800b870:	4603      	mov	r3, r0
 800b872:	f023 0301 	bic.w	r3, r3, #1
 800b876:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800b878:	88fb      	ldrh	r3, [r7, #6]
 800b87a:	0a1b      	lsrs	r3, r3, #8
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	b25b      	sxtb	r3, r3
 800b880:	f003 0301 	and.w	r3, r3, #1
 800b884:	b25a      	sxtb	r2, r3
 800b886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b88a:	4313      	orrs	r3, r2
 800b88c:	b25b      	sxtb	r3, r3
 800b88e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800b890:	7bfb      	ldrb	r3, [r7, #15]
 800b892:	4619      	mov	r1, r3
 800b894:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800b898:	f000 fd9e 	bl	800c3d8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800b89c:	88fb      	ldrh	r3, [r7, #6]
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800b8a6:	f000 fd97 	bl	800c3d8 <SUBGRF_WriteRegister>
            break;
 800b8aa:	e000      	b.n	800b8ae <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800b8ac:	bf00      	nop
    }
}
 800b8ae:	bf00      	nop
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b082      	sub	sp, #8
 800b8ba:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800b8c8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800b8cc:	f000 fd98 	bl	800c400 <SUBGRF_ReadRegister>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800b8d4:	79fb      	ldrb	r3, [r7, #7]
 800b8d6:	f023 0301 	bic.w	r3, r3, #1
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	4619      	mov	r1, r3
 800b8de:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800b8e2:	f000 fd79 	bl	800c3d8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800b8e6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800b8ea:	f000 fd89 	bl	800c400 <SUBGRF_ReadRegister>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800b8f2:	79bb      	ldrb	r3, [r7, #6]
 800b8f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8f8:	b2db      	uxtb	r3, r3
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800b900:	f000 fd6a 	bl	800c3d8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800b904:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800b908:	f000 f88a 	bl	800ba20 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800b90c:	463b      	mov	r3, r7
 800b90e:	2204      	movs	r2, #4
 800b910:	4619      	mov	r1, r3
 800b912:	f640 0019 	movw	r0, #2073	; 0x819
 800b916:	f000 fda9 	bl	800c46c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800b91a:	2000      	movs	r0, #0
 800b91c:	f000 f844 	bl	800b9a8 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800b920:	79fb      	ldrb	r3, [r7, #7]
 800b922:	4619      	mov	r1, r3
 800b924:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800b928:	f000 fd56 	bl	800c3d8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800b92c:	79bb      	ldrb	r3, [r7, #6]
 800b92e:	4619      	mov	r1, r3
 800b930:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800b934:	f000 fd50 	bl	800c3d8 <SUBGRF_WriteRegister>

    return number;
 800b938:	683b      	ldr	r3, [r7, #0]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3708      	adds	r7, #8
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
	...

0800b944 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800b94c:	2000      	movs	r0, #0
 800b94e:	f7f7 fbf4 	bl	800313a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800b952:	2002      	movs	r0, #2
 800b954:	f000 ff28 	bl	800c7a8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800b958:	793b      	ldrb	r3, [r7, #4]
 800b95a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800b964:	793b      	ldrb	r3, [r7, #4]
 800b966:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800b96e:	b25b      	sxtb	r3, r3
 800b970:	4313      	orrs	r3, r2
 800b972:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800b974:	793b      	ldrb	r3, [r7, #4]
 800b976:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800b97e:	4313      	orrs	r3, r2
 800b980:	b25b      	sxtb	r3, r3
 800b982:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800b984:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800b986:	f107 030f 	add.w	r3, r7, #15
 800b98a:	2201      	movs	r2, #1
 800b98c:	4619      	mov	r1, r3
 800b98e:	2084      	movs	r0, #132	; 0x84
 800b990:	f000 fdd2 	bl	800c538 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800b994:	4b03      	ldr	r3, [pc, #12]	; (800b9a4 <SUBGRF_SetSleep+0x60>)
 800b996:	2200      	movs	r2, #0
 800b998:	701a      	strb	r2, [r3, #0]
}
 800b99a:	bf00      	nop
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	200005dc 	.word	0x200005dc

0800b9a8 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800b9b2:	1dfb      	adds	r3, r7, #7
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	2080      	movs	r0, #128	; 0x80
 800b9ba:	f000 fdbd 	bl	800c538 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800b9be:	79fb      	ldrb	r3, [r7, #7]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d103      	bne.n	800b9cc <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800b9c4:	4b05      	ldr	r3, [pc, #20]	; (800b9dc <SUBGRF_SetStandby+0x34>)
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800b9ca:	e002      	b.n	800b9d2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800b9cc:	4b03      	ldr	r3, [pc, #12]	; (800b9dc <SUBGRF_SetStandby+0x34>)
 800b9ce:	2202      	movs	r2, #2
 800b9d0:	701a      	strb	r2, [r3, #0]
}
 800b9d2:	bf00      	nop
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	200005dc 	.word	0x200005dc

0800b9e0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800b9e8:	4b0c      	ldr	r3, [pc, #48]	; (800ba1c <SUBGRF_SetTx+0x3c>)
 800b9ea:	2204      	movs	r2, #4
 800b9ec:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	0c1b      	lsrs	r3, r3, #16
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	0a1b      	lsrs	r3, r3, #8
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800ba04:	f107 030c 	add.w	r3, r7, #12
 800ba08:	2203      	movs	r2, #3
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	2083      	movs	r0, #131	; 0x83
 800ba0e:	f000 fd93 	bl	800c538 <SUBGRF_WriteCommand>
}
 800ba12:	bf00      	nop
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	200005dc 	.word	0x200005dc

0800ba20 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800ba28:	4b0c      	ldr	r3, [pc, #48]	; (800ba5c <SUBGRF_SetRx+0x3c>)
 800ba2a:	2205      	movs	r2, #5
 800ba2c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	0c1b      	lsrs	r3, r3, #16
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	0a1b      	lsrs	r3, r3, #8
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800ba44:	f107 030c 	add.w	r3, r7, #12
 800ba48:	2203      	movs	r2, #3
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	2082      	movs	r0, #130	; 0x82
 800ba4e:	f000 fd73 	bl	800c538 <SUBGRF_WriteCommand>
}
 800ba52:	bf00      	nop
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	200005dc 	.word	0x200005dc

0800ba60 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800ba68:	4b0e      	ldr	r3, [pc, #56]	; (800baa4 <SUBGRF_SetRxBoosted+0x44>)
 800ba6a:	2205      	movs	r2, #5
 800ba6c:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800ba6e:	2197      	movs	r1, #151	; 0x97
 800ba70:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800ba74:	f000 fcb0 	bl	800c3d8 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	0c1b      	lsrs	r3, r3, #16
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	0a1b      	lsrs	r3, r3, #8
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800ba8e:	f107 030c 	add.w	r3, r7, #12
 800ba92:	2203      	movs	r2, #3
 800ba94:	4619      	mov	r1, r3
 800ba96:	2082      	movs	r0, #130	; 0x82
 800ba98:	f000 fd4e 	bl	800c538 <SUBGRF_WriteCommand>
}
 800ba9c:	bf00      	nop
 800ba9e:	3710      	adds	r7, #16
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	200005dc 	.word	0x200005dc

0800baa8 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	0c1b      	lsrs	r3, r3, #16
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	0a1b      	lsrs	r3, r3, #8
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	0c1b      	lsrs	r3, r3, #16
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	0a1b      	lsrs	r3, r3, #8
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	b2db      	uxtb	r3, r3
 800badc:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800bade:	f107 0308 	add.w	r3, r7, #8
 800bae2:	2206      	movs	r2, #6
 800bae4:	4619      	mov	r1, r3
 800bae6:	2094      	movs	r0, #148	; 0x94
 800bae8:	f000 fd26 	bl	800c538 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800baec:	4b03      	ldr	r3, [pc, #12]	; (800bafc <SUBGRF_SetRxDutyCycle+0x54>)
 800baee:	2206      	movs	r2, #6
 800baf0:	701a      	strb	r2, [r3, #0]
}
 800baf2:	bf00      	nop
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	200005dc 	.word	0x200005dc

0800bb00 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800bb04:	2200      	movs	r2, #0
 800bb06:	2100      	movs	r1, #0
 800bb08:	20c5      	movs	r0, #197	; 0xc5
 800bb0a:	f000 fd15 	bl	800c538 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800bb0e:	4b02      	ldr	r3, [pc, #8]	; (800bb18 <SUBGRF_SetCad+0x18>)
 800bb10:	2207      	movs	r2, #7
 800bb12:	701a      	strb	r2, [r3, #0]
}
 800bb14:	bf00      	nop
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	200005dc 	.word	0x200005dc

0800bb1c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800bb20:	2200      	movs	r2, #0
 800bb22:	2100      	movs	r1, #0
 800bb24:	20d1      	movs	r0, #209	; 0xd1
 800bb26:	f000 fd07 	bl	800c538 <SUBGRF_WriteCommand>
}
 800bb2a:	bf00      	nop
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800bb32:	2200      	movs	r2, #0
 800bb34:	2100      	movs	r1, #0
 800bb36:	20d2      	movs	r0, #210	; 0xd2
 800bb38:	f000 fcfe 	bl	800c538 <SUBGRF_WriteCommand>
}
 800bb3c:	bf00      	nop
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	4603      	mov	r3, r0
 800bb48:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800bb4a:	1dfb      	adds	r3, r7, #7
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	4619      	mov	r1, r3
 800bb50:	209f      	movs	r0, #159	; 0x9f
 800bb52:	f000 fcf1 	bl	800c538 <SUBGRF_WriteCommand>
}
 800bb56:	bf00      	nop
 800bb58:	3708      	adds	r7, #8
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b084      	sub	sp, #16
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	4603      	mov	r3, r0
 800bb66:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800bb68:	1dfb      	adds	r3, r7, #7
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	20a0      	movs	r0, #160	; 0xa0
 800bb70:	f000 fce2 	bl	800c538 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800bb74:	79fb      	ldrb	r3, [r7, #7]
 800bb76:	2b3f      	cmp	r3, #63	; 0x3f
 800bb78:	d91c      	bls.n	800bbb4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800bb7a:	79fb      	ldrb	r3, [r7, #7]
 800bb7c:	085b      	lsrs	r3, r3, #1
 800bb7e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800bb80:	2300      	movs	r3, #0
 800bb82:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800bb84:	2300      	movs	r3, #0
 800bb86:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800bb88:	e005      	b.n	800bb96 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800bb8a:	7bfb      	ldrb	r3, [r7, #15]
 800bb8c:	089b      	lsrs	r3, r3, #2
 800bb8e:	73fb      	strb	r3, [r7, #15]
            exp++;
 800bb90:	7bbb      	ldrb	r3, [r7, #14]
 800bb92:	3301      	adds	r3, #1
 800bb94:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800bb96:	7bfb      	ldrb	r3, [r7, #15]
 800bb98:	2b1f      	cmp	r3, #31
 800bb9a:	d8f6      	bhi.n	800bb8a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
 800bb9e:	00db      	lsls	r3, r3, #3
 800bba0:	b2da      	uxtb	r2, r3
 800bba2:	7bbb      	ldrb	r3, [r7, #14]
 800bba4:	4413      	add	r3, r2
 800bba6:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800bba8:	7b7b      	ldrb	r3, [r7, #13]
 800bbaa:	4619      	mov	r1, r3
 800bbac:	f240 7006 	movw	r0, #1798	; 0x706
 800bbb0:	f000 fc12 	bl	800c3d8 <SUBGRF_WriteRegister>
    }
}
 800bbb4:	bf00      	nop
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800bbc2:	f7f7 fad6 	bl	8003172 <RBI_IsDCDC>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d102      	bne.n	800bbd2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	71fb      	strb	r3, [r7, #7]
 800bbd0:	e001      	b.n	800bbd6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800bbd6:	1dfb      	adds	r3, r7, #7
 800bbd8:	2201      	movs	r2, #1
 800bbda:	4619      	mov	r1, r3
 800bbdc:	2096      	movs	r0, #150	; 0x96
 800bbde:	f000 fcab 	bl	800c538 <SUBGRF_WriteCommand>
}
 800bbe2:	bf00      	nop
 800bbe4:	3708      	adds	r7, #8
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b084      	sub	sp, #16
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800bbf2:	793b      	ldrb	r3, [r7, #4]
 800bbf4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	019b      	lsls	r3, r3, #6
 800bbfc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800bbfe:	793b      	ldrb	r3, [r7, #4]
 800bc00:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800bc08:	b25b      	sxtb	r3, r3
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800bc0e:	793b      	ldrb	r3, [r7, #4]
 800bc10:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800bc18:	b25b      	sxtb	r3, r3
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800bc1e:	793b      	ldrb	r3, [r7, #4]
 800bc20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bc24:	b2db      	uxtb	r3, r3
 800bc26:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800bc28:	b25b      	sxtb	r3, r3
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800bc2e:	793b      	ldrb	r3, [r7, #4]
 800bc30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800bc38:	b25b      	sxtb	r3, r3
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800bc3e:	793b      	ldrb	r3, [r7, #4]
 800bc40:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800bc48:	b25b      	sxtb	r3, r3
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800bc4e:	793b      	ldrb	r3, [r7, #4]
 800bc50:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	b25b      	sxtb	r3, r3
 800bc5c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800bc5e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800bc60:	f107 030f 	add.w	r3, r7, #15
 800bc64:	2201      	movs	r2, #1
 800bc66:	4619      	mov	r1, r3
 800bc68:	2089      	movs	r0, #137	; 0x89
 800bc6a:	f000 fc65 	bl	800c538 <SUBGRF_WriteCommand>
}
 800bc6e:	bf00      	nop
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
	...

0800bc78 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4a1b      	ldr	r2, [pc, #108]	; (800bcf0 <SUBGRF_CalibrateImage+0x78>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d904      	bls.n	800bc92 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800bc88:	23e1      	movs	r3, #225	; 0xe1
 800bc8a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800bc8c:	23e9      	movs	r3, #233	; 0xe9
 800bc8e:	737b      	strb	r3, [r7, #13]
 800bc90:	e022      	b.n	800bcd8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4a17      	ldr	r2, [pc, #92]	; (800bcf4 <SUBGRF_CalibrateImage+0x7c>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d904      	bls.n	800bca4 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800bc9a:	23d7      	movs	r3, #215	; 0xd7
 800bc9c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800bc9e:	23db      	movs	r3, #219	; 0xdb
 800bca0:	737b      	strb	r3, [r7, #13]
 800bca2:	e019      	b.n	800bcd8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	4a14      	ldr	r2, [pc, #80]	; (800bcf8 <SUBGRF_CalibrateImage+0x80>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d904      	bls.n	800bcb6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800bcac:	23c1      	movs	r3, #193	; 0xc1
 800bcae:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800bcb0:	23c5      	movs	r3, #197	; 0xc5
 800bcb2:	737b      	strb	r3, [r7, #13]
 800bcb4:	e010      	b.n	800bcd8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4a10      	ldr	r2, [pc, #64]	; (800bcfc <SUBGRF_CalibrateImage+0x84>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d904      	bls.n	800bcc8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800bcbe:	2375      	movs	r3, #117	; 0x75
 800bcc0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800bcc2:	2381      	movs	r3, #129	; 0x81
 800bcc4:	737b      	strb	r3, [r7, #13]
 800bcc6:	e007      	b.n	800bcd8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a0d      	ldr	r2, [pc, #52]	; (800bd00 <SUBGRF_CalibrateImage+0x88>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d903      	bls.n	800bcd8 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 800bcd0:	236b      	movs	r3, #107	; 0x6b
 800bcd2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800bcd4:	236f      	movs	r3, #111	; 0x6f
 800bcd6:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800bcd8:	f107 030c 	add.w	r3, r7, #12
 800bcdc:	2202      	movs	r2, #2
 800bcde:	4619      	mov	r1, r3
 800bce0:	2098      	movs	r0, #152	; 0x98
 800bce2:	f000 fc29 	bl	800c538 <SUBGRF_WriteCommand>
}
 800bce6:	bf00      	nop
 800bce8:	3710      	adds	r7, #16
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	35a4e900 	.word	0x35a4e900
 800bcf4:	32a9f880 	.word	0x32a9f880
 800bcf8:	2de54480 	.word	0x2de54480
 800bcfc:	1b6b0b00 	.word	0x1b6b0b00
 800bd00:	1954fc40 	.word	0x1954fc40

0800bd04 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800bd04:	b590      	push	{r4, r7, lr}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	4608      	mov	r0, r1
 800bd0e:	4611      	mov	r1, r2
 800bd10:	461a      	mov	r2, r3
 800bd12:	4623      	mov	r3, r4
 800bd14:	71fb      	strb	r3, [r7, #7]
 800bd16:	4603      	mov	r3, r0
 800bd18:	71bb      	strb	r3, [r7, #6]
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	717b      	strb	r3, [r7, #5]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800bd26:	79bb      	ldrb	r3, [r7, #6]
 800bd28:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800bd2a:	797b      	ldrb	r3, [r7, #5]
 800bd2c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800bd2e:	793b      	ldrb	r3, [r7, #4]
 800bd30:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800bd32:	f107 030c 	add.w	r3, r7, #12
 800bd36:	2204      	movs	r2, #4
 800bd38:	4619      	mov	r1, r3
 800bd3a:	2095      	movs	r0, #149	; 0x95
 800bd3c:	f000 fbfc 	bl	800c538 <SUBGRF_WriteCommand>
}
 800bd40:	bf00      	nop
 800bd42:	3714      	adds	r7, #20
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd90      	pop	{r4, r7, pc}

0800bd48 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800bd48:	b590      	push	{r4, r7, lr}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	4604      	mov	r4, r0
 800bd50:	4608      	mov	r0, r1
 800bd52:	4611      	mov	r1, r2
 800bd54:	461a      	mov	r2, r3
 800bd56:	4623      	mov	r3, r4
 800bd58:	80fb      	strh	r3, [r7, #6]
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	80bb      	strh	r3, [r7, #4]
 800bd5e:	460b      	mov	r3, r1
 800bd60:	807b      	strh	r3, [r7, #2]
 800bd62:	4613      	mov	r3, r2
 800bd64:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800bd66:	88fb      	ldrh	r3, [r7, #6]
 800bd68:	0a1b      	lsrs	r3, r3, #8
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800bd70:	88fb      	ldrh	r3, [r7, #6]
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800bd76:	88bb      	ldrh	r3, [r7, #4]
 800bd78:	0a1b      	lsrs	r3, r3, #8
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800bd80:	88bb      	ldrh	r3, [r7, #4]
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800bd86:	887b      	ldrh	r3, [r7, #2]
 800bd88:	0a1b      	lsrs	r3, r3, #8
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800bd90:	887b      	ldrh	r3, [r7, #2]
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800bd96:	883b      	ldrh	r3, [r7, #0]
 800bd98:	0a1b      	lsrs	r3, r3, #8
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800bda0:	883b      	ldrh	r3, [r7, #0]
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800bda6:	f107 0308 	add.w	r3, r7, #8
 800bdaa:	2208      	movs	r2, #8
 800bdac:	4619      	mov	r1, r3
 800bdae:	2008      	movs	r0, #8
 800bdb0:	f000 fbc2 	bl	800c538 <SUBGRF_WriteCommand>
}
 800bdb4:	bf00      	nop
 800bdb6:	3714      	adds	r7, #20
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd90      	pop	{r4, r7, pc}

0800bdbc <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	6039      	str	r1, [r7, #0]
 800bdc6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800bdc8:	79fb      	ldrb	r3, [r7, #7]
 800bdca:	f003 0307 	and.w	r3, r3, #7
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	0c1b      	lsrs	r3, r3, #16
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	0a1b      	lsrs	r3, r3, #8
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800bde8:	f107 030c 	add.w	r3, r7, #12
 800bdec:	2204      	movs	r2, #4
 800bdee:	4619      	mov	r1, r3
 800bdf0:	2097      	movs	r0, #151	; 0x97
 800bdf2:	f000 fba1 	bl	800c538 <SUBGRF_WriteCommand>
}
 800bdf6:	bf00      	nop
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
	...

0800be00 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800be00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800be04:	b084      	sub	sp, #16
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800be0a:	2300      	movs	r3, #0
 800be0c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800be0e:	4b1d      	ldr	r3, [pc, #116]	; (800be84 <SUBGRF_SetRfFrequency+0x84>)
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	f083 0301 	eor.w	r3, r3, #1
 800be16:	b2db      	uxtb	r3, r3
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d005      	beq.n	800be28 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f7ff ff2b 	bl	800bc78 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800be22:	4b18      	ldr	r3, [pc, #96]	; (800be84 <SUBGRF_SetRfFrequency+0x84>)
 800be24:	2201      	movs	r2, #1
 800be26:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	461c      	mov	r4, r3
 800be2e:	4615      	mov	r5, r2
 800be30:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800be34:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800be38:	4a13      	ldr	r2, [pc, #76]	; (800be88 <SUBGRF_SetRfFrequency+0x88>)
 800be3a:	f04f 0300 	mov.w	r3, #0
 800be3e:	4640      	mov	r0, r8
 800be40:	4649      	mov	r1, r9
 800be42:	f7f5 f9ad 	bl	80011a0 <__aeabi_uldivmod>
 800be46:	4602      	mov	r2, r0
 800be48:	460b      	mov	r3, r1
 800be4a:	4613      	mov	r3, r2
 800be4c:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	0e1b      	lsrs	r3, r3, #24
 800be52:	b2db      	uxtb	r3, r3
 800be54:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	0c1b      	lsrs	r3, r3, #16
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	0a1b      	lsrs	r3, r3, #8
 800be62:	b2db      	uxtb	r3, r3
 800be64:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800be6c:	f107 0308 	add.w	r3, r7, #8
 800be70:	2204      	movs	r2, #4
 800be72:	4619      	mov	r1, r3
 800be74:	2086      	movs	r0, #134	; 0x86
 800be76:	f000 fb5f 	bl	800c538 <SUBGRF_WriteCommand>
}
 800be7a:	bf00      	nop
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800be84:	200005e4 	.word	0x200005e4
 800be88:	01e84800 	.word	0x01e84800

0800be8c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	4603      	mov	r3, r0
 800be94:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800be96:	79fa      	ldrb	r2, [r7, #7]
 800be98:	4b09      	ldr	r3, [pc, #36]	; (800bec0 <SUBGRF_SetPacketType+0x34>)
 800be9a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800be9c:	79fb      	ldrb	r3, [r7, #7]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d104      	bne.n	800beac <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800bea2:	2100      	movs	r1, #0
 800bea4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800bea8:	f000 fa96 	bl	800c3d8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800beac:	1dfb      	adds	r3, r7, #7
 800beae:	2201      	movs	r2, #1
 800beb0:	4619      	mov	r1, r3
 800beb2:	208a      	movs	r0, #138	; 0x8a
 800beb4:	f000 fb40 	bl	800c538 <SUBGRF_WriteCommand>
}
 800beb8:	bf00      	nop
 800beba:	3708      	adds	r7, #8
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	200005dd 	.word	0x200005dd

0800bec4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800bec4:	b480      	push	{r7}
 800bec6:	af00      	add	r7, sp, #0
    return PacketType;
 800bec8:	4b02      	ldr	r3, [pc, #8]	; (800bed4 <SUBGRF_GetPacketType+0x10>)
 800beca:	781b      	ldrb	r3, [r3, #0]
}
 800becc:	4618      	mov	r0, r3
 800bece:	46bd      	mov	sp, r7
 800bed0:	bc80      	pop	{r7}
 800bed2:	4770      	bx	lr
 800bed4:	200005dd 	.word	0x200005dd

0800bed8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	4603      	mov	r3, r0
 800bee0:	71fb      	strb	r3, [r7, #7]
 800bee2:	460b      	mov	r3, r1
 800bee4:	71bb      	strb	r3, [r7, #6]
 800bee6:	4613      	mov	r3, r2
 800bee8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 800beea:	79fb      	ldrb	r3, [r7, #7]
 800beec:	2b01      	cmp	r3, #1
 800beee:	d124      	bne.n	800bf3a <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 800bef0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800bef4:	2b0f      	cmp	r3, #15
 800bef6:	d106      	bne.n	800bf06 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 800bef8:	2301      	movs	r3, #1
 800befa:	2201      	movs	r2, #1
 800befc:	2100      	movs	r1, #0
 800befe:	2006      	movs	r0, #6
 800bf00:	f7ff ff00 	bl	800bd04 <SUBGRF_SetPaConfig>
 800bf04:	e005      	b.n	800bf12 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 800bf06:	2301      	movs	r3, #1
 800bf08:	2201      	movs	r2, #1
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	2004      	movs	r0, #4
 800bf0e:	f7ff fef9 	bl	800bd04 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 800bf12:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800bf16:	2b0d      	cmp	r3, #13
 800bf18:	dd02      	ble.n	800bf20 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 800bf1a:	230e      	movs	r3, #14
 800bf1c:	71bb      	strb	r3, [r7, #6]
 800bf1e:	e006      	b.n	800bf2e <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 800bf20:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800bf24:	f113 0f11 	cmn.w	r3, #17
 800bf28:	da01      	bge.n	800bf2e <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 800bf2a:	23ef      	movs	r3, #239	; 0xef
 800bf2c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 800bf2e:	2118      	movs	r1, #24
 800bf30:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800bf34:	f000 fa50 	bl	800c3d8 <SUBGRF_WriteRegister>
 800bf38:	e025      	b.n	800bf86 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 800bf3a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800bf3e:	f000 fa5f 	bl	800c400 <SUBGRF_ReadRegister>
 800bf42:	4603      	mov	r3, r0
 800bf44:	f043 031e 	orr.w	r3, r3, #30
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800bf50:	f000 fa42 	bl	800c3d8 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 800bf54:	2301      	movs	r3, #1
 800bf56:	2200      	movs	r2, #0
 800bf58:	2107      	movs	r1, #7
 800bf5a:	2004      	movs	r0, #4
 800bf5c:	f7ff fed2 	bl	800bd04 <SUBGRF_SetPaConfig>
        if( power > 22 )
 800bf60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800bf64:	2b16      	cmp	r3, #22
 800bf66:	dd02      	ble.n	800bf6e <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 800bf68:	2316      	movs	r3, #22
 800bf6a:	71bb      	strb	r3, [r7, #6]
 800bf6c:	e006      	b.n	800bf7c <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 800bf6e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800bf72:	f113 0f09 	cmn.w	r3, #9
 800bf76:	da01      	bge.n	800bf7c <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 800bf78:	23f7      	movs	r3, #247	; 0xf7
 800bf7a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 800bf7c:	2138      	movs	r1, #56	; 0x38
 800bf7e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800bf82:	f000 fa29 	bl	800c3d8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800bf86:	79bb      	ldrb	r3, [r7, #6]
 800bf88:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 800bf8a:	797b      	ldrb	r3, [r7, #5]
 800bf8c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800bf8e:	f107 030c 	add.w	r3, r7, #12
 800bf92:	2202      	movs	r2, #2
 800bf94:	4619      	mov	r1, r3
 800bf96:	208e      	movs	r0, #142	; 0x8e
 800bf98:	f000 face 	bl	800c538 <SUBGRF_WriteCommand>
}
 800bf9c:	bf00      	nop
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800bfa4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bfa8:	b086      	sub	sp, #24
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800bfb2:	4a61      	ldr	r2, [pc, #388]	; (800c138 <SUBGRF_SetModulationParams+0x194>)
 800bfb4:	f107 0308 	add.w	r3, r7, #8
 800bfb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bfbc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	781a      	ldrb	r2, [r3, #0]
 800bfc4:	4b5d      	ldr	r3, [pc, #372]	; (800c13c <SUBGRF_SetModulationParams+0x198>)
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d004      	beq.n	800bfd6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7ff ff5b 	bl	800be8c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	2b03      	cmp	r3, #3
 800bfdc:	f200 80a5 	bhi.w	800c12a <SUBGRF_SetModulationParams+0x186>
 800bfe0:	a201      	add	r2, pc, #4	; (adr r2, 800bfe8 <SUBGRF_SetModulationParams+0x44>)
 800bfe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe6:	bf00      	nop
 800bfe8:	0800bff9 	.word	0x0800bff9
 800bfec:	0800c0b9 	.word	0x0800c0b9
 800bff0:	0800c07b 	.word	0x0800c07b
 800bff4:	0800c0e7 	.word	0x0800c0e7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800bff8:	2308      	movs	r3, #8
 800bffa:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	4a4f      	ldr	r2, [pc, #316]	; (800c140 <SUBGRF_SetModulationParams+0x19c>)
 800c002:	fbb2 f3f3 	udiv	r3, r2, r3
 800c006:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	0c1b      	lsrs	r3, r3, #16
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	0a1b      	lsrs	r3, r3, #8
 800c014:	b2db      	uxtb	r3, r3
 800c016:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	7b1b      	ldrb	r3, [r3, #12]
 800c022:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	7b5b      	ldrb	r3, [r3, #13]
 800c028:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	689b      	ldr	r3, [r3, #8]
 800c02e:	2200      	movs	r2, #0
 800c030:	461c      	mov	r4, r3
 800c032:	4615      	mov	r5, r2
 800c034:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800c038:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800c03c:	4a41      	ldr	r2, [pc, #260]	; (800c144 <SUBGRF_SetModulationParams+0x1a0>)
 800c03e:	f04f 0300 	mov.w	r3, #0
 800c042:	4640      	mov	r0, r8
 800c044:	4649      	mov	r1, r9
 800c046:	f7f5 f8ab 	bl	80011a0 <__aeabi_uldivmod>
 800c04a:	4602      	mov	r2, r0
 800c04c:	460b      	mov	r3, r1
 800c04e:	4613      	mov	r3, r2
 800c050:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	0c1b      	lsrs	r3, r3, #16
 800c056:	b2db      	uxtb	r3, r3
 800c058:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	0a1b      	lsrs	r3, r3, #8
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	b2db      	uxtb	r3, r3
 800c066:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c068:	7cfb      	ldrb	r3, [r7, #19]
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	f107 0308 	add.w	r3, r7, #8
 800c070:	4619      	mov	r1, r3
 800c072:	208b      	movs	r0, #139	; 0x8b
 800c074:	f000 fa60 	bl	800c538 <SUBGRF_WriteCommand>
        break;
 800c078:	e058      	b.n	800c12c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800c07a:	2304      	movs	r3, #4
 800c07c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	4a2f      	ldr	r2, [pc, #188]	; (800c140 <SUBGRF_SetModulationParams+0x19c>)
 800c084:	fbb2 f3f3 	udiv	r3, r2, r3
 800c088:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	0c1b      	lsrs	r3, r3, #16
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	0a1b      	lsrs	r3, r3, #8
 800c096:	b2db      	uxtb	r3, r3
 800c098:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	7d1b      	ldrb	r3, [r3, #20]
 800c0a4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c0a6:	7cfb      	ldrb	r3, [r7, #19]
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	f107 0308 	add.w	r3, r7, #8
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	208b      	movs	r0, #139	; 0x8b
 800c0b2:	f000 fa41 	bl	800c538 <SUBGRF_WriteCommand>
        break;
 800c0b6:	e039      	b.n	800c12c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800c0b8:	2304      	movs	r3, #4
 800c0ba:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	7e1b      	ldrb	r3, [r3, #24]
 800c0c0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	7e5b      	ldrb	r3, [r3, #25]
 800c0c6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	7e9b      	ldrb	r3, [r3, #26]
 800c0cc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	7edb      	ldrb	r3, [r3, #27]
 800c0d2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c0d4:	7cfb      	ldrb	r3, [r7, #19]
 800c0d6:	b29a      	uxth	r2, r3
 800c0d8:	f107 0308 	add.w	r3, r7, #8
 800c0dc:	4619      	mov	r1, r3
 800c0de:	208b      	movs	r0, #139	; 0x8b
 800c0e0:	f000 fa2a 	bl	800c538 <SUBGRF_WriteCommand>

        break;
 800c0e4:	e022      	b.n	800c12c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800c0e6:	2305      	movs	r3, #5
 800c0e8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	4a14      	ldr	r2, [pc, #80]	; (800c140 <SUBGRF_SetModulationParams+0x19c>)
 800c0f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0f4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	0c1b      	lsrs	r3, r3, #16
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	0a1b      	lsrs	r3, r3, #8
 800c102:	b2db      	uxtb	r3, r3
 800c104:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	7b1b      	ldrb	r3, [r3, #12]
 800c110:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	7b5b      	ldrb	r3, [r3, #13]
 800c116:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c118:	7cfb      	ldrb	r3, [r7, #19]
 800c11a:	b29a      	uxth	r2, r3
 800c11c:	f107 0308 	add.w	r3, r7, #8
 800c120:	4619      	mov	r1, r3
 800c122:	208b      	movs	r0, #139	; 0x8b
 800c124:	f000 fa08 	bl	800c538 <SUBGRF_WriteCommand>
        break;
 800c128:	e000      	b.n	800c12c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800c12a:	bf00      	nop
    }
}
 800c12c:	bf00      	nop
 800c12e:	3718      	adds	r7, #24
 800c130:	46bd      	mov	sp, r7
 800c132:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c136:	bf00      	nop
 800c138:	08010af0 	.word	0x08010af0
 800c13c:	200005dd 	.word	0x200005dd
 800c140:	3d090000 	.word	0x3d090000
 800c144:	01e84800 	.word	0x01e84800

0800c148 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b086      	sub	sp, #24
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800c150:	2300      	movs	r3, #0
 800c152:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800c154:	4a48      	ldr	r2, [pc, #288]	; (800c278 <SUBGRF_SetPacketParams+0x130>)
 800c156:	f107 030c 	add.w	r3, r7, #12
 800c15a:	ca07      	ldmia	r2, {r0, r1, r2}
 800c15c:	c303      	stmia	r3!, {r0, r1}
 800c15e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	781a      	ldrb	r2, [r3, #0]
 800c164:	4b45      	ldr	r3, [pc, #276]	; (800c27c <SUBGRF_SetPacketParams+0x134>)
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d004      	beq.n	800c176 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	4618      	mov	r0, r3
 800c172:	f7ff fe8b 	bl	800be8c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	2b03      	cmp	r3, #3
 800c17c:	d878      	bhi.n	800c270 <SUBGRF_SetPacketParams+0x128>
 800c17e:	a201      	add	r2, pc, #4	; (adr r2, 800c184 <SUBGRF_SetPacketParams+0x3c>)
 800c180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c184:	0800c195 	.word	0x0800c195
 800c188:	0800c225 	.word	0x0800c225
 800c18c:	0800c219 	.word	0x0800c219
 800c190:	0800c195 	.word	0x0800c195
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	7a5b      	ldrb	r3, [r3, #9]
 800c198:	2bf1      	cmp	r3, #241	; 0xf1
 800c19a:	d10a      	bne.n	800c1b2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800c19c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c1a0:	f7ff fb16 	bl	800b7d0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800c1a4:	f248 0005 	movw	r0, #32773	; 0x8005
 800c1a8:	f7ff fb32 	bl	800b810 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800c1ac:	2302      	movs	r3, #2
 800c1ae:	75bb      	strb	r3, [r7, #22]
 800c1b0:	e011      	b.n	800c1d6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	7a5b      	ldrb	r3, [r3, #9]
 800c1b6:	2bf2      	cmp	r3, #242	; 0xf2
 800c1b8:	d10a      	bne.n	800c1d0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800c1ba:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800c1be:	f7ff fb07 	bl	800b7d0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800c1c2:	f241 0021 	movw	r0, #4129	; 0x1021
 800c1c6:	f7ff fb23 	bl	800b810 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800c1ca:	2306      	movs	r3, #6
 800c1cc:	75bb      	strb	r3, [r7, #22]
 800c1ce:	e002      	b.n	800c1d6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	7a5b      	ldrb	r3, [r3, #9]
 800c1d4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800c1d6:	2309      	movs	r3, #9
 800c1d8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	885b      	ldrh	r3, [r3, #2]
 800c1de:	0a1b      	lsrs	r3, r3, #8
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	885b      	ldrh	r3, [r3, #2]
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	791b      	ldrb	r3, [r3, #4]
 800c1f2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	795b      	ldrb	r3, [r3, #5]
 800c1f8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	799b      	ldrb	r3, [r3, #6]
 800c1fe:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	79db      	ldrb	r3, [r3, #7]
 800c204:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	7a1b      	ldrb	r3, [r3, #8]
 800c20a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800c20c:	7dbb      	ldrb	r3, [r7, #22]
 800c20e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	7a9b      	ldrb	r3, [r3, #10]
 800c214:	753b      	strb	r3, [r7, #20]
        break;
 800c216:	e022      	b.n	800c25e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800c218:	2301      	movs	r3, #1
 800c21a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	7b1b      	ldrb	r3, [r3, #12]
 800c220:	733b      	strb	r3, [r7, #12]
        break;
 800c222:	e01c      	b.n	800c25e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800c224:	2306      	movs	r3, #6
 800c226:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	89db      	ldrh	r3, [r3, #14]
 800c22c:	0a1b      	lsrs	r3, r3, #8
 800c22e:	b29b      	uxth	r3, r3
 800c230:	b2db      	uxtb	r3, r3
 800c232:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	89db      	ldrh	r3, [r3, #14]
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	7c1a      	ldrb	r2, [r3, #16]
 800c240:	4b0f      	ldr	r3, [pc, #60]	; (800c280 <SUBGRF_SetPacketParams+0x138>)
 800c242:	4611      	mov	r1, r2
 800c244:	7019      	strb	r1, [r3, #0]
 800c246:	4613      	mov	r3, r2
 800c248:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	7c5b      	ldrb	r3, [r3, #17]
 800c24e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	7c9b      	ldrb	r3, [r3, #18]
 800c254:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	7cdb      	ldrb	r3, [r3, #19]
 800c25a:	747b      	strb	r3, [r7, #17]
        break;
 800c25c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800c25e:	7dfb      	ldrb	r3, [r7, #23]
 800c260:	b29a      	uxth	r2, r3
 800c262:	f107 030c 	add.w	r3, r7, #12
 800c266:	4619      	mov	r1, r3
 800c268:	208c      	movs	r0, #140	; 0x8c
 800c26a:	f000 f965 	bl	800c538 <SUBGRF_WriteCommand>
 800c26e:	e000      	b.n	800c272 <SUBGRF_SetPacketParams+0x12a>
        return;
 800c270:	bf00      	nop
}
 800c272:	3718      	adds	r7, #24
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	08010af8 	.word	0x08010af8
 800c27c:	200005dd 	.word	0x200005dd
 800c280:	200005de 	.word	0x200005de

0800c284 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	4603      	mov	r3, r0
 800c28c:	460a      	mov	r2, r1
 800c28e:	71fb      	strb	r3, [r7, #7]
 800c290:	4613      	mov	r3, r2
 800c292:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800c294:	79fb      	ldrb	r3, [r7, #7]
 800c296:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800c298:	79bb      	ldrb	r3, [r7, #6]
 800c29a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800c29c:	f107 030c 	add.w	r3, r7, #12
 800c2a0:	2202      	movs	r2, #2
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	208f      	movs	r0, #143	; 0x8f
 800c2a6:	f000 f947 	bl	800c538 <SUBGRF_WriteCommand>
}
 800c2aa:	bf00      	nop
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b082      	sub	sp, #8
 800c2b6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800c2bc:	1d3b      	adds	r3, r7, #4
 800c2be:	2201      	movs	r2, #1
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	2015      	movs	r0, #21
 800c2c4:	f000 f95a 	bl	800c57c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800c2c8:	793b      	ldrb	r3, [r7, #4]
 800c2ca:	425b      	negs	r3, r3
 800c2cc:	105b      	asrs	r3, r3, #1
 800c2ce:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800c2d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3708      	adds	r7, #8
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800c2e6:	f107 030c 	add.w	r3, r7, #12
 800c2ea:	2202      	movs	r2, #2
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	2013      	movs	r0, #19
 800c2f0:	f000 f944 	bl	800c57c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800c2f4:	f7ff fde6 	bl	800bec4 <SUBGRF_GetPacketType>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d10d      	bne.n	800c31a <SUBGRF_GetRxBufferStatus+0x3e>
 800c2fe:	4b0c      	ldr	r3, [pc, #48]	; (800c330 <SUBGRF_GetRxBufferStatus+0x54>)
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	b2db      	uxtb	r3, r3
 800c304:	2b01      	cmp	r3, #1
 800c306:	d108      	bne.n	800c31a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800c308:	f240 7002 	movw	r0, #1794	; 0x702
 800c30c:	f000 f878 	bl	800c400 <SUBGRF_ReadRegister>
 800c310:	4603      	mov	r3, r0
 800c312:	461a      	mov	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	701a      	strb	r2, [r3, #0]
 800c318:	e002      	b.n	800c320 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800c31a:	7b3a      	ldrb	r2, [r7, #12]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800c320:	7b7a      	ldrb	r2, [r7, #13]
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	701a      	strb	r2, [r3, #0]
}
 800c326:	bf00      	nop
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	200005de 	.word	0x200005de

0800c334 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800c33c:	f107 030c 	add.w	r3, r7, #12
 800c340:	2203      	movs	r2, #3
 800c342:	4619      	mov	r1, r3
 800c344:	2014      	movs	r0, #20
 800c346:	f000 f919 	bl	800c57c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800c34a:	f7ff fdbb 	bl	800bec4 <SUBGRF_GetPacketType>
 800c34e:	4603      	mov	r3, r0
 800c350:	461a      	mov	r2, r3
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d002      	beq.n	800c364 <SUBGRF_GetPacketStatus+0x30>
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d013      	beq.n	800c38a <SUBGRF_GetPacketStatus+0x56>
 800c362:	e02a      	b.n	800c3ba <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800c364:	7b3a      	ldrb	r2, [r7, #12]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800c36a:	7b7b      	ldrb	r3, [r7, #13]
 800c36c:	425b      	negs	r3, r3
 800c36e:	105b      	asrs	r3, r3, #1
 800c370:	b25a      	sxtb	r2, r3
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800c376:	7bbb      	ldrb	r3, [r7, #14]
 800c378:	425b      	negs	r3, r3
 800c37a:	105b      	asrs	r3, r3, #1
 800c37c:	b25a      	sxtb	r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	609a      	str	r2, [r3, #8]
            break;
 800c388:	e020      	b.n	800c3cc <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800c38a:	7b3b      	ldrb	r3, [r7, #12]
 800c38c:	425b      	negs	r3, r3
 800c38e:	105b      	asrs	r3, r3, #1
 800c390:	b25a      	sxtb	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800c396:	7b7b      	ldrb	r3, [r7, #13]
 800c398:	b25b      	sxtb	r3, r3
 800c39a:	3302      	adds	r3, #2
 800c39c:	109b      	asrs	r3, r3, #2
 800c39e:	b25a      	sxtb	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800c3a4:	7bbb      	ldrb	r3, [r7, #14]
 800c3a6:	425b      	negs	r3, r3
 800c3a8:	105b      	asrs	r3, r3, #1
 800c3aa:	b25a      	sxtb	r2, r3
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800c3b0:	4b08      	ldr	r3, [pc, #32]	; (800c3d4 <SUBGRF_GetPacketStatus+0xa0>)
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	611a      	str	r2, [r3, #16]
            break;
 800c3b8:	e008      	b.n	800c3cc <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800c3ba:	2214      	movs	r2, #20
 800c3bc:	2100      	movs	r1, #0
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fe68 	bl	800d094 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	220f      	movs	r2, #15
 800c3c8:	701a      	strb	r2, [r3, #0]
            break;
 800c3ca:	bf00      	nop
    }
}
 800c3cc:	bf00      	nop
 800c3ce:	3710      	adds	r7, #16
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	200005e0 	.word	0x200005e0

0800c3d8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	4603      	mov	r3, r0
 800c3e0:	460a      	mov	r2, r1
 800c3e2:	80fb      	strh	r3, [r7, #6]
 800c3e4:	4613      	mov	r3, r2
 800c3e6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800c3e8:	1d7a      	adds	r2, r7, #5
 800c3ea:	88f9      	ldrh	r1, [r7, #6]
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	4803      	ldr	r0, [pc, #12]	; (800c3fc <SUBGRF_WriteRegister+0x24>)
 800c3f0:	f7fa fd3c 	bl	8006e6c <HAL_SUBGHZ_WriteRegisters>
}
 800c3f4:	bf00      	nop
 800c3f6:	3708      	adds	r7, #8
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	200002ac 	.word	0x200002ac

0800c400 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	4603      	mov	r3, r0
 800c408:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800c40a:	f107 020f 	add.w	r2, r7, #15
 800c40e:	88f9      	ldrh	r1, [r7, #6]
 800c410:	2301      	movs	r3, #1
 800c412:	4804      	ldr	r0, [pc, #16]	; (800c424 <SUBGRF_ReadRegister+0x24>)
 800c414:	f7fa fd89 	bl	8006f2a <HAL_SUBGHZ_ReadRegisters>
    return data;
 800c418:	7bfb      	ldrb	r3, [r7, #15]
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	200002ac 	.word	0x200002ac

0800c428 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b086      	sub	sp, #24
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	4603      	mov	r3, r0
 800c430:	6039      	str	r1, [r7, #0]
 800c432:	80fb      	strh	r3, [r7, #6]
 800c434:	4613      	mov	r3, r2
 800c436:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c438:	f3ef 8310 	mrs	r3, PRIMASK
 800c43c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c43e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c440:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c442:	b672      	cpsid	i
}
 800c444:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800c446:	88bb      	ldrh	r3, [r7, #4]
 800c448:	88f9      	ldrh	r1, [r7, #6]
 800c44a:	683a      	ldr	r2, [r7, #0]
 800c44c:	4806      	ldr	r0, [pc, #24]	; (800c468 <SUBGRF_WriteRegisters+0x40>)
 800c44e:	f7fa fd0d 	bl	8006e6c <HAL_SUBGHZ_WriteRegisters>
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	f383 8810 	msr	PRIMASK, r3
}
 800c45c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c45e:	bf00      	nop
 800c460:	3718      	adds	r7, #24
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	200002ac 	.word	0x200002ac

0800c46c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af00      	add	r7, sp, #0
 800c472:	4603      	mov	r3, r0
 800c474:	6039      	str	r1, [r7, #0]
 800c476:	80fb      	strh	r3, [r7, #6]
 800c478:	4613      	mov	r3, r2
 800c47a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c47c:	f3ef 8310 	mrs	r3, PRIMASK
 800c480:	60fb      	str	r3, [r7, #12]
  return(result);
 800c482:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c484:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c486:	b672      	cpsid	i
}
 800c488:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800c48a:	88bb      	ldrh	r3, [r7, #4]
 800c48c:	88f9      	ldrh	r1, [r7, #6]
 800c48e:	683a      	ldr	r2, [r7, #0]
 800c490:	4806      	ldr	r0, [pc, #24]	; (800c4ac <SUBGRF_ReadRegisters+0x40>)
 800c492:	f7fa fd4a 	bl	8006f2a <HAL_SUBGHZ_ReadRegisters>
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	f383 8810 	msr	PRIMASK, r3
}
 800c4a0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c4a2:	bf00      	nop
 800c4a4:	3718      	adds	r7, #24
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	200002ac 	.word	0x200002ac

0800c4b0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b086      	sub	sp, #24
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	6039      	str	r1, [r7, #0]
 800c4ba:	71fb      	strb	r3, [r7, #7]
 800c4bc:	4613      	mov	r3, r2
 800c4be:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4c0:	f3ef 8310 	mrs	r3, PRIMASK
 800c4c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c4c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c4ca:	b672      	cpsid	i
}
 800c4cc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800c4ce:	79bb      	ldrb	r3, [r7, #6]
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	79f9      	ldrb	r1, [r7, #7]
 800c4d4:	683a      	ldr	r2, [r7, #0]
 800c4d6:	4806      	ldr	r0, [pc, #24]	; (800c4f0 <SUBGRF_WriteBuffer+0x40>)
 800c4d8:	f7fa fe3b 	bl	8007152 <HAL_SUBGHZ_WriteBuffer>
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	f383 8810 	msr	PRIMASK, r3
}
 800c4e6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c4e8:	bf00      	nop
 800c4ea:	3718      	adds	r7, #24
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	200002ac 	.word	0x200002ac

0800c4f4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b086      	sub	sp, #24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	6039      	str	r1, [r7, #0]
 800c4fe:	71fb      	strb	r3, [r7, #7]
 800c500:	4613      	mov	r3, r2
 800c502:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c504:	f3ef 8310 	mrs	r3, PRIMASK
 800c508:	60fb      	str	r3, [r7, #12]
  return(result);
 800c50a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c50c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c50e:	b672      	cpsid	i
}
 800c510:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800c512:	79bb      	ldrb	r3, [r7, #6]
 800c514:	b29b      	uxth	r3, r3
 800c516:	79f9      	ldrb	r1, [r7, #7]
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	4806      	ldr	r0, [pc, #24]	; (800c534 <SUBGRF_ReadBuffer+0x40>)
 800c51c:	f7fa fe6c 	bl	80071f8 <HAL_SUBGHZ_ReadBuffer>
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	f383 8810 	msr	PRIMASK, r3
}
 800c52a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c52c:	bf00      	nop
 800c52e:	3718      	adds	r7, #24
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	200002ac 	.word	0x200002ac

0800c538 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b086      	sub	sp, #24
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	4603      	mov	r3, r0
 800c540:	6039      	str	r1, [r7, #0]
 800c542:	71fb      	strb	r3, [r7, #7]
 800c544:	4613      	mov	r3, r2
 800c546:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c548:	f3ef 8310 	mrs	r3, PRIMASK
 800c54c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c54e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c550:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c552:	b672      	cpsid	i
}
 800c554:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800c556:	88bb      	ldrh	r3, [r7, #4]
 800c558:	79f9      	ldrb	r1, [r7, #7]
 800c55a:	683a      	ldr	r2, [r7, #0]
 800c55c:	4806      	ldr	r0, [pc, #24]	; (800c578 <SUBGRF_WriteCommand+0x40>)
 800c55e:	f7fa fd45 	bl	8006fec <HAL_SUBGHZ_ExecSetCmd>
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	f383 8810 	msr	PRIMASK, r3
}
 800c56c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c56e:	bf00      	nop
 800c570:	3718      	adds	r7, #24
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	200002ac 	.word	0x200002ac

0800c57c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b086      	sub	sp, #24
 800c580:	af00      	add	r7, sp, #0
 800c582:	4603      	mov	r3, r0
 800c584:	6039      	str	r1, [r7, #0]
 800c586:	71fb      	strb	r3, [r7, #7]
 800c588:	4613      	mov	r3, r2
 800c58a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c58c:	f3ef 8310 	mrs	r3, PRIMASK
 800c590:	60fb      	str	r3, [r7, #12]
  return(result);
 800c592:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c594:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c596:	b672      	cpsid	i
}
 800c598:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800c59a:	88bb      	ldrh	r3, [r7, #4]
 800c59c:	79f9      	ldrb	r1, [r7, #7]
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	4806      	ldr	r0, [pc, #24]	; (800c5bc <SUBGRF_ReadCommand+0x40>)
 800c5a2:	f7fa fd82 	bl	80070aa <HAL_SUBGHZ_ExecGetCmd>
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	f383 8810 	msr	PRIMASK, r3
}
 800c5b0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c5b2:	bf00      	nop
 800c5b4:	3718      	adds	r7, #24
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	200002ac 	.word	0x200002ac

0800c5c0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	460a      	mov	r2, r1
 800c5ca:	71fb      	strb	r3, [r7, #7]
 800c5cc:	4613      	mov	r3, r2
 800c5ce:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800c5d4:	79bb      	ldrb	r3, [r7, #6]
 800c5d6:	2b01      	cmp	r3, #1
 800c5d8:	d10d      	bne.n	800c5f6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800c5da:	79fb      	ldrb	r3, [r7, #7]
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d104      	bne.n	800c5ea <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800c5e0:	2302      	movs	r3, #2
 800c5e2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800c5e4:	2004      	movs	r0, #4
 800c5e6:	f000 f8df 	bl	800c7a8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800c5ea:	79fb      	ldrb	r3, [r7, #7]
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	d107      	bne.n	800c600 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800c5f0:	2303      	movs	r3, #3
 800c5f2:	73fb      	strb	r3, [r7, #15]
 800c5f4:	e004      	b.n	800c600 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800c5f6:	79bb      	ldrb	r3, [r7, #6]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d101      	bne.n	800c600 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800c600:	7bfb      	ldrb	r3, [r7, #15]
 800c602:	4618      	mov	r0, r3
 800c604:	f7f6 fd99 	bl	800313a <RBI_ConfigRFSwitch>
}
 800c608:	bf00      	nop
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	4603      	mov	r3, r0
 800c618:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800c61a:	2301      	movs	r3, #1
 800c61c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800c61e:	f7f6 fd9a 	bl	8003156 <RBI_GetTxConfig>
 800c622:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	2b02      	cmp	r3, #2
 800c628:	d016      	beq.n	800c658 <SUBGRF_SetRfTxPower+0x48>
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	dc16      	bgt.n	800c65e <SUBGRF_SetRfTxPower+0x4e>
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d003      	beq.n	800c63e <SUBGRF_SetRfTxPower+0x2e>
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d00a      	beq.n	800c652 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800c63c:	e00f      	b.n	800c65e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800c63e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c642:	2b0f      	cmp	r3, #15
 800c644:	dd02      	ble.n	800c64c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800c646:	2302      	movs	r3, #2
 800c648:	73fb      	strb	r3, [r7, #15]
            break;
 800c64a:	e009      	b.n	800c660 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800c64c:	2301      	movs	r3, #1
 800c64e:	73fb      	strb	r3, [r7, #15]
            break;
 800c650:	e006      	b.n	800c660 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800c652:	2301      	movs	r3, #1
 800c654:	73fb      	strb	r3, [r7, #15]
            break;
 800c656:	e003      	b.n	800c660 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800c658:	2302      	movs	r3, #2
 800c65a:	73fb      	strb	r3, [r7, #15]
            break;
 800c65c:	e000      	b.n	800c660 <SUBGRF_SetRfTxPower+0x50>
            break;
 800c65e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800c660:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800c664:	7bfb      	ldrb	r3, [r7, #15]
 800c666:	2202      	movs	r2, #2
 800c668:	4618      	mov	r0, r3
 800c66a:	f7ff fc35 	bl	800bed8 <SUBGRF_SetTxParams>

    return paSelect;
 800c66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c670:	4618      	mov	r0, r3
 800c672:	3710      	adds	r7, #16
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800c678:	b480      	push	{r7}
 800c67a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800c67c:	2301      	movs	r3, #1
}
 800c67e:	4618      	mov	r0, r3
 800c680:	46bd      	mov	sp, r7
 800c682:	bc80      	pop	{r7}
 800c684:	4770      	bx	lr
	...

0800c688 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800c690:	4b03      	ldr	r3, [pc, #12]	; (800c6a0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2001      	movs	r0, #1
 800c696:	4798      	blx	r3
}
 800c698:	bf00      	nop
 800c69a:	3708      	adds	r7, #8
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	200005e8 	.word	0x200005e8

0800c6a4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800c6ac:	4b03      	ldr	r3, [pc, #12]	; (800c6bc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2002      	movs	r0, #2
 800c6b2:	4798      	blx	r3
}
 800c6b4:	bf00      	nop
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	200005e8 	.word	0x200005e8

0800c6c0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800c6c8:	4b03      	ldr	r3, [pc, #12]	; (800c6d8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2040      	movs	r0, #64	; 0x40
 800c6ce:	4798      	blx	r3
}
 800c6d0:	bf00      	nop
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	200005e8 	.word	0x200005e8

0800c6dc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800c6e8:	78fb      	ldrb	r3, [r7, #3]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d002      	beq.n	800c6f4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d005      	beq.n	800c6fe <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800c6f2:	e00a      	b.n	800c70a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800c6f4:	4b07      	ldr	r3, [pc, #28]	; (800c714 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2080      	movs	r0, #128	; 0x80
 800c6fa:	4798      	blx	r3
            break;
 800c6fc:	e005      	b.n	800c70a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800c6fe:	4b05      	ldr	r3, [pc, #20]	; (800c714 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c706:	4798      	blx	r3
            break;
 800c708:	bf00      	nop
    }
}
 800c70a:	bf00      	nop
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	200005e8 	.word	0x200005e8

0800c718 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800c720:	4b04      	ldr	r3, [pc, #16]	; (800c734 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c728:	4798      	blx	r3
}
 800c72a:	bf00      	nop
 800c72c:	3708      	adds	r7, #8
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	200005e8 	.word	0x200005e8

0800c738 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800c740:	4b03      	ldr	r3, [pc, #12]	; (800c750 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2020      	movs	r0, #32
 800c746:	4798      	blx	r3
}
 800c748:	bf00      	nop
 800c74a:	3708      	adds	r7, #8
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	200005e8 	.word	0x200005e8

0800c754 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800c75c:	4b03      	ldr	r3, [pc, #12]	; (800c76c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2004      	movs	r0, #4
 800c762:	4798      	blx	r3
}
 800c764:	bf00      	nop
 800c766:	3708      	adds	r7, #8
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}
 800c76c:	200005e8 	.word	0x200005e8

0800c770 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800c778:	4b03      	ldr	r3, [pc, #12]	; (800c788 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2008      	movs	r0, #8
 800c77e:	4798      	blx	r3
}
 800c780:	bf00      	nop
 800c782:	3708      	adds	r7, #8
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	200005e8 	.word	0x200005e8

0800c78c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800c794:	4b03      	ldr	r3, [pc, #12]	; (800c7a4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2010      	movs	r0, #16
 800c79a:	4798      	blx	r3
}
 800c79c:	bf00      	nop
 800c79e:	3708      	adds	r7, #8
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	200005e8 	.word	0x200005e8

0800c7a8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800c7b2:	f7f6 fcde 	bl	8003172 <RBI_IsDCDC>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d112      	bne.n	800c7e2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800c7bc:	f640 1023 	movw	r0, #2339	; 0x923
 800c7c0:	f7ff fe1e 	bl	800c400 <SUBGRF_ReadRegister>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800c7c8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ca:	f023 0306 	bic.w	r3, r3, #6
 800c7ce:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800c7d0:	7bfa      	ldrb	r2, [r7, #15]
 800c7d2:	79fb      	ldrb	r3, [r7, #7]
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	4619      	mov	r1, r3
 800c7da:	f640 1023 	movw	r0, #2339	; 0x923
 800c7de:	f7ff fdfb 	bl	800c3d8 <SUBGRF_WriteRegister>
  }
}
 800c7e2:	bf00      	nop
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
	...

0800c7ec <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b085      	sub	sp, #20
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d101      	bne.n	800c7fe <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800c7fa:	231f      	movs	r3, #31
 800c7fc:	e016      	b.n	800c82c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800c7fe:	2300      	movs	r3, #0
 800c800:	73fb      	strb	r3, [r7, #15]
 800c802:	e00f      	b.n	800c824 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800c804:	7bfb      	ldrb	r3, [r7, #15]
 800c806:	4a0c      	ldr	r2, [pc, #48]	; (800c838 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800c808:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d205      	bcs.n	800c81e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800c812:	7bfb      	ldrb	r3, [r7, #15]
 800c814:	4a08      	ldr	r2, [pc, #32]	; (800c838 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800c816:	00db      	lsls	r3, r3, #3
 800c818:	4413      	add	r3, r2
 800c81a:	791b      	ldrb	r3, [r3, #4]
 800c81c:	e006      	b.n	800c82c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800c81e:	7bfb      	ldrb	r3, [r7, #15]
 800c820:	3301      	adds	r3, #1
 800c822:	73fb      	strb	r3, [r7, #15]
 800c824:	7bfb      	ldrb	r3, [r7, #15]
 800c826:	2b15      	cmp	r3, #21
 800c828:	d9ec      	bls.n	800c804 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 800c82a:	e7fe      	b.n	800c82a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3714      	adds	r7, #20
 800c830:	46bd      	mov	sp, r7
 800c832:	bc80      	pop	{r7}
 800c834:	4770      	bx	lr
 800c836:	bf00      	nop
 800c838:	08010d18 	.word	0x08010d18

0800c83c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08a      	sub	sp, #40	; 0x28
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800c846:	4b35      	ldr	r3, [pc, #212]	; (800c91c <SUBGRF_GetCFO+0xe0>)
 800c848:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 800c84a:	f640 0007 	movw	r0, #2055	; 0x807
 800c84e:	f7ff fdd7 	bl	800c400 <SUBGRF_ReadRegister>
 800c852:	4603      	mov	r3, r0
 800c854:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800c856:	7ffb      	ldrb	r3, [r7, #31]
 800c858:	08db      	lsrs	r3, r3, #3
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	f003 0303 	and.w	r3, r3, #3
 800c860:	3328      	adds	r3, #40	; 0x28
 800c862:	443b      	add	r3, r7
 800c864:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800c868:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800c86a:	7ffb      	ldrb	r3, [r7, #31]
 800c86c:	f003 0307 	and.w	r3, r3, #7
 800c870:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 800c872:	7fba      	ldrb	r2, [r7, #30]
 800c874:	7f7b      	ldrb	r3, [r7, #29]
 800c876:	3b01      	subs	r3, #1
 800c878:	fa02 f303 	lsl.w	r3, r2, r3
 800c87c:	461a      	mov	r2, r3
 800c87e:	4b28      	ldr	r3, [pc, #160]	; (800c920 <SUBGRF_GetCFO+0xe4>)
 800c880:	fbb3 f3f2 	udiv	r3, r3, r2
 800c884:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800c886:	69ba      	ldr	r2, [r7, #24]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c88e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800c890:	2301      	movs	r3, #1
 800c892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800c896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c89a:	697a      	ldr	r2, [r7, #20]
 800c89c:	fb02 f303 	mul.w	r3, r2, r3
 800c8a0:	2b07      	cmp	r3, #7
 800c8a2:	d802      	bhi.n	800c8aa <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800c8a4:	2302      	movs	r3, #2
 800c8a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800c8aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8ae:	697a      	ldr	r2, [r7, #20]
 800c8b0:	fb02 f303 	mul.w	r3, r2, r3
 800c8b4:	2b03      	cmp	r3, #3
 800c8b6:	d802      	bhi.n	800c8be <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800c8b8:	2304      	movs	r3, #4
 800c8ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800c8be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c8c2:	69bb      	ldr	r3, [r7, #24]
 800c8c4:	fb02 f303 	mul.w	r3, r2, r3
 800c8c8:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 800c8ca:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800c8ce:	f7ff fd97 	bl	800c400 <SUBGRF_ReadRegister>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	021b      	lsls	r3, r3, #8
 800c8d6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c8da:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 800c8dc:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800c8e0:	f7ff fd8e 	bl	800c400 <SUBGRF_ReadRegister>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	6a3b      	ldr	r3, [r7, #32]
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800c8ee:	6a3b      	ldr	r3, [r7, #32]
 800c8f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d005      	beq.n	800c904 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800c8f8:	6a3b      	ldr	r3, [r7, #32]
 800c8fa:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800c8fe:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800c902:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	095b      	lsrs	r3, r3, #5
 800c908:	6a3a      	ldr	r2, [r7, #32]
 800c90a:	fb02 f303 	mul.w	r3, r2, r3
 800c90e:	11da      	asrs	r2, r3, #7
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	601a      	str	r2, [r3, #0]
}
 800c914:	bf00      	nop
 800c916:	3728      	adds	r7, #40	; 0x28
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	0c0a0804 	.word	0x0c0a0804
 800c920:	01e84800 	.word	0x01e84800

0800c924 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 800c924:	b480      	push	{r7}
 800c926:	b087      	sub	sp, #28
 800c928:	af00      	add	r7, sp, #0
 800c92a:	4603      	mov	r3, r0
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
 800c930:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 800c932:	2300      	movs	r3, #0
 800c934:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 800c936:	f04f 33ff 	mov.w	r3, #4294967295
 800c93a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800c93c:	697b      	ldr	r3, [r7, #20]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	371c      	adds	r7, #28
 800c942:	46bd      	mov	sp, r7
 800c944:	bc80      	pop	{r7}
 800c946:	4770      	bx	lr

0800c948 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 800c948:	b480      	push	{r7}
 800c94a:	b087      	sub	sp, #28
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	4603      	mov	r3, r0
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	607a      	str	r2, [r7, #4]
 800c954:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 800c956:	2300      	movs	r3, #0
 800c958:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 800c95a:	f04f 33ff 	mov.w	r3, #4294967295
 800c95e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800c960:	697b      	ldr	r3, [r7, #20]
}
 800c962:	4618      	mov	r0, r3
 800c964:	371c      	adds	r7, #28
 800c966:	46bd      	mov	sp, r7
 800c968:	bc80      	pop	{r7}
 800c96a:	4770      	bx	lr

0800c96c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b085      	sub	sp, #20
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 800c978:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3714      	adds	r7, #20
 800c980:	46bd      	mov	sp, r7
 800c982:	bc80      	pop	{r7}
 800c984:	4770      	bx	lr

0800c986 <RFW_DeInit>:

void RFW_DeInit( void)
{
 800c986:	b480      	push	{r7}
 800c988:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 800c98a:	bf00      	nop
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bc80      	pop	{r7}
 800c990:	4770      	bx	lr

0800c992 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 800c992:	b480      	push	{r7}
 800c994:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 800c996:	2300      	movs	r3, #0
#endif
}
 800c998:	4618      	mov	r0, r3
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bc80      	pop	{r7}
 800c99e:	4770      	bx	lr

0800c9a0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 800c9a4:	2300      	movs	r3, #0
#endif
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bc80      	pop	{r7}
 800c9ac:	4770      	bx	lr

0800c9ae <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 800c9ae:	b480      	push	{r7}
 800c9b0:	b083      	sub	sp, #12
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 800c9b8:	bf00      	nop
 800c9ba:	370c      	adds	r7, #12
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bc80      	pop	{r7}
 800c9c0:	4770      	bx	lr

0800c9c2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 800c9c2:	b480      	push	{r7}
 800c9c4:	b087      	sub	sp, #28
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	60f8      	str	r0, [r7, #12]
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	607a      	str	r2, [r7, #4]
 800c9ce:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 800c9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9d4:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 800c9d6:	697b      	ldr	r3, [r7, #20]
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	371c      	adds	r7, #28
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bc80      	pop	{r7}
 800c9e0:	4770      	bx	lr

0800c9e2 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800c9e2:	b480      	push	{r7}
 800c9e4:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 800c9e6:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bc80      	pop	{r7}
 800c9f0:	4770      	bx	lr

0800c9f2 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 800c9f2:	b480      	push	{r7}
 800c9f4:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800c9f6:	bf00      	nop
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bc80      	pop	{r7}
 800c9fc:	4770      	bx	lr

0800c9fe <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800c9fe:	b480      	push	{r7}
 800ca00:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 800ca02:	bf00      	nop
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bc80      	pop	{r7}
 800ca08:	4770      	bx	lr

0800ca0a <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 800ca0a:	b480      	push	{r7}
 800ca0c:	b083      	sub	sp, #12
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	4603      	mov	r3, r0
 800ca12:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 800ca14:	bf00      	nop
 800ca16:	370c      	adds	r7, #12
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bc80      	pop	{r7}
 800ca1c:	4770      	bx	lr
	...

0800ca20 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800ca24:	2218      	movs	r2, #24
 800ca26:	2100      	movs	r1, #0
 800ca28:	4807      	ldr	r0, [pc, #28]	; (800ca48 <UTIL_ADV_TRACE_Init+0x28>)
 800ca2a:	f000 fb33 	bl	800d094 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800ca2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca32:	2100      	movs	r1, #0
 800ca34:	4805      	ldr	r0, [pc, #20]	; (800ca4c <UTIL_ADV_TRACE_Init+0x2c>)
 800ca36:	f000 fb2d 	bl	800d094 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800ca3a:	4b05      	ldr	r3, [pc, #20]	; (800ca50 <UTIL_ADV_TRACE_Init+0x30>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4805      	ldr	r0, [pc, #20]	; (800ca54 <UTIL_ADV_TRACE_Init+0x34>)
 800ca40:	4798      	blx	r3
 800ca42:	4603      	mov	r3, r0
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	200005ec 	.word	0x200005ec
 800ca4c:	20000604 	.word	0x20000604
 800ca50:	08010bb4 	.word	0x08010bb4
 800ca54:	0800cc9d 	.word	0x0800cc9d

0800ca58 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800ca58:	b408      	push	{r3}
 800ca5a:	b580      	push	{r7, lr}
 800ca5c:	b08d      	sub	sp, #52	; 0x34
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	60f8      	str	r0, [r7, #12]
 800ca62:	60b9      	str	r1, [r7, #8]
 800ca64:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800ca66:	2300      	movs	r3, #0
 800ca68:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800ca6e:	4b37      	ldr	r3, [pc, #220]	; (800cb4c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800ca70:	7a1b      	ldrb	r3, [r3, #8]
 800ca72:	461a      	mov	r2, r3
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d902      	bls.n	800ca80 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800ca7a:	f06f 0304 	mvn.w	r3, #4
 800ca7e:	e05e      	b.n	800cb3e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800ca80:	4b32      	ldr	r3, [pc, #200]	; (800cb4c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800ca82:	68da      	ldr	r2, [r3, #12]
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	4013      	ands	r3, r2
 800ca88:	68ba      	ldr	r2, [r7, #8]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d002      	beq.n	800ca94 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800ca8e:	f06f 0305 	mvn.w	r3, #5
 800ca92:	e054      	b.n	800cb3e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800ca94:	4b2d      	ldr	r3, [pc, #180]	; (800cb4c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00a      	beq.n	800cab2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d007      	beq.n	800cab2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800caa2:	4b2a      	ldr	r3, [pc, #168]	; (800cb4c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	f107 0116 	add.w	r1, r7, #22
 800caaa:	f107 0218 	add.w	r2, r7, #24
 800caae:	4610      	mov	r0, r2
 800cab0:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800cab2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cab6:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800cab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cabc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cac0:	4823      	ldr	r0, [pc, #140]	; (800cb50 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800cac2:	f001 f8a9 	bl	800dc18 <tiny_vsnprintf_like>
 800cac6:	4603      	mov	r3, r0
 800cac8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 800caca:	f000 f9f1 	bl	800ceb0 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800cace:	8afa      	ldrh	r2, [r7, #22]
 800cad0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cad2:	4413      	add	r3, r2
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	f107 0214 	add.w	r2, r7, #20
 800cada:	4611      	mov	r1, r2
 800cadc:	4618      	mov	r0, r3
 800cade:	f000 f969 	bl	800cdb4 <TRACE_AllocateBufer>
 800cae2:	4603      	mov	r3, r0
 800cae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cae8:	d025      	beq.n	800cb36 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800caea:	2300      	movs	r3, #0
 800caec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800caee:	e00e      	b.n	800cb0e <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800caf0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800caf2:	8aba      	ldrh	r2, [r7, #20]
 800caf4:	3330      	adds	r3, #48	; 0x30
 800caf6:	443b      	add	r3, r7
 800caf8:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800cafc:	4b15      	ldr	r3, [pc, #84]	; (800cb54 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800cafe:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800cb00:	8abb      	ldrh	r3, [r7, #20]
 800cb02:	3301      	adds	r3, #1
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800cb08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cb0e:	8afb      	ldrh	r3, [r7, #22]
 800cb10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d3ec      	bcc.n	800caf0 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800cb16:	8abb      	ldrh	r3, [r7, #20]
 800cb18:	461a      	mov	r2, r3
 800cb1a:	4b0e      	ldr	r3, [pc, #56]	; (800cb54 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800cb1c:	18d0      	adds	r0, r2, r3
 800cb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cb22:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cb26:	f001 f877 	bl	800dc18 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800cb2a:	f000 f9df 	bl	800ceec <TRACE_UnLock>

    return TRACE_Send();
 800cb2e:	f000 f831 	bl	800cb94 <TRACE_Send>
 800cb32:	4603      	mov	r3, r0
 800cb34:	e003      	b.n	800cb3e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800cb36:	f000 f9d9 	bl	800ceec <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800cb3a:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3734      	adds	r7, #52	; 0x34
 800cb42:	46bd      	mov	sp, r7
 800cb44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb48:	b001      	add	sp, #4
 800cb4a:	4770      	bx	lr
 800cb4c:	200005ec 	.word	0x200005ec
 800cb50:	20000804 	.word	0x20000804
 800cb54:	20000604 	.word	0x20000604

0800cb58 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800cb60:	4a03      	ldr	r2, [pc, #12]	; (800cb70 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6053      	str	r3, [r2, #4]
}
 800cb66:	bf00      	nop
 800cb68:	370c      	adds	r7, #12
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bc80      	pop	{r7}
 800cb6e:	4770      	bx	lr
 800cb70:	200005ec 	.word	0x200005ec

0800cb74 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800cb7e:	4a04      	ldr	r2, [pc, #16]	; (800cb90 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800cb80:	79fb      	ldrb	r3, [r7, #7]
 800cb82:	7213      	strb	r3, [r2, #8]
}
 800cb84:	bf00      	nop
 800cb86:	370c      	adds	r7, #12
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bc80      	pop	{r7}
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	200005ec 	.word	0x200005ec

0800cb94 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b088      	sub	sp, #32
 800cb98:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cba2:	f3ef 8310 	mrs	r3, PRIMASK
 800cba6:	613b      	str	r3, [r7, #16]
  return(result);
 800cba8:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800cbaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cbac:	b672      	cpsid	i
}
 800cbae:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800cbb0:	f000 f9ba 	bl	800cf28 <TRACE_IsLocked>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d15d      	bne.n	800cc76 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800cbba:	f000 f979 	bl	800ceb0 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800cbbe:	4b34      	ldr	r3, [pc, #208]	; (800cc90 <TRACE_Send+0xfc>)
 800cbc0:	8a1a      	ldrh	r2, [r3, #16]
 800cbc2:	4b33      	ldr	r3, [pc, #204]	; (800cc90 <TRACE_Send+0xfc>)
 800cbc4:	8a5b      	ldrh	r3, [r3, #18]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d04d      	beq.n	800cc66 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800cbca:	4b31      	ldr	r3, [pc, #196]	; (800cc90 <TRACE_Send+0xfc>)
 800cbcc:	789b      	ldrb	r3, [r3, #2]
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d117      	bne.n	800cc02 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800cbd2:	4b2f      	ldr	r3, [pc, #188]	; (800cc90 <TRACE_Send+0xfc>)
 800cbd4:	881a      	ldrh	r2, [r3, #0]
 800cbd6:	4b2e      	ldr	r3, [pc, #184]	; (800cc90 <TRACE_Send+0xfc>)
 800cbd8:	8a1b      	ldrh	r3, [r3, #16]
 800cbda:	1ad3      	subs	r3, r2, r3
 800cbdc:	b29a      	uxth	r2, r3
 800cbde:	4b2c      	ldr	r3, [pc, #176]	; (800cc90 <TRACE_Send+0xfc>)
 800cbe0:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800cbe2:	4b2b      	ldr	r3, [pc, #172]	; (800cc90 <TRACE_Send+0xfc>)
 800cbe4:	2202      	movs	r2, #2
 800cbe6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800cbe8:	4b29      	ldr	r3, [pc, #164]	; (800cc90 <TRACE_Send+0xfc>)
 800cbea:	2200      	movs	r2, #0
 800cbec:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800cbee:	4b28      	ldr	r3, [pc, #160]	; (800cc90 <TRACE_Send+0xfc>)
 800cbf0:	8a9b      	ldrh	r3, [r3, #20]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d105      	bne.n	800cc02 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800cbf6:	4b26      	ldr	r3, [pc, #152]	; (800cc90 <TRACE_Send+0xfc>)
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800cbfc:	4b24      	ldr	r3, [pc, #144]	; (800cc90 <TRACE_Send+0xfc>)
 800cbfe:	2200      	movs	r2, #0
 800cc00:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800cc02:	4b23      	ldr	r3, [pc, #140]	; (800cc90 <TRACE_Send+0xfc>)
 800cc04:	789b      	ldrb	r3, [r3, #2]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d115      	bne.n	800cc36 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800cc0a:	4b21      	ldr	r3, [pc, #132]	; (800cc90 <TRACE_Send+0xfc>)
 800cc0c:	8a5a      	ldrh	r2, [r3, #18]
 800cc0e:	4b20      	ldr	r3, [pc, #128]	; (800cc90 <TRACE_Send+0xfc>)
 800cc10:	8a1b      	ldrh	r3, [r3, #16]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d908      	bls.n	800cc28 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800cc16:	4b1e      	ldr	r3, [pc, #120]	; (800cc90 <TRACE_Send+0xfc>)
 800cc18:	8a5a      	ldrh	r2, [r3, #18]
 800cc1a:	4b1d      	ldr	r3, [pc, #116]	; (800cc90 <TRACE_Send+0xfc>)
 800cc1c:	8a1b      	ldrh	r3, [r3, #16]
 800cc1e:	1ad3      	subs	r3, r2, r3
 800cc20:	b29a      	uxth	r2, r3
 800cc22:	4b1b      	ldr	r3, [pc, #108]	; (800cc90 <TRACE_Send+0xfc>)
 800cc24:	829a      	strh	r2, [r3, #20]
 800cc26:	e006      	b.n	800cc36 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800cc28:	4b19      	ldr	r3, [pc, #100]	; (800cc90 <TRACE_Send+0xfc>)
 800cc2a:	8a1b      	ldrh	r3, [r3, #16]
 800cc2c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	4b17      	ldr	r3, [pc, #92]	; (800cc90 <TRACE_Send+0xfc>)
 800cc34:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800cc36:	4b16      	ldr	r3, [pc, #88]	; (800cc90 <TRACE_Send+0xfc>)
 800cc38:	8a1b      	ldrh	r3, [r3, #16]
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	4b15      	ldr	r3, [pc, #84]	; (800cc94 <TRACE_Send+0x100>)
 800cc3e:	4413      	add	r3, r2
 800cc40:	61bb      	str	r3, [r7, #24]
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f383 8810 	msr	PRIMASK, r3
}
 800cc4c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800cc4e:	f7f5 f92d 	bl	8001eac <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800cc52:	4b11      	ldr	r3, [pc, #68]	; (800cc98 <TRACE_Send+0x104>)
 800cc54:	68db      	ldr	r3, [r3, #12]
 800cc56:	4a0e      	ldr	r2, [pc, #56]	; (800cc90 <TRACE_Send+0xfc>)
 800cc58:	8a92      	ldrh	r2, [r2, #20]
 800cc5a:	4611      	mov	r1, r2
 800cc5c:	69b8      	ldr	r0, [r7, #24]
 800cc5e:	4798      	blx	r3
 800cc60:	4603      	mov	r3, r0
 800cc62:	77fb      	strb	r3, [r7, #31]
 800cc64:	e00d      	b.n	800cc82 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800cc66:	f000 f941 	bl	800ceec <TRACE_UnLock>
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	f383 8810 	msr	PRIMASK, r3
}
 800cc74:	e005      	b.n	800cc82 <TRACE_Send+0xee>
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f383 8810 	msr	PRIMASK, r3
}
 800cc80:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800cc82:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3720      	adds	r7, #32
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	200005ec 	.word	0x200005ec
 800cc94:	20000604 	.word	0x20000604
 800cc98:	08010bb4 	.word	0x08010bb4

0800cc9c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b088      	sub	sp, #32
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800cca4:	2300      	movs	r3, #0
 800cca6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cca8:	f3ef 8310 	mrs	r3, PRIMASK
 800ccac:	617b      	str	r3, [r7, #20]
  return(result);
 800ccae:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800ccb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800ccb2:	b672      	cpsid	i
}
 800ccb4:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800ccb6:	4b3c      	ldr	r3, [pc, #240]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800ccb8:	789b      	ldrb	r3, [r3, #2]
 800ccba:	2b02      	cmp	r3, #2
 800ccbc:	d106      	bne.n	800cccc <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800ccbe:	4b3a      	ldr	r3, [pc, #232]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800ccc4:	4b38      	ldr	r3, [pc, #224]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	821a      	strh	r2, [r3, #16]
 800ccca:	e00a      	b.n	800cce2 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800cccc:	4b36      	ldr	r3, [pc, #216]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800ccce:	8a1a      	ldrh	r2, [r3, #16]
 800ccd0:	4b35      	ldr	r3, [pc, #212]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800ccd2:	8a9b      	ldrh	r3, [r3, #20]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccdc:	b29a      	uxth	r2, r3
 800ccde:	4b32      	ldr	r3, [pc, #200]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cce0:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800cce2:	4b31      	ldr	r3, [pc, #196]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cce4:	8a1a      	ldrh	r2, [r3, #16]
 800cce6:	4b30      	ldr	r3, [pc, #192]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cce8:	8a5b      	ldrh	r3, [r3, #18]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d04d      	beq.n	800cd8a <TRACE_TxCpltCallback+0xee>
 800ccee:	4b2e      	ldr	r3, [pc, #184]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800ccf0:	8adb      	ldrh	r3, [r3, #22]
 800ccf2:	2b01      	cmp	r3, #1
 800ccf4:	d149      	bne.n	800cd8a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800ccf6:	4b2c      	ldr	r3, [pc, #176]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800ccf8:	789b      	ldrb	r3, [r3, #2]
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d117      	bne.n	800cd2e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800ccfe:	4b2a      	ldr	r3, [pc, #168]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cd00:	881a      	ldrh	r2, [r3, #0]
 800cd02:	4b29      	ldr	r3, [pc, #164]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cd04:	8a1b      	ldrh	r3, [r3, #16]
 800cd06:	1ad3      	subs	r3, r2, r3
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	4b27      	ldr	r3, [pc, #156]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cd0c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800cd0e:	4b26      	ldr	r3, [pc, #152]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cd10:	2202      	movs	r2, #2
 800cd12:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800cd14:	4b24      	ldr	r3, [pc, #144]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cd16:	2200      	movs	r2, #0
 800cd18:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800cd1a:	4b23      	ldr	r3, [pc, #140]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cd1c:	8a9b      	ldrh	r3, [r3, #20]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d105      	bne.n	800cd2e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800cd22:	4b21      	ldr	r3, [pc, #132]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cd24:	2200      	movs	r2, #0
 800cd26:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800cd28:	4b1f      	ldr	r3, [pc, #124]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800cd2e:	4b1e      	ldr	r3, [pc, #120]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cd30:	789b      	ldrb	r3, [r3, #2]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d115      	bne.n	800cd62 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800cd36:	4b1c      	ldr	r3, [pc, #112]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cd38:	8a5a      	ldrh	r2, [r3, #18]
 800cd3a:	4b1b      	ldr	r3, [pc, #108]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cd3c:	8a1b      	ldrh	r3, [r3, #16]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d908      	bls.n	800cd54 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800cd42:	4b19      	ldr	r3, [pc, #100]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cd44:	8a5a      	ldrh	r2, [r3, #18]
 800cd46:	4b18      	ldr	r3, [pc, #96]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cd48:	8a1b      	ldrh	r3, [r3, #16]
 800cd4a:	1ad3      	subs	r3, r2, r3
 800cd4c:	b29a      	uxth	r2, r3
 800cd4e:	4b16      	ldr	r3, [pc, #88]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cd50:	829a      	strh	r2, [r3, #20]
 800cd52:	e006      	b.n	800cd62 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800cd54:	4b14      	ldr	r3, [pc, #80]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cd56:	8a1b      	ldrh	r3, [r3, #16]
 800cd58:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cd5c:	b29a      	uxth	r2, r3
 800cd5e:	4b12      	ldr	r3, [pc, #72]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cd60:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800cd62:	4b11      	ldr	r3, [pc, #68]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cd64:	8a1b      	ldrh	r3, [r3, #16]
 800cd66:	461a      	mov	r2, r3
 800cd68:	4b10      	ldr	r3, [pc, #64]	; (800cdac <TRACE_TxCpltCallback+0x110>)
 800cd6a:	4413      	add	r3, r2
 800cd6c:	61fb      	str	r3, [r7, #28]
 800cd6e:	69bb      	ldr	r3, [r7, #24]
 800cd70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	f383 8810 	msr	PRIMASK, r3
}
 800cd78:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800cd7a:	4b0d      	ldr	r3, [pc, #52]	; (800cdb0 <TRACE_TxCpltCallback+0x114>)
 800cd7c:	68db      	ldr	r3, [r3, #12]
 800cd7e:	4a0a      	ldr	r2, [pc, #40]	; (800cda8 <TRACE_TxCpltCallback+0x10c>)
 800cd80:	8a92      	ldrh	r2, [r2, #20]
 800cd82:	4611      	mov	r1, r2
 800cd84:	69f8      	ldr	r0, [r7, #28]
 800cd86:	4798      	blx	r3
 800cd88:	e00a      	b.n	800cda0 <TRACE_TxCpltCallback+0x104>
 800cd8a:	69bb      	ldr	r3, [r7, #24]
 800cd8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f383 8810 	msr	PRIMASK, r3
}
 800cd94:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800cd96:	f7f5 f891 	bl	8001ebc <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800cd9a:	f000 f8a7 	bl	800ceec <TRACE_UnLock>
  }
}
 800cd9e:	bf00      	nop
 800cda0:	bf00      	nop
 800cda2:	3720      	adds	r7, #32
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	200005ec 	.word	0x200005ec
 800cdac:	20000604 	.word	0x20000604
 800cdb0:	08010bb4 	.word	0x08010bb4

0800cdb4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b087      	sub	sp, #28
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	4603      	mov	r3, r0
 800cdbc:	6039      	str	r1, [r7, #0]
 800cdbe:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800cdc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cdc4:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdc6:	f3ef 8310 	mrs	r3, PRIMASK
 800cdca:	60fb      	str	r3, [r7, #12]
  return(result);
 800cdcc:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800cdce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cdd0:	b672      	cpsid	i
}
 800cdd2:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800cdd4:	4b35      	ldr	r3, [pc, #212]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800cdd6:	8a5a      	ldrh	r2, [r3, #18]
 800cdd8:	4b34      	ldr	r3, [pc, #208]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800cdda:	8a1b      	ldrh	r3, [r3, #16]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d11b      	bne.n	800ce18 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800cde0:	4b32      	ldr	r3, [pc, #200]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800cde2:	8a5b      	ldrh	r3, [r3, #18]
 800cde4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cde8:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800cdea:	88fa      	ldrh	r2, [r7, #6]
 800cdec:	8afb      	ldrh	r3, [r7, #22]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d33a      	bcc.n	800ce68 <TRACE_AllocateBufer+0xb4>
 800cdf2:	4b2e      	ldr	r3, [pc, #184]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800cdf4:	8a1b      	ldrh	r3, [r3, #16]
 800cdf6:	88fa      	ldrh	r2, [r7, #6]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d235      	bcs.n	800ce68 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800cdfc:	4b2b      	ldr	r3, [pc, #172]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800cdfe:	2201      	movs	r2, #1
 800ce00:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800ce02:	4b2a      	ldr	r3, [pc, #168]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800ce04:	8a5a      	ldrh	r2, [r3, #18]
 800ce06:	4b29      	ldr	r3, [pc, #164]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800ce08:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800ce0a:	4b28      	ldr	r3, [pc, #160]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800ce0c:	8a1b      	ldrh	r3, [r3, #16]
 800ce0e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800ce10:	4b26      	ldr	r3, [pc, #152]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800ce12:	2200      	movs	r2, #0
 800ce14:	825a      	strh	r2, [r3, #18]
 800ce16:	e027      	b.n	800ce68 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800ce18:	4b24      	ldr	r3, [pc, #144]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800ce1a:	8a5a      	ldrh	r2, [r3, #18]
 800ce1c:	4b23      	ldr	r3, [pc, #140]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800ce1e:	8a1b      	ldrh	r3, [r3, #16]
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d91b      	bls.n	800ce5c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800ce24:	4b21      	ldr	r3, [pc, #132]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800ce26:	8a5b      	ldrh	r3, [r3, #18]
 800ce28:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ce2c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800ce2e:	88fa      	ldrh	r2, [r7, #6]
 800ce30:	8afb      	ldrh	r3, [r7, #22]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d318      	bcc.n	800ce68 <TRACE_AllocateBufer+0xb4>
 800ce36:	4b1d      	ldr	r3, [pc, #116]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800ce38:	8a1b      	ldrh	r3, [r3, #16]
 800ce3a:	88fa      	ldrh	r2, [r7, #6]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d213      	bcs.n	800ce68 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800ce40:	4b1a      	ldr	r3, [pc, #104]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800ce42:	2201      	movs	r2, #1
 800ce44:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800ce46:	4b19      	ldr	r3, [pc, #100]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800ce48:	8a5a      	ldrh	r2, [r3, #18]
 800ce4a:	4b18      	ldr	r3, [pc, #96]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800ce4c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800ce4e:	4b17      	ldr	r3, [pc, #92]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800ce50:	8a1b      	ldrh	r3, [r3, #16]
 800ce52:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800ce54:	4b15      	ldr	r3, [pc, #84]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800ce56:	2200      	movs	r2, #0
 800ce58:	825a      	strh	r2, [r3, #18]
 800ce5a:	e005      	b.n	800ce68 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800ce5c:	4b13      	ldr	r3, [pc, #76]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800ce5e:	8a1a      	ldrh	r2, [r3, #16]
 800ce60:	4b12      	ldr	r3, [pc, #72]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800ce62:	8a5b      	ldrh	r3, [r3, #18]
 800ce64:	1ad3      	subs	r3, r2, r3
 800ce66:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800ce68:	8afa      	ldrh	r2, [r7, #22]
 800ce6a:	88fb      	ldrh	r3, [r7, #6]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d90f      	bls.n	800ce90 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800ce70:	4b0e      	ldr	r3, [pc, #56]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800ce72:	8a5a      	ldrh	r2, [r3, #18]
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800ce78:	4b0c      	ldr	r3, [pc, #48]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800ce7a:	8a5a      	ldrh	r2, [r3, #18]
 800ce7c:	88fb      	ldrh	r3, [r7, #6]
 800ce7e:	4413      	add	r3, r2
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce86:	b29a      	uxth	r2, r3
 800ce88:	4b08      	ldr	r3, [pc, #32]	; (800ceac <TRACE_AllocateBufer+0xf8>)
 800ce8a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	82bb      	strh	r3, [r7, #20]
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	f383 8810 	msr	PRIMASK, r3
}
 800ce9a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800ce9c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	371c      	adds	r7, #28
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bc80      	pop	{r7}
 800cea8:	4770      	bx	lr
 800ceaa:	bf00      	nop
 800ceac:	200005ec 	.word	0x200005ec

0800ceb0 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b085      	sub	sp, #20
 800ceb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ceb6:	f3ef 8310 	mrs	r3, PRIMASK
 800ceba:	607b      	str	r3, [r7, #4]
  return(result);
 800cebc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800cebe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800cec0:	b672      	cpsid	i
}
 800cec2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800cec4:	4b08      	ldr	r3, [pc, #32]	; (800cee8 <TRACE_Lock+0x38>)
 800cec6:	8adb      	ldrh	r3, [r3, #22]
 800cec8:	3301      	adds	r3, #1
 800ceca:	b29a      	uxth	r2, r3
 800cecc:	4b06      	ldr	r3, [pc, #24]	; (800cee8 <TRACE_Lock+0x38>)
 800cece:	82da      	strh	r2, [r3, #22]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	f383 8810 	msr	PRIMASK, r3
}
 800ceda:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800cedc:	bf00      	nop
 800cede:	3714      	adds	r7, #20
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bc80      	pop	{r7}
 800cee4:	4770      	bx	lr
 800cee6:	bf00      	nop
 800cee8:	200005ec 	.word	0x200005ec

0800ceec <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b085      	sub	sp, #20
 800cef0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cef2:	f3ef 8310 	mrs	r3, PRIMASK
 800cef6:	607b      	str	r3, [r7, #4]
  return(result);
 800cef8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800cefa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800cefc:	b672      	cpsid	i
}
 800cefe:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800cf00:	4b08      	ldr	r3, [pc, #32]	; (800cf24 <TRACE_UnLock+0x38>)
 800cf02:	8adb      	ldrh	r3, [r3, #22]
 800cf04:	3b01      	subs	r3, #1
 800cf06:	b29a      	uxth	r2, r3
 800cf08:	4b06      	ldr	r3, [pc, #24]	; (800cf24 <TRACE_UnLock+0x38>)
 800cf0a:	82da      	strh	r2, [r3, #22]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	f383 8810 	msr	PRIMASK, r3
}
 800cf16:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800cf18:	bf00      	nop
 800cf1a:	3714      	adds	r7, #20
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bc80      	pop	{r7}
 800cf20:	4770      	bx	lr
 800cf22:	bf00      	nop
 800cf24:	200005ec 	.word	0x200005ec

0800cf28 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800cf2c:	4b05      	ldr	r3, [pc, #20]	; (800cf44 <TRACE_IsLocked+0x1c>)
 800cf2e:	8adb      	ldrh	r3, [r3, #22]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	bf14      	ite	ne
 800cf34:	2301      	movne	r3, #1
 800cf36:	2300      	moveq	r3, #0
 800cf38:	b2db      	uxtb	r3, r3
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bc80      	pop	{r7}
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	200005ec 	.word	0x200005ec

0800cf48 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800cf48:	b480      	push	{r7}
 800cf4a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800cf4c:	4b04      	ldr	r3, [pc, #16]	; (800cf60 <UTIL_LPM_Init+0x18>)
 800cf4e:	2200      	movs	r2, #0
 800cf50:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800cf52:	4b04      	ldr	r3, [pc, #16]	; (800cf64 <UTIL_LPM_Init+0x1c>)
 800cf54:	2200      	movs	r2, #0
 800cf56:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800cf58:	bf00      	nop
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bc80      	pop	{r7}
 800cf5e:	4770      	bx	lr
 800cf60:	20000904 	.word	0x20000904
 800cf64:	20000908 	.word	0x20000908

0800cf68 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b087      	sub	sp, #28
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	460b      	mov	r3, r1
 800cf72:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf74:	f3ef 8310 	mrs	r3, PRIMASK
 800cf78:	613b      	str	r3, [r7, #16]
  return(result);
 800cf7a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800cf7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cf7e:	b672      	cpsid	i
}
 800cf80:	bf00      	nop
  
  switch( state )
 800cf82:	78fb      	ldrb	r3, [r7, #3]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d008      	beq.n	800cf9a <UTIL_LPM_SetStopMode+0x32>
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d10e      	bne.n	800cfaa <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800cf8c:	4b0d      	ldr	r3, [pc, #52]	; (800cfc4 <UTIL_LPM_SetStopMode+0x5c>)
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	4313      	orrs	r3, r2
 800cf94:	4a0b      	ldr	r2, [pc, #44]	; (800cfc4 <UTIL_LPM_SetStopMode+0x5c>)
 800cf96:	6013      	str	r3, [r2, #0]
      break;
 800cf98:	e008      	b.n	800cfac <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	43da      	mvns	r2, r3
 800cf9e:	4b09      	ldr	r3, [pc, #36]	; (800cfc4 <UTIL_LPM_SetStopMode+0x5c>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4013      	ands	r3, r2
 800cfa4:	4a07      	ldr	r2, [pc, #28]	; (800cfc4 <UTIL_LPM_SetStopMode+0x5c>)
 800cfa6:	6013      	str	r3, [r2, #0]
      break;
 800cfa8:	e000      	b.n	800cfac <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800cfaa:	bf00      	nop
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f383 8810 	msr	PRIMASK, r3
}
 800cfb6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800cfb8:	bf00      	nop
 800cfba:	371c      	adds	r7, #28
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bc80      	pop	{r7}
 800cfc0:	4770      	bx	lr
 800cfc2:	bf00      	nop
 800cfc4:	20000904 	.word	0x20000904

0800cfc8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b087      	sub	sp, #28
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfd4:	f3ef 8310 	mrs	r3, PRIMASK
 800cfd8:	613b      	str	r3, [r7, #16]
  return(result);
 800cfda:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800cfdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cfde:	b672      	cpsid	i
}
 800cfe0:	bf00      	nop
  
  switch(state)
 800cfe2:	78fb      	ldrb	r3, [r7, #3]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d008      	beq.n	800cffa <UTIL_LPM_SetOffMode+0x32>
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d10e      	bne.n	800d00a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800cfec:	4b0d      	ldr	r3, [pc, #52]	; (800d024 <UTIL_LPM_SetOffMode+0x5c>)
 800cfee:	681a      	ldr	r2, [r3, #0]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	4313      	orrs	r3, r2
 800cff4:	4a0b      	ldr	r2, [pc, #44]	; (800d024 <UTIL_LPM_SetOffMode+0x5c>)
 800cff6:	6013      	str	r3, [r2, #0]
      break;
 800cff8:	e008      	b.n	800d00c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	43da      	mvns	r2, r3
 800cffe:	4b09      	ldr	r3, [pc, #36]	; (800d024 <UTIL_LPM_SetOffMode+0x5c>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4013      	ands	r3, r2
 800d004:	4a07      	ldr	r2, [pc, #28]	; (800d024 <UTIL_LPM_SetOffMode+0x5c>)
 800d006:	6013      	str	r3, [r2, #0]
      break;
 800d008:	e000      	b.n	800d00c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800d00a:	bf00      	nop
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f383 8810 	msr	PRIMASK, r3
}
 800d016:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d018:	bf00      	nop
 800d01a:	371c      	adds	r7, #28
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bc80      	pop	{r7}
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop
 800d024:	20000908 	.word	0x20000908

0800d028 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d02e:	f3ef 8310 	mrs	r3, PRIMASK
 800d032:	60bb      	str	r3, [r7, #8]
  return(result);
 800d034:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800d036:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800d038:	b672      	cpsid	i
}
 800d03a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800d03c:	4b12      	ldr	r3, [pc, #72]	; (800d088 <UTIL_LPM_EnterLowPower+0x60>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d006      	beq.n	800d052 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800d044:	4b11      	ldr	r3, [pc, #68]	; (800d08c <UTIL_LPM_EnterLowPower+0x64>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800d04a:	4b10      	ldr	r3, [pc, #64]	; (800d08c <UTIL_LPM_EnterLowPower+0x64>)
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	4798      	blx	r3
 800d050:	e010      	b.n	800d074 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800d052:	4b0f      	ldr	r3, [pc, #60]	; (800d090 <UTIL_LPM_EnterLowPower+0x68>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d006      	beq.n	800d068 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800d05a:	4b0c      	ldr	r3, [pc, #48]	; (800d08c <UTIL_LPM_EnterLowPower+0x64>)
 800d05c:	689b      	ldr	r3, [r3, #8]
 800d05e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800d060:	4b0a      	ldr	r3, [pc, #40]	; (800d08c <UTIL_LPM_EnterLowPower+0x64>)
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	4798      	blx	r3
 800d066:	e005      	b.n	800d074 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800d068:	4b08      	ldr	r3, [pc, #32]	; (800d08c <UTIL_LPM_EnterLowPower+0x64>)
 800d06a:	691b      	ldr	r3, [r3, #16]
 800d06c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800d06e:	4b07      	ldr	r3, [pc, #28]	; (800d08c <UTIL_LPM_EnterLowPower+0x64>)
 800d070:	695b      	ldr	r3, [r3, #20]
 800d072:	4798      	blx	r3
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f383 8810 	msr	PRIMASK, r3
}
 800d07e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800d080:	bf00      	nop
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}
 800d088:	20000904 	.word	0x20000904
 800d08c:	08010b5c 	.word	0x08010b5c
 800d090:	20000908 	.word	0x20000908

0800d094 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800d094:	b480      	push	{r7}
 800d096:	b085      	sub	sp, #20
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	460b      	mov	r3, r1
 800d09e:	70fb      	strb	r3, [r7, #3]
 800d0a0:	4613      	mov	r3, r2
 800d0a2:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800d0a8:	e004      	b.n	800d0b4 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	1c5a      	adds	r2, r3, #1
 800d0ae:	60fa      	str	r2, [r7, #12]
 800d0b0:	78fa      	ldrb	r2, [r7, #3]
 800d0b2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800d0b4:	883b      	ldrh	r3, [r7, #0]
 800d0b6:	1e5a      	subs	r2, r3, #1
 800d0b8:	803a      	strh	r2, [r7, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d1f5      	bne.n	800d0aa <UTIL_MEM_set_8+0x16>
  }
}
 800d0be:	bf00      	nop
 800d0c0:	bf00      	nop
 800d0c2:	3714      	adds	r7, #20
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bc80      	pop	{r7}
 800d0c8:	4770      	bx	lr
	...

0800d0cc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b090      	sub	sp, #64	; 0x40
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800d0d4:	4b73      	ldr	r3, [pc, #460]	; (800d2a4 <UTIL_SEQ_Run+0x1d8>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800d0da:	4b72      	ldr	r3, [pc, #456]	; (800d2a4 <UTIL_SEQ_Run+0x1d8>)
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4013      	ands	r3, r2
 800d0e2:	4a70      	ldr	r2, [pc, #448]	; (800d2a4 <UTIL_SEQ_Run+0x1d8>)
 800d0e4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800d0e6:	4b70      	ldr	r3, [pc, #448]	; (800d2a8 <UTIL_SEQ_Run+0x1dc>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800d0ec:	4b6f      	ldr	r3, [pc, #444]	; (800d2ac <UTIL_SEQ_Run+0x1e0>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800d0f2:	4b6f      	ldr	r3, [pc, #444]	; (800d2b0 <UTIL_SEQ_Run+0x1e4>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800d0f8:	4b6e      	ldr	r3, [pc, #440]	; (800d2b4 <UTIL_SEQ_Run+0x1e8>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d0fe:	e08d      	b.n	800d21c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800d100:	2300      	movs	r3, #0
 800d102:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d104:	e002      	b.n	800d10c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800d106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d108:	3301      	adds	r3, #1
 800d10a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d10c:	4a6a      	ldr	r2, [pc, #424]	; (800d2b8 <UTIL_SEQ_Run+0x1ec>)
 800d10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d110:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d116:	401a      	ands	r2, r3
 800d118:	4b62      	ldr	r3, [pc, #392]	; (800d2a4 <UTIL_SEQ_Run+0x1d8>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4013      	ands	r3, r2
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d0f1      	beq.n	800d106 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800d122:	4a65      	ldr	r2, [pc, #404]	; (800d2b8 <UTIL_SEQ_Run+0x1ec>)
 800d124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d126:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12c:	401a      	ands	r2, r3
 800d12e:	4b5d      	ldr	r3, [pc, #372]	; (800d2a4 <UTIL_SEQ_Run+0x1d8>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4013      	ands	r3, r2
 800d134:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800d136:	4a60      	ldr	r2, [pc, #384]	; (800d2b8 <UTIL_SEQ_Run+0x1ec>)
 800d138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d13a:	00db      	lsls	r3, r3, #3
 800d13c:	4413      	add	r3, r2
 800d13e:	685a      	ldr	r2, [r3, #4]
 800d140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d142:	4013      	ands	r3, r2
 800d144:	2b00      	cmp	r3, #0
 800d146:	d106      	bne.n	800d156 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d148:	4a5b      	ldr	r2, [pc, #364]	; (800d2b8 <UTIL_SEQ_Run+0x1ec>)
 800d14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d14c:	00db      	lsls	r3, r3, #3
 800d14e:	4413      	add	r3, r2
 800d150:	f04f 32ff 	mov.w	r2, #4294967295
 800d154:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800d156:	4a58      	ldr	r2, [pc, #352]	; (800d2b8 <UTIL_SEQ_Run+0x1ec>)
 800d158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d15a:	00db      	lsls	r3, r3, #3
 800d15c:	4413      	add	r3, r2
 800d15e:	685a      	ldr	r2, [r3, #4]
 800d160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d162:	4013      	ands	r3, r2
 800d164:	4618      	mov	r0, r3
 800d166:	f000 f907 	bl	800d378 <SEQ_BitPosition>
 800d16a:	4603      	mov	r3, r0
 800d16c:	461a      	mov	r2, r3
 800d16e:	4b53      	ldr	r3, [pc, #332]	; (800d2bc <UTIL_SEQ_Run+0x1f0>)
 800d170:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800d172:	4a51      	ldr	r2, [pc, #324]	; (800d2b8 <UTIL_SEQ_Run+0x1ec>)
 800d174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d176:	00db      	lsls	r3, r3, #3
 800d178:	4413      	add	r3, r2
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	4b4f      	ldr	r3, [pc, #316]	; (800d2bc <UTIL_SEQ_Run+0x1f0>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2101      	movs	r1, #1
 800d182:	fa01 f303 	lsl.w	r3, r1, r3
 800d186:	43db      	mvns	r3, r3
 800d188:	401a      	ands	r2, r3
 800d18a:	494b      	ldr	r1, [pc, #300]	; (800d2b8 <UTIL_SEQ_Run+0x1ec>)
 800d18c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d18e:	00db      	lsls	r3, r3, #3
 800d190:	440b      	add	r3, r1
 800d192:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d194:	f3ef 8310 	mrs	r3, PRIMASK
 800d198:	61bb      	str	r3, [r7, #24]
  return(result);
 800d19a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d19c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800d19e:	b672      	cpsid	i
}
 800d1a0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800d1a2:	4b46      	ldr	r3, [pc, #280]	; (800d2bc <UTIL_SEQ_Run+0x1f0>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d1ac:	43da      	mvns	r2, r3
 800d1ae:	4b3e      	ldr	r3, [pc, #248]	; (800d2a8 <UTIL_SEQ_Run+0x1dc>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4013      	ands	r3, r2
 800d1b4:	4a3c      	ldr	r2, [pc, #240]	; (800d2a8 <UTIL_SEQ_Run+0x1dc>)
 800d1b6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1bc:	e013      	b.n	800d1e6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800d1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1c0:	3b01      	subs	r3, #1
 800d1c2:	4a3d      	ldr	r2, [pc, #244]	; (800d2b8 <UTIL_SEQ_Run+0x1ec>)
 800d1c4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800d1c8:	4b3c      	ldr	r3, [pc, #240]	; (800d2bc <UTIL_SEQ_Run+0x1f0>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d1d2:	43da      	mvns	r2, r3
 800d1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	400a      	ands	r2, r1
 800d1da:	4937      	ldr	r1, [pc, #220]	; (800d2b8 <UTIL_SEQ_Run+0x1ec>)
 800d1dc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1e2:	3b01      	subs	r3, #1
 800d1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d1e8      	bne.n	800d1be <UTIL_SEQ_Run+0xf2>
 800d1ec:	6a3b      	ldr	r3, [r7, #32]
 800d1ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	f383 8810 	msr	PRIMASK, r3
}
 800d1f6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800d1f8:	4b30      	ldr	r3, [pc, #192]	; (800d2bc <UTIL_SEQ_Run+0x1f0>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4a30      	ldr	r2, [pc, #192]	; (800d2c0 <UTIL_SEQ_Run+0x1f4>)
 800d1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d202:	4798      	blx	r3

    local_taskset = TaskSet;
 800d204:	4b28      	ldr	r3, [pc, #160]	; (800d2a8 <UTIL_SEQ_Run+0x1dc>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800d20a:	4b28      	ldr	r3, [pc, #160]	; (800d2ac <UTIL_SEQ_Run+0x1e0>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800d210:	4b27      	ldr	r3, [pc, #156]	; (800d2b0 <UTIL_SEQ_Run+0x1e4>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800d216:	4b27      	ldr	r3, [pc, #156]	; (800d2b4 <UTIL_SEQ_Run+0x1e8>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d21c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d220:	401a      	ands	r2, r3
 800d222:	4b20      	ldr	r3, [pc, #128]	; (800d2a4 <UTIL_SEQ_Run+0x1d8>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4013      	ands	r3, r2
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d005      	beq.n	800d238 <UTIL_SEQ_Run+0x16c>
 800d22c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d230:	4013      	ands	r3, r2
 800d232:	2b00      	cmp	r3, #0
 800d234:	f43f af64 	beq.w	800d100 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800d238:	4b20      	ldr	r3, [pc, #128]	; (800d2bc <UTIL_SEQ_Run+0x1f0>)
 800d23a:	f04f 32ff 	mov.w	r2, #4294967295
 800d23e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800d240:	f000 f88e 	bl	800d360 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d244:	f3ef 8310 	mrs	r3, PRIMASK
 800d248:	613b      	str	r3, [r7, #16]
  return(result);
 800d24a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800d24c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d24e:	b672      	cpsid	i
}
 800d250:	bf00      	nop
  local_taskset = TaskSet;
 800d252:	4b15      	ldr	r3, [pc, #84]	; (800d2a8 <UTIL_SEQ_Run+0x1dc>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800d258:	4b14      	ldr	r3, [pc, #80]	; (800d2ac <UTIL_SEQ_Run+0x1e0>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800d25e:	4b14      	ldr	r3, [pc, #80]	; (800d2b0 <UTIL_SEQ_Run+0x1e4>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800d264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d268:	401a      	ands	r2, r3
 800d26a:	4b0e      	ldr	r3, [pc, #56]	; (800d2a4 <UTIL_SEQ_Run+0x1d8>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	4013      	ands	r3, r2
 800d270:	2b00      	cmp	r3, #0
 800d272:	d107      	bne.n	800d284 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800d274:	4b0f      	ldr	r3, [pc, #60]	; (800d2b4 <UTIL_SEQ_Run+0x1e8>)
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d27a:	4013      	ands	r3, r2
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d101      	bne.n	800d284 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800d280:	f7f4 fdee 	bl	8001e60 <UTIL_SEQ_Idle>
 800d284:	69fb      	ldr	r3, [r7, #28]
 800d286:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f383 8810 	msr	PRIMASK, r3
}
 800d28e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800d290:	f000 f86c 	bl	800d36c <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800d294:	4a03      	ldr	r2, [pc, #12]	; (800d2a4 <UTIL_SEQ_Run+0x1d8>)
 800d296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d298:	6013      	str	r3, [r2, #0]

  return;
 800d29a:	bf00      	nop
}
 800d29c:	3740      	adds	r7, #64	; 0x40
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	20000018 	.word	0x20000018
 800d2a8:	2000090c 	.word	0x2000090c
 800d2ac:	20000910 	.word	0x20000910
 800d2b0:	20000014 	.word	0x20000014
 800d2b4:	20000914 	.word	0x20000914
 800d2b8:	20000928 	.word	0x20000928
 800d2bc:	20000918 	.word	0x20000918
 800d2c0:	2000091c 	.word	0x2000091c

0800d2c4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b088      	sub	sp, #32
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2d0:	f3ef 8310 	mrs	r3, PRIMASK
 800d2d4:	617b      	str	r3, [r7, #20]
  return(result);
 800d2d6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800d2d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d2da:	b672      	cpsid	i
}
 800d2dc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800d2de:	68f8      	ldr	r0, [r7, #12]
 800d2e0:	f000 f84a 	bl	800d378 <SEQ_BitPosition>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	4a06      	ldr	r2, [pc, #24]	; (800d304 <UTIL_SEQ_RegTask+0x40>)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d2f0:	69fb      	ldr	r3, [r7, #28]
 800d2f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2f4:	69bb      	ldr	r3, [r7, #24]
 800d2f6:	f383 8810 	msr	PRIMASK, r3
}
 800d2fa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800d2fc:	bf00      	nop
}
 800d2fe:	3720      	adds	r7, #32
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	2000091c 	.word	0x2000091c

0800d308 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800d308:	b480      	push	{r7}
 800d30a:	b087      	sub	sp, #28
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d312:	f3ef 8310 	mrs	r3, PRIMASK
 800d316:	60fb      	str	r3, [r7, #12]
  return(result);
 800d318:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d31a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d31c:	b672      	cpsid	i
}
 800d31e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800d320:	4b0d      	ldr	r3, [pc, #52]	; (800d358 <UTIL_SEQ_SetTask+0x50>)
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	4313      	orrs	r3, r2
 800d328:	4a0b      	ldr	r2, [pc, #44]	; (800d358 <UTIL_SEQ_SetTask+0x50>)
 800d32a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800d32c:	4a0b      	ldr	r2, [pc, #44]	; (800d35c <UTIL_SEQ_SetTask+0x54>)
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	431a      	orrs	r2, r3
 800d338:	4908      	ldr	r1, [pc, #32]	; (800d35c <UTIL_SEQ_SetTask+0x54>)
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	f383 8810 	msr	PRIMASK, r3
}
 800d34a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d34c:	bf00      	nop
}
 800d34e:	371c      	adds	r7, #28
 800d350:	46bd      	mov	sp, r7
 800d352:	bc80      	pop	{r7}
 800d354:	4770      	bx	lr
 800d356:	bf00      	nop
 800d358:	2000090c 	.word	0x2000090c
 800d35c:	20000928 	.word	0x20000928

0800d360 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800d360:	b480      	push	{r7}
 800d362:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d364:	bf00      	nop
}
 800d366:	46bd      	mov	sp, r7
 800d368:	bc80      	pop	{r7}
 800d36a:	4770      	bx	lr

0800d36c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800d36c:	b480      	push	{r7}
 800d36e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d370:	bf00      	nop
}
 800d372:	46bd      	mov	sp, r7
 800d374:	bc80      	pop	{r7}
 800d376:	4770      	bx	lr

0800d378 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800d378:	b480      	push	{r7}
 800d37a:	b085      	sub	sp, #20
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800d380:	2300      	movs	r3, #0
 800d382:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	0c1b      	lsrs	r3, r3, #16
 800d38c:	041b      	lsls	r3, r3, #16
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d104      	bne.n	800d39c <SEQ_BitPosition+0x24>
 800d392:	2310      	movs	r3, #16
 800d394:	73fb      	strb	r3, [r7, #15]
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	041b      	lsls	r3, r3, #16
 800d39a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d105      	bne.n	800d3b2 <SEQ_BitPosition+0x3a>
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
 800d3a8:	3308      	adds	r3, #8
 800d3aa:	73fb      	strb	r3, [r7, #15]
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	021b      	lsls	r3, r3, #8
 800d3b0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d105      	bne.n	800d3c8 <SEQ_BitPosition+0x50>
 800d3bc:	7bfb      	ldrb	r3, [r7, #15]
 800d3be:	3304      	adds	r3, #4
 800d3c0:	73fb      	strb	r3, [r7, #15]
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	011b      	lsls	r3, r3, #4
 800d3c6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	0f1b      	lsrs	r3, r3, #28
 800d3cc:	4a06      	ldr	r2, [pc, #24]	; (800d3e8 <SEQ_BitPosition+0x70>)
 800d3ce:	5cd2      	ldrb	r2, [r2, r3]
 800d3d0:	7bfb      	ldrb	r3, [r7, #15]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800d3d6:	7bfb      	ldrb	r3, [r7, #15]
 800d3d8:	f1c3 031f 	rsb	r3, r3, #31
 800d3dc:	b2db      	uxtb	r3, r3
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3714      	adds	r7, #20
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bc80      	pop	{r7}
 800d3e6:	4770      	bx	lr
 800d3e8:	08010dc8 	.word	0x08010dc8

0800d3ec <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800d3ec:	b082      	sub	sp, #8
 800d3ee:	b480      	push	{r7}
 800d3f0:	b087      	sub	sp, #28
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	60f8      	str	r0, [r7, #12]
 800d3f6:	1d38      	adds	r0, r7, #4
 800d3f8:	e880 0006 	stmia.w	r0, {r1, r2}
 800d3fc:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800d3fe:	2300      	movs	r3, #0
 800d400:	613b      	str	r3, [r7, #16]
 800d402:	2300      	movs	r3, #0
 800d404:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40a:	4413      	add	r3, r2
 800d40c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800d40e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800d412:	b29a      	uxth	r2, r3
 800d414:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d418:	b29b      	uxth	r3, r3
 800d41a:	4413      	add	r3, r2
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	b21b      	sxth	r3, r3
 800d420:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800d422:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d42a:	db0a      	blt.n	800d442 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	3301      	adds	r3, #1
 800d430:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800d432:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d436:	b29b      	uxth	r3, r3
 800d438:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	b21b      	sxth	r3, r3
 800d440:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	461a      	mov	r2, r3
 800d446:	f107 0310 	add.w	r3, r7, #16
 800d44a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d44e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800d452:	68f8      	ldr	r0, [r7, #12]
 800d454:	371c      	adds	r7, #28
 800d456:	46bd      	mov	sp, r7
 800d458:	bc80      	pop	{r7}
 800d45a:	b002      	add	sp, #8
 800d45c:	4770      	bx	lr
	...

0800d460 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b08a      	sub	sp, #40	; 0x28
 800d464:	af02      	add	r7, sp, #8
 800d466:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800d468:	2300      	movs	r3, #0
 800d46a:	61bb      	str	r3, [r7, #24]
 800d46c:	2300      	movs	r3, #0
 800d46e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800d470:	2300      	movs	r3, #0
 800d472:	613b      	str	r3, [r7, #16]
 800d474:	2300      	movs	r3, #0
 800d476:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800d478:	4b14      	ldr	r3, [pc, #80]	; (800d4cc <SysTimeGet+0x6c>)
 800d47a:	691b      	ldr	r3, [r3, #16]
 800d47c:	f107 0218 	add.w	r2, r7, #24
 800d480:	3204      	adds	r2, #4
 800d482:	4610      	mov	r0, r2
 800d484:	4798      	blx	r3
 800d486:	4603      	mov	r3, r0
 800d488:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800d48a:	4b10      	ldr	r3, [pc, #64]	; (800d4cc <SysTimeGet+0x6c>)
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	4798      	blx	r3
 800d490:	4603      	mov	r3, r0
 800d492:	b21b      	sxth	r3, r3
 800d494:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800d496:	4b0d      	ldr	r3, [pc, #52]	; (800d4cc <SysTimeGet+0x6c>)
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	4798      	blx	r3
 800d49c:	4603      	mov	r3, r0
 800d49e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800d4a0:	f107 0010 	add.w	r0, r7, #16
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	9300      	str	r3, [sp, #0]
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	f107 0208 	add.w	r2, r7, #8
 800d4ae:	ca06      	ldmia	r2, {r1, r2}
 800d4b0:	f7ff ff9c 	bl	800d3ec <SysTimeAdd>

  return sysTime;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	f107 0310 	add.w	r3, r7, #16
 800d4bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d4c0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	3720      	adds	r7, #32
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	08010ba0 	.word	0x08010ba0

0800d4d0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800d4d4:	4b04      	ldr	r3, [pc, #16]	; (800d4e8 <UTIL_TIMER_Init+0x18>)
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800d4da:	4b04      	ldr	r3, [pc, #16]	; (800d4ec <UTIL_TIMER_Init+0x1c>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4798      	blx	r3
 800d4e0:	4603      	mov	r3, r0
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	20000930 	.word	0x20000930
 800d4ec:	08010b74 	.word	0x08010b74

0800d4f0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	603b      	str	r3, [r7, #0]
 800d4fc:	4613      	mov	r3, r2
 800d4fe:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d023      	beq.n	800d54e <UTIL_TIMER_Create+0x5e>
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d020      	beq.n	800d54e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2200      	movs	r2, #0
 800d510:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800d512:	4b11      	ldr	r3, [pc, #68]	; (800d558 <UTIL_TIMER_Create+0x68>)
 800d514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d516:	68b8      	ldr	r0, [r7, #8]
 800d518:	4798      	blx	r3
 800d51a:	4602      	mov	r2, r0
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2200      	movs	r2, #0
 800d524:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2200      	movs	r2, #0
 800d52a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2200      	movs	r2, #0
 800d530:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	683a      	ldr	r2, [r7, #0]
 800d536:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	69ba      	ldr	r2, [r7, #24]
 800d53c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	79fa      	ldrb	r2, [r7, #7]
 800d542:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2200      	movs	r2, #0
 800d548:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800d54a:	2300      	movs	r3, #0
 800d54c:	e000      	b.n	800d550 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800d54e:	2301      	movs	r3, #1
  }
}
 800d550:	4618      	mov	r0, r3
 800d552:	3710      	adds	r7, #16
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}
 800d558:	08010b74 	.word	0x08010b74

0800d55c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b08a      	sub	sp, #40	; 0x28
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800d564:	2300      	movs	r3, #0
 800d566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d056      	beq.n	800d61e <UTIL_TIMER_Start+0xc2>
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 f9a9 	bl	800d8c8 <TimerExists>
 800d576:	4603      	mov	r3, r0
 800d578:	f083 0301 	eor.w	r3, r3, #1
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d04d      	beq.n	800d61e <UTIL_TIMER_Start+0xc2>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	7a5b      	ldrb	r3, [r3, #9]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d149      	bne.n	800d61e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d58a:	f3ef 8310 	mrs	r3, PRIMASK
 800d58e:	613b      	str	r3, [r7, #16]
  return(result);
 800d590:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800d592:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d594:	b672      	cpsid	i
}
 800d596:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800d59e:	4b24      	ldr	r3, [pc, #144]	; (800d630 <UTIL_TIMER_Start+0xd4>)
 800d5a0:	6a1b      	ldr	r3, [r3, #32]
 800d5a2:	4798      	blx	r3
 800d5a4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800d5a6:	6a3a      	ldr	r2, [r7, #32]
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d201      	bcs.n	800d5b2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6a3a      	ldr	r2, [r7, #32]
 800d5b6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800d5ca:	4b1a      	ldr	r3, [pc, #104]	; (800d634 <UTIL_TIMER_Start+0xd8>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d106      	bne.n	800d5e0 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800d5d2:	4b17      	ldr	r3, [pc, #92]	; (800d630 <UTIL_TIMER_Start+0xd4>)
 800d5d4:	691b      	ldr	r3, [r3, #16]
 800d5d6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f000 f9eb 	bl	800d9b4 <TimerInsertNewHeadTimer>
 800d5de:	e017      	b.n	800d610 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800d5e0:	4b13      	ldr	r3, [pc, #76]	; (800d630 <UTIL_TIMER_Start+0xd4>)
 800d5e2:	699b      	ldr	r3, [r3, #24]
 800d5e4:	4798      	blx	r3
 800d5e6:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	441a      	add	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	4b0e      	ldr	r3, [pc, #56]	; (800d634 <UTIL_TIMER_Start+0xd8>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d203      	bcs.n	800d60a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 f9d6 	bl	800d9b4 <TimerInsertNewHeadTimer>
 800d608:	e002      	b.n	800d610 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 f9a2 	bl	800d954 <TimerInsertTimer>
 800d610:	69fb      	ldr	r3, [r7, #28]
 800d612:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f383 8810 	msr	PRIMASK, r3
}
 800d61a:	bf00      	nop
  {
 800d61c:	e002      	b.n	800d624 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800d61e:	2301      	movs	r3, #1
 800d620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800d624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3728      	adds	r7, #40	; 0x28
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	08010b74 	.word	0x08010b74
 800d634:	20000930 	.word	0x20000930

0800d638 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b088      	sub	sp, #32
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800d640:	2300      	movs	r3, #0
 800d642:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d05b      	beq.n	800d702 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d64a:	f3ef 8310 	mrs	r3, PRIMASK
 800d64e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d650:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800d652:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d654:	b672      	cpsid	i
}
 800d656:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800d658:	4b2d      	ldr	r3, [pc, #180]	; (800d710 <UTIL_TIMER_Stop+0xd8>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800d65e:	4b2c      	ldr	r3, [pc, #176]	; (800d710 <UTIL_TIMER_Stop+0xd8>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2201      	movs	r2, #1
 800d668:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800d66a:	4b29      	ldr	r3, [pc, #164]	; (800d710 <UTIL_TIMER_Stop+0xd8>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d041      	beq.n	800d6f6 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800d678:	4b25      	ldr	r3, [pc, #148]	; (800d710 <UTIL_TIMER_Stop+0xd8>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	687a      	ldr	r2, [r7, #4]
 800d67e:	429a      	cmp	r2, r3
 800d680:	d134      	bne.n	800d6ec <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800d682:	4b23      	ldr	r3, [pc, #140]	; (800d710 <UTIL_TIMER_Stop+0xd8>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2200      	movs	r2, #0
 800d688:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800d68a:	4b21      	ldr	r3, [pc, #132]	; (800d710 <UTIL_TIMER_Stop+0xd8>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	695b      	ldr	r3, [r3, #20]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d00a      	beq.n	800d6aa <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800d694:	4b1e      	ldr	r3, [pc, #120]	; (800d710 <UTIL_TIMER_Stop+0xd8>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	695b      	ldr	r3, [r3, #20]
 800d69a:	4a1d      	ldr	r2, [pc, #116]	; (800d710 <UTIL_TIMER_Stop+0xd8>)
 800d69c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800d69e:	4b1c      	ldr	r3, [pc, #112]	; (800d710 <UTIL_TIMER_Stop+0xd8>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f000 f92c 	bl	800d900 <TimerSetTimeout>
 800d6a8:	e023      	b.n	800d6f2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800d6aa:	4b1a      	ldr	r3, [pc, #104]	; (800d714 <UTIL_TIMER_Stop+0xdc>)
 800d6ac:	68db      	ldr	r3, [r3, #12]
 800d6ae:	4798      	blx	r3
            TimerListHead = NULL;
 800d6b0:	4b17      	ldr	r3, [pc, #92]	; (800d710 <UTIL_TIMER_Stop+0xd8>)
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	601a      	str	r2, [r3, #0]
 800d6b6:	e01c      	b.n	800d6f2 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800d6b8:	697a      	ldr	r2, [r7, #20]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d110      	bne.n	800d6e2 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	695b      	ldr	r3, [r3, #20]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d006      	beq.n	800d6d6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	695b      	ldr	r3, [r3, #20]
 800d6cc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800d6ce:	69bb      	ldr	r3, [r7, #24]
 800d6d0:	697a      	ldr	r2, [r7, #20]
 800d6d2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800d6d4:	e00d      	b.n	800d6f2 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800d6da:	69bb      	ldr	r3, [r7, #24]
 800d6dc:	697a      	ldr	r2, [r7, #20]
 800d6de:	615a      	str	r2, [r3, #20]
            break;
 800d6e0:	e007      	b.n	800d6f2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	695b      	ldr	r3, [r3, #20]
 800d6ea:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d1e2      	bne.n	800d6b8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	77fb      	strb	r3, [r7, #31]
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	f383 8810 	msr	PRIMASK, r3
}
 800d700:	e001      	b.n	800d706 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800d702:	2301      	movs	r3, #1
 800d704:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800d706:	7ffb      	ldrb	r3, [r7, #31]
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3720      	adds	r7, #32
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	20000930 	.word	0x20000930
 800d714:	08010b74 	.word	0x08010b74

0800d718 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800d722:	2300      	movs	r3, #0
 800d724:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d102      	bne.n	800d732 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800d72c:	2301      	movs	r3, #1
 800d72e:	73fb      	strb	r3, [r7, #15]
 800d730:	e014      	b.n	800d75c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800d732:	4b0d      	ldr	r3, [pc, #52]	; (800d768 <UTIL_TIMER_SetPeriod+0x50>)
 800d734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d736:	6838      	ldr	r0, [r7, #0]
 800d738:	4798      	blx	r3
 800d73a:	4602      	mov	r2, r0
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 f8c1 	bl	800d8c8 <TimerExists>
 800d746:	4603      	mov	r3, r0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d007      	beq.n	800d75c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f7ff ff73 	bl	800d638 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f7ff ff02 	bl	800d55c <UTIL_TIMER_Start>
 800d758:	4603      	mov	r3, r0
 800d75a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800d75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3710      	adds	r7, #16
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	08010b74 	.word	0x08010b74

0800d76c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800d76c:	b590      	push	{r4, r7, lr}
 800d76e:	b089      	sub	sp, #36	; 0x24
 800d770:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d772:	f3ef 8310 	mrs	r3, PRIMASK
 800d776:	60bb      	str	r3, [r7, #8]
  return(result);
 800d778:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800d77a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800d77c:	b672      	cpsid	i
}
 800d77e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800d780:	4b38      	ldr	r3, [pc, #224]	; (800d864 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800d782:	695b      	ldr	r3, [r3, #20]
 800d784:	4798      	blx	r3
 800d786:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800d788:	4b36      	ldr	r3, [pc, #216]	; (800d864 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800d78a:	691b      	ldr	r3, [r3, #16]
 800d78c:	4798      	blx	r3
 800d78e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800d790:	693a      	ldr	r2, [r7, #16]
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	1ad3      	subs	r3, r2, r3
 800d796:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800d798:	4b33      	ldr	r3, [pc, #204]	; (800d868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d037      	beq.n	800d810 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800d7a0:	4b31      	ldr	r3, [pc, #196]	; (800d868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800d7a6:	69fb      	ldr	r3, [r7, #28]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	68fa      	ldr	r2, [r7, #12]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d206      	bcs.n	800d7be <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800d7b0:	69fb      	ldr	r3, [r7, #28]
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	1ad2      	subs	r2, r2, r3
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	601a      	str	r2, [r3, #0]
 800d7bc:	e002      	b.n	800d7c4 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800d7be:	69fb      	ldr	r3, [r7, #28]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	695b      	ldr	r3, [r3, #20]
 800d7c8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800d7ca:	69fb      	ldr	r3, [r7, #28]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d1ea      	bne.n	800d7a6 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800d7d0:	e01e      	b.n	800d810 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800d7d2:	4b25      	ldr	r3, [pc, #148]	; (800d868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800d7d8:	4b23      	ldr	r3, [pc, #140]	; (800d868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	695b      	ldr	r3, [r3, #20]
 800d7de:	4a22      	ldr	r2, [pc, #136]	; (800d868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d7e0:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800d7e2:	69fb      	ldr	r3, [r7, #28]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	68db      	ldr	r3, [r3, #12]
 800d7f2:	69fa      	ldr	r2, [r7, #28]
 800d7f4:	6912      	ldr	r2, [r2, #16]
 800d7f6:	4610      	mov	r0, r2
 800d7f8:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800d7fa:	69fb      	ldr	r3, [r7, #28]
 800d7fc:	7adb      	ldrb	r3, [r3, #11]
 800d7fe:	2b01      	cmp	r3, #1
 800d800:	d106      	bne.n	800d810 <UTIL_TIMER_IRQ_Handler+0xa4>
 800d802:	69fb      	ldr	r3, [r7, #28]
 800d804:	7a9b      	ldrb	r3, [r3, #10]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d102      	bne.n	800d810 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800d80a:	69f8      	ldr	r0, [r7, #28]
 800d80c:	f7ff fea6 	bl	800d55c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800d810:	4b15      	ldr	r3, [pc, #84]	; (800d868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00d      	beq.n	800d834 <UTIL_TIMER_IRQ_Handler+0xc8>
 800d818:	4b13      	ldr	r3, [pc, #76]	; (800d868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d0d7      	beq.n	800d7d2 <UTIL_TIMER_IRQ_Handler+0x66>
 800d822:	4b11      	ldr	r3, [pc, #68]	; (800d868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	681c      	ldr	r4, [r3, #0]
 800d828:	4b0e      	ldr	r3, [pc, #56]	; (800d864 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800d82a:	699b      	ldr	r3, [r3, #24]
 800d82c:	4798      	blx	r3
 800d82e:	4603      	mov	r3, r0
 800d830:	429c      	cmp	r4, r3
 800d832:	d3ce      	bcc.n	800d7d2 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800d834:	4b0c      	ldr	r3, [pc, #48]	; (800d868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d009      	beq.n	800d850 <UTIL_TIMER_IRQ_Handler+0xe4>
 800d83c:	4b0a      	ldr	r3, [pc, #40]	; (800d868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	7a1b      	ldrb	r3, [r3, #8]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d104      	bne.n	800d850 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800d846:	4b08      	ldr	r3, [pc, #32]	; (800d868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f000 f858 	bl	800d900 <TimerSetTimeout>
 800d850:	69bb      	ldr	r3, [r7, #24]
 800d852:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f383 8810 	msr	PRIMASK, r3
}
 800d85a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800d85c:	bf00      	nop
 800d85e:	3724      	adds	r7, #36	; 0x24
 800d860:	46bd      	mov	sp, r7
 800d862:	bd90      	pop	{r4, r7, pc}
 800d864:	08010b74 	.word	0x08010b74
 800d868:	20000930 	.word	0x20000930

0800d86c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800d872:	4b06      	ldr	r3, [pc, #24]	; (800d88c <UTIL_TIMER_GetCurrentTime+0x20>)
 800d874:	69db      	ldr	r3, [r3, #28]
 800d876:	4798      	blx	r3
 800d878:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800d87a:	4b04      	ldr	r3, [pc, #16]	; (800d88c <UTIL_TIMER_GetCurrentTime+0x20>)
 800d87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	4798      	blx	r3
 800d882:	4603      	mov	r3, r0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	08010b74 	.word	0x08010b74

0800d890 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800d898:	4b0a      	ldr	r3, [pc, #40]	; (800d8c4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800d89a:	69db      	ldr	r3, [r3, #28]
 800d89c:	4798      	blx	r3
 800d89e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800d8a0:	4b08      	ldr	r3, [pc, #32]	; (800d8c4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800d8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	4798      	blx	r3
 800d8a8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800d8aa:	4b06      	ldr	r3, [pc, #24]	; (800d8c4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800d8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ae:	68f9      	ldr	r1, [r7, #12]
 800d8b0:	68ba      	ldr	r2, [r7, #8]
 800d8b2:	1a8a      	subs	r2, r1, r2
 800d8b4:	4610      	mov	r0, r2
 800d8b6:	4798      	blx	r3
 800d8b8:	4603      	mov	r3, r0
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3710      	adds	r7, #16
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	08010b74 	.word	0x08010b74

0800d8c8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b085      	sub	sp, #20
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d8d0:	4b0a      	ldr	r3, [pc, #40]	; (800d8fc <TimerExists+0x34>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800d8d6:	e008      	b.n	800d8ea <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800d8d8:	68fa      	ldr	r2, [r7, #12]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d101      	bne.n	800d8e4 <TimerExists+0x1c>
    {
      return true;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	e006      	b.n	800d8f2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	695b      	ldr	r3, [r3, #20]
 800d8e8:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d1f3      	bne.n	800d8d8 <TimerExists+0x10>
  }
  return false;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3714      	adds	r7, #20
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bc80      	pop	{r7}
 800d8fa:	4770      	bx	lr
 800d8fc:	20000930 	.word	0x20000930

0800d900 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800d900:	b590      	push	{r4, r7, lr}
 800d902:	b085      	sub	sp, #20
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800d908:	4b11      	ldr	r3, [pc, #68]	; (800d950 <TimerSetTimeout+0x50>)
 800d90a:	6a1b      	ldr	r3, [r3, #32]
 800d90c:	4798      	blx	r3
 800d90e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2201      	movs	r2, #1
 800d914:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681c      	ldr	r4, [r3, #0]
 800d91a:	4b0d      	ldr	r3, [pc, #52]	; (800d950 <TimerSetTimeout+0x50>)
 800d91c:	699b      	ldr	r3, [r3, #24]
 800d91e:	4798      	blx	r3
 800d920:	4602      	mov	r2, r0
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	4413      	add	r3, r2
 800d926:	429c      	cmp	r4, r3
 800d928:	d207      	bcs.n	800d93a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800d92a:	4b09      	ldr	r3, [pc, #36]	; (800d950 <TimerSetTimeout+0x50>)
 800d92c:	699b      	ldr	r3, [r3, #24]
 800d92e:	4798      	blx	r3
 800d930:	4602      	mov	r2, r0
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	441a      	add	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800d93a:	4b05      	ldr	r3, [pc, #20]	; (800d950 <TimerSetTimeout+0x50>)
 800d93c:	689b      	ldr	r3, [r3, #8]
 800d93e:	687a      	ldr	r2, [r7, #4]
 800d940:	6812      	ldr	r2, [r2, #0]
 800d942:	4610      	mov	r0, r2
 800d944:	4798      	blx	r3
}
 800d946:	bf00      	nop
 800d948:	3714      	adds	r7, #20
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd90      	pop	{r4, r7, pc}
 800d94e:	bf00      	nop
 800d950:	08010b74 	.word	0x08010b74

0800d954 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800d954:	b480      	push	{r7}
 800d956:	b085      	sub	sp, #20
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d95c:	4b14      	ldr	r3, [pc, #80]	; (800d9b0 <TimerInsertTimer+0x5c>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800d962:	4b13      	ldr	r3, [pc, #76]	; (800d9b0 <TimerInsertTimer+0x5c>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	695b      	ldr	r3, [r3, #20]
 800d968:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800d96a:	e012      	b.n	800d992 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	429a      	cmp	r2, r3
 800d976:	d905      	bls.n	800d984 <TimerInsertTimer+0x30>
    {
        cur = next;
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	695b      	ldr	r3, [r3, #20]
 800d980:	60bb      	str	r3, [r7, #8]
 800d982:	e006      	b.n	800d992 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	68ba      	ldr	r2, [r7, #8]
 800d98e:	615a      	str	r2, [r3, #20]
        return;
 800d990:	e009      	b.n	800d9a6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	695b      	ldr	r3, [r3, #20]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d1e8      	bne.n	800d96c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	615a      	str	r2, [r3, #20]
}
 800d9a6:	3714      	adds	r7, #20
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bc80      	pop	{r7}
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop
 800d9b0:	20000930 	.word	0x20000930

0800d9b4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d9bc:	4b0b      	ldr	r3, [pc, #44]	; (800d9ec <TimerInsertNewHeadTimer+0x38>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d002      	beq.n	800d9ce <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	68fa      	ldr	r2, [r7, #12]
 800d9d2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800d9d4:	4a05      	ldr	r2, [pc, #20]	; (800d9ec <TimerInsertNewHeadTimer+0x38>)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800d9da:	4b04      	ldr	r3, [pc, #16]	; (800d9ec <TimerInsertNewHeadTimer+0x38>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7ff ff8e 	bl	800d900 <TimerSetTimeout>
}
 800d9e4:	bf00      	nop
 800d9e6:	3710      	adds	r7, #16
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	20000930 	.word	0x20000930

0800d9f0 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b085      	sub	sp, #20
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  int i = 0;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800d9fc:	e00e      	b.n	800da1c <ee_skip_atoi+0x2c>
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	4613      	mov	r3, r2
 800da02:	009b      	lsls	r3, r3, #2
 800da04:	4413      	add	r3, r2
 800da06:	005b      	lsls	r3, r3, #1
 800da08:	4618      	mov	r0, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	1c59      	adds	r1, r3, #1
 800da10:	687a      	ldr	r2, [r7, #4]
 800da12:	6011      	str	r1, [r2, #0]
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	4403      	add	r3, r0
 800da18:	3b30      	subs	r3, #48	; 0x30
 800da1a:	60fb      	str	r3, [r7, #12]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	2b2f      	cmp	r3, #47	; 0x2f
 800da24:	d904      	bls.n	800da30 <ee_skip_atoi+0x40>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	2b39      	cmp	r3, #57	; 0x39
 800da2e:	d9e6      	bls.n	800d9fe <ee_skip_atoi+0xe>
  return i;
 800da30:	68fb      	ldr	r3, [r7, #12]
}
 800da32:	4618      	mov	r0, r3
 800da34:	3714      	adds	r7, #20
 800da36:	46bd      	mov	sp, r7
 800da38:	bc80      	pop	{r7}
 800da3a:	4770      	bx	lr

0800da3c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b099      	sub	sp, #100	; 0x64
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	607a      	str	r2, [r7, #4]
 800da48:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800da4a:	4b71      	ldr	r3, [pc, #452]	; (800dc10 <ee_number+0x1d4>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800da50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da56:	2b00      	cmp	r3, #0
 800da58:	d002      	beq.n	800da60 <ee_number+0x24>
 800da5a:	4b6e      	ldr	r3, [pc, #440]	; (800dc14 <ee_number+0x1d8>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	2b01      	cmp	r3, #1
 800da64:	dd02      	ble.n	800da6c <ee_number+0x30>
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	2b24      	cmp	r3, #36	; 0x24
 800da6a:	dd01      	ble.n	800da70 <ee_number+0x34>
 800da6c:	2300      	movs	r3, #0
 800da6e:	e0ca      	b.n	800dc06 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800da70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da72:	f003 0301 	and.w	r3, r3, #1
 800da76:	2b00      	cmp	r3, #0
 800da78:	d001      	beq.n	800da7e <ee_number+0x42>
 800da7a:	2330      	movs	r3, #48	; 0x30
 800da7c:	e000      	b.n	800da80 <ee_number+0x44>
 800da7e:	2320      	movs	r3, #32
 800da80:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 800da84:	2300      	movs	r3, #0
 800da86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 800da8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da8c:	f003 0302 	and.w	r3, r3, #2
 800da90:	2b00      	cmp	r3, #0
 800da92:	d00b      	beq.n	800daac <ee_number+0x70>
  {
    if (num < 0)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2b00      	cmp	r3, #0
 800da98:	da08      	bge.n	800daac <ee_number+0x70>
    {
      sign = '-';
 800da9a:	232d      	movs	r3, #45	; 0x2d
 800da9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	425b      	negs	r3, r3
 800daa4:	607b      	str	r3, [r7, #4]
      size--;
 800daa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800daa8:	3b01      	subs	r3, #1
 800daaa:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800daac:	2300      	movs	r3, #0
 800daae:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d11e      	bne.n	800daf4 <ee_number+0xb8>
    tmp[i++] = '0';
 800dab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dab8:	1c5a      	adds	r2, r3, #1
 800daba:	657a      	str	r2, [r7, #84]	; 0x54
 800dabc:	3360      	adds	r3, #96	; 0x60
 800dabe:	443b      	add	r3, r7
 800dac0:	2230      	movs	r2, #48	; 0x30
 800dac2:	f803 2c50 	strb.w	r2, [r3, #-80]
 800dac6:	e018      	b.n	800dafa <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	683a      	ldr	r2, [r7, #0]
 800dacc:	fbb3 f1f2 	udiv	r1, r3, r2
 800dad0:	fb01 f202 	mul.w	r2, r1, r2
 800dad4:	1a9b      	subs	r3, r3, r2
 800dad6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dad8:	441a      	add	r2, r3
 800dada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dadc:	1c59      	adds	r1, r3, #1
 800dade:	6579      	str	r1, [r7, #84]	; 0x54
 800dae0:	7812      	ldrb	r2, [r2, #0]
 800dae2:	3360      	adds	r3, #96	; 0x60
 800dae4:	443b      	add	r3, r7
 800dae6:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	fbb2 f3f3 	udiv	r3, r2, r3
 800daf2:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d1e6      	bne.n	800dac8 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800dafa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dafc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dafe:	429a      	cmp	r2, r3
 800db00:	dd01      	ble.n	800db06 <ee_number+0xca>
 800db02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db04:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 800db06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db0a:	1ad3      	subs	r3, r2, r3
 800db0c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800db0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800db10:	f003 0301 	and.w	r3, r3, #1
 800db14:	2b00      	cmp	r3, #0
 800db16:	d112      	bne.n	800db3e <ee_number+0x102>
 800db18:	e00c      	b.n	800db34 <ee_number+0xf8>
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	1c5a      	adds	r2, r3, #1
 800db1e:	60fa      	str	r2, [r7, #12]
 800db20:	2220      	movs	r2, #32
 800db22:	701a      	strb	r2, [r3, #0]
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	3b01      	subs	r3, #1
 800db28:	60bb      	str	r3, [r7, #8]
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d101      	bne.n	800db34 <ee_number+0xf8>
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	e068      	b.n	800dc06 <ee_number+0x1ca>
 800db34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db36:	1e5a      	subs	r2, r3, #1
 800db38:	66ba      	str	r2, [r7, #104]	; 0x68
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	dced      	bgt.n	800db1a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800db3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db42:	2b00      	cmp	r3, #0
 800db44:	d01b      	beq.n	800db7e <ee_number+0x142>
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	1c5a      	adds	r2, r3, #1
 800db4a:	60fa      	str	r2, [r7, #12]
 800db4c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800db50:	701a      	strb	r2, [r3, #0]
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	3b01      	subs	r3, #1
 800db56:	60bb      	str	r3, [r7, #8]
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d10f      	bne.n	800db7e <ee_number+0x142>
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	e051      	b.n	800dc06 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	1c5a      	adds	r2, r3, #1
 800db66:	60fa      	str	r2, [r7, #12]
 800db68:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800db6c:	701a      	strb	r2, [r3, #0]
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	3b01      	subs	r3, #1
 800db72:	60bb      	str	r3, [r7, #8]
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d101      	bne.n	800db7e <ee_number+0x142>
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	e043      	b.n	800dc06 <ee_number+0x1ca>
 800db7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db80:	1e5a      	subs	r2, r3, #1
 800db82:	66ba      	str	r2, [r7, #104]	; 0x68
 800db84:	2b00      	cmp	r3, #0
 800db86:	dcec      	bgt.n	800db62 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800db88:	e00c      	b.n	800dba4 <ee_number+0x168>
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	1c5a      	adds	r2, r3, #1
 800db8e:	60fa      	str	r2, [r7, #12]
 800db90:	2230      	movs	r2, #48	; 0x30
 800db92:	701a      	strb	r2, [r3, #0]
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	3b01      	subs	r3, #1
 800db98:	60bb      	str	r3, [r7, #8]
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d101      	bne.n	800dba4 <ee_number+0x168>
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	e030      	b.n	800dc06 <ee_number+0x1ca>
 800dba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dba6:	1e5a      	subs	r2, r3, #1
 800dba8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dbaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dbac:	429a      	cmp	r2, r3
 800dbae:	dbec      	blt.n	800db8a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800dbb0:	e010      	b.n	800dbd4 <ee_number+0x198>
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	1c5a      	adds	r2, r3, #1
 800dbb6:	60fa      	str	r2, [r7, #12]
 800dbb8:	f107 0110 	add.w	r1, r7, #16
 800dbbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dbbe:	440a      	add	r2, r1
 800dbc0:	7812      	ldrb	r2, [r2, #0]
 800dbc2:	701a      	strb	r2, [r3, #0]
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	3b01      	subs	r3, #1
 800dbc8:	60bb      	str	r3, [r7, #8]
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d101      	bne.n	800dbd4 <ee_number+0x198>
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	e018      	b.n	800dc06 <ee_number+0x1ca>
 800dbd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbd6:	1e5a      	subs	r2, r3, #1
 800dbd8:	657a      	str	r2, [r7, #84]	; 0x54
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	dce9      	bgt.n	800dbb2 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800dbde:	e00c      	b.n	800dbfa <ee_number+0x1be>
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	1c5a      	adds	r2, r3, #1
 800dbe4:	60fa      	str	r2, [r7, #12]
 800dbe6:	2220      	movs	r2, #32
 800dbe8:	701a      	strb	r2, [r3, #0]
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	3b01      	subs	r3, #1
 800dbee:	60bb      	str	r3, [r7, #8]
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d101      	bne.n	800dbfa <ee_number+0x1be>
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	e005      	b.n	800dc06 <ee_number+0x1ca>
 800dbfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbfc:	1e5a      	subs	r2, r3, #1
 800dbfe:	66ba      	str	r2, [r7, #104]	; 0x68
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	dced      	bgt.n	800dbe0 <ee_number+0x1a4>

  return str;
 800dc04:	68fb      	ldr	r3, [r7, #12]
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3764      	adds	r7, #100	; 0x64
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bc80      	pop	{r7}
 800dc0e:	4770      	bx	lr
 800dc10:	2000001c 	.word	0x2000001c
 800dc14:	20000020 	.word	0x20000020

0800dc18 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b092      	sub	sp, #72	; 0x48
 800dc1c:	af04      	add	r7, sp, #16
 800dc1e:	60f8      	str	r0, [r7, #12]
 800dc20:	60b9      	str	r1, [r7, #8]
 800dc22:	607a      	str	r2, [r7, #4]
 800dc24:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	dc01      	bgt.n	800dc30 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	e142      	b.n	800deb6 <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc34:	e12a      	b.n	800de8c <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 800dc36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	1ad2      	subs	r2, r2, r3
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	3b01      	subs	r3, #1
 800dc40:	429a      	cmp	r2, r3
 800dc42:	f280 8131 	bge.w	800dea8 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	2b25      	cmp	r3, #37	; 0x25
 800dc4c:	d006      	beq.n	800dc5c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800dc4e:	687a      	ldr	r2, [r7, #4]
 800dc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc52:	1c59      	adds	r1, r3, #1
 800dc54:	62f9      	str	r1, [r7, #44]	; 0x2c
 800dc56:	7812      	ldrb	r2, [r2, #0]
 800dc58:	701a      	strb	r2, [r3, #0]
      continue;
 800dc5a:	e114      	b.n	800de86 <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	3301      	adds	r3, #1
 800dc64:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	2b30      	cmp	r3, #48	; 0x30
 800dc6c:	d103      	bne.n	800dc76 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800dc6e:	6a3b      	ldr	r3, [r7, #32]
 800dc70:	f043 0301 	orr.w	r3, r3, #1
 800dc74:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800dc76:	f04f 33ff 	mov.w	r3, #4294967295
 800dc7a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	2b2f      	cmp	r3, #47	; 0x2f
 800dc82:	d908      	bls.n	800dc96 <tiny_vsnprintf_like+0x7e>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	2b39      	cmp	r3, #57	; 0x39
 800dc8a:	d804      	bhi.n	800dc96 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800dc8c:	1d3b      	adds	r3, r7, #4
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7ff feae 	bl	800d9f0 <ee_skip_atoi>
 800dc94:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800dc96:	f04f 33ff 	mov.w	r3, #4294967295
 800dc9a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800dc9c:	f04f 33ff 	mov.w	r3, #4294967295
 800dca0:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800dca2:	230a      	movs	r3, #10
 800dca4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	3b58      	subs	r3, #88	; 0x58
 800dcac:	2b20      	cmp	r3, #32
 800dcae:	f200 8094 	bhi.w	800ddda <tiny_vsnprintf_like+0x1c2>
 800dcb2:	a201      	add	r2, pc, #4	; (adr r2, 800dcb8 <tiny_vsnprintf_like+0xa0>)
 800dcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb8:	0800ddc3 	.word	0x0800ddc3
 800dcbc:	0800dddb 	.word	0x0800dddb
 800dcc0:	0800dddb 	.word	0x0800dddb
 800dcc4:	0800dddb 	.word	0x0800dddb
 800dcc8:	0800dddb 	.word	0x0800dddb
 800dccc:	0800dddb 	.word	0x0800dddb
 800dcd0:	0800dddb 	.word	0x0800dddb
 800dcd4:	0800dddb 	.word	0x0800dddb
 800dcd8:	0800dddb 	.word	0x0800dddb
 800dcdc:	0800dddb 	.word	0x0800dddb
 800dce0:	0800dddb 	.word	0x0800dddb
 800dce4:	0800dd47 	.word	0x0800dd47
 800dce8:	0800ddd1 	.word	0x0800ddd1
 800dcec:	0800dddb 	.word	0x0800dddb
 800dcf0:	0800dddb 	.word	0x0800dddb
 800dcf4:	0800dddb 	.word	0x0800dddb
 800dcf8:	0800dddb 	.word	0x0800dddb
 800dcfc:	0800ddd1 	.word	0x0800ddd1
 800dd00:	0800dddb 	.word	0x0800dddb
 800dd04:	0800dddb 	.word	0x0800dddb
 800dd08:	0800dddb 	.word	0x0800dddb
 800dd0c:	0800dddb 	.word	0x0800dddb
 800dd10:	0800dddb 	.word	0x0800dddb
 800dd14:	0800dddb 	.word	0x0800dddb
 800dd18:	0800dddb 	.word	0x0800dddb
 800dd1c:	0800dddb 	.word	0x0800dddb
 800dd20:	0800dddb 	.word	0x0800dddb
 800dd24:	0800dd67 	.word	0x0800dd67
 800dd28:	0800dddb 	.word	0x0800dddb
 800dd2c:	0800de27 	.word	0x0800de27
 800dd30:	0800dddb 	.word	0x0800dddb
 800dd34:	0800dddb 	.word	0x0800dddb
 800dd38:	0800ddcb 	.word	0x0800ddcb
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800dd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd3e:	1c5a      	adds	r2, r3, #1
 800dd40:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd42:	2220      	movs	r2, #32
 800dd44:	701a      	strb	r2, [r3, #0]
 800dd46:	69fb      	ldr	r3, [r7, #28]
 800dd48:	3b01      	subs	r3, #1
 800dd4a:	61fb      	str	r3, [r7, #28]
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	dcf4      	bgt.n	800dd3c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	1d1a      	adds	r2, r3, #4
 800dd56:	603a      	str	r2, [r7, #0]
 800dd58:	6819      	ldr	r1, [r3, #0]
 800dd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5c:	1c5a      	adds	r2, r3, #1
 800dd5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd60:	b2ca      	uxtb	r2, r1
 800dd62:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800dd64:	e08f      	b.n	800de86 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	1d1a      	adds	r2, r3, #4
 800dd6a:	603a      	str	r2, [r7, #0]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 800dd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d101      	bne.n	800dd7a <tiny_vsnprintf_like+0x162>
 800dd76:	4b52      	ldr	r3, [pc, #328]	; (800dec0 <tiny_vsnprintf_like+0x2a8>)
 800dd78:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800dd7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd7c:	f7f2 fa00 	bl	8000180 <strlen>
 800dd80:	4603      	mov	r3, r0
 800dd82:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800dd84:	e004      	b.n	800dd90 <tiny_vsnprintf_like+0x178>
 800dd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd88:	1c5a      	adds	r2, r3, #1
 800dd8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd8c:	2220      	movs	r2, #32
 800dd8e:	701a      	strb	r2, [r3, #0]
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	1e5a      	subs	r2, r3, #1
 800dd94:	61fa      	str	r2, [r7, #28]
 800dd96:	693a      	ldr	r2, [r7, #16]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	dbf4      	blt.n	800dd86 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800dda0:	e00a      	b.n	800ddb8 <tiny_vsnprintf_like+0x1a0>
 800dda2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dda4:	1c53      	adds	r3, r2, #1
 800dda6:	627b      	str	r3, [r7, #36]	; 0x24
 800dda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddaa:	1c59      	adds	r1, r3, #1
 800ddac:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ddae:	7812      	ldrb	r2, [r2, #0]
 800ddb0:	701a      	strb	r2, [r3, #0]
 800ddb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	62bb      	str	r3, [r7, #40]	; 0x28
 800ddb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	dbf0      	blt.n	800dda2 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800ddc0:	e061      	b.n	800de86 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800ddc2:	6a3b      	ldr	r3, [r7, #32]
 800ddc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddc8:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800ddca:	2310      	movs	r3, #16
 800ddcc:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800ddce:	e02d      	b.n	800de2c <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 800ddd0:	6a3b      	ldr	r3, [r7, #32]
 800ddd2:	f043 0302 	orr.w	r3, r3, #2
 800ddd6:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800ddd8:	e025      	b.n	800de26 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	2b25      	cmp	r3, #37	; 0x25
 800dde0:	d004      	beq.n	800ddec <tiny_vsnprintf_like+0x1d4>
 800dde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde4:	1c5a      	adds	r2, r3, #1
 800dde6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dde8:	2225      	movs	r2, #37	; 0x25
 800ddea:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800ddec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	1ad2      	subs	r2, r2, r3
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	da17      	bge.n	800de2a <tiny_vsnprintf_like+0x212>
        if (*fmt)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d006      	beq.n	800de10 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de06:	1c59      	adds	r1, r3, #1
 800de08:	62f9      	str	r1, [r7, #44]	; 0x2c
 800de0a:	7812      	ldrb	r2, [r2, #0]
 800de0c:	701a      	strb	r2, [r3, #0]
 800de0e:	e002      	b.n	800de16 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	3b01      	subs	r3, #1
 800de14:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800de16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	1ad2      	subs	r2, r2, r3
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	3b01      	subs	r3, #1
 800de20:	429a      	cmp	r2, r3
 800de22:	db2f      	blt.n	800de84 <tiny_vsnprintf_like+0x26c>
 800de24:	e002      	b.n	800de2c <tiny_vsnprintf_like+0x214>
        break;
 800de26:	bf00      	nop
 800de28:	e000      	b.n	800de2c <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 800de2a:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	2b6c      	cmp	r3, #108	; 0x6c
 800de30:	d105      	bne.n	800de3e <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	1d1a      	adds	r2, r3, #4
 800de36:	603a      	str	r2, [r7, #0]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	637b      	str	r3, [r7, #52]	; 0x34
 800de3c:	e00f      	b.n	800de5e <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 800de3e:	6a3b      	ldr	r3, [r7, #32]
 800de40:	f003 0302 	and.w	r3, r3, #2
 800de44:	2b00      	cmp	r3, #0
 800de46:	d005      	beq.n	800de54 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	1d1a      	adds	r2, r3, #4
 800de4c:	603a      	str	r2, [r7, #0]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	637b      	str	r3, [r7, #52]	; 0x34
 800de52:	e004      	b.n	800de5e <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	1d1a      	adds	r2, r3, #4
 800de58:	603a      	str	r2, [r7, #0]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	1e5a      	subs	r2, r3, #1
 800de62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	1acb      	subs	r3, r1, r3
 800de68:	1ad1      	subs	r1, r2, r3
 800de6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de6c:	6a3b      	ldr	r3, [r7, #32]
 800de6e:	9302      	str	r3, [sp, #8]
 800de70:	69bb      	ldr	r3, [r7, #24]
 800de72:	9301      	str	r3, [sp, #4]
 800de74:	69fb      	ldr	r3, [r7, #28]
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de7c:	f7ff fdde 	bl	800da3c <ee_number>
 800de80:	62f8      	str	r0, [r7, #44]	; 0x2c
 800de82:	e000      	b.n	800de86 <tiny_vsnprintf_like+0x26e>
        continue;
 800de84:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	3301      	adds	r3, #1
 800de8a:	607b      	str	r3, [r7, #4]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	2b00      	cmp	r3, #0
 800de92:	f47f aed0 	bne.w	800dc36 <tiny_vsnprintf_like+0x1e>
 800de96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	1ad2      	subs	r2, r2, r3
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	3b01      	subs	r3, #1
 800dea0:	429a      	cmp	r2, r3
 800dea2:	f6bf aec8 	bge.w	800dc36 <tiny_vsnprintf_like+0x1e>
 800dea6:	e000      	b.n	800deaa <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 800dea8:	bf00      	nop
  }

  *str = '\0';
 800deaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deac:	2200      	movs	r2, #0
 800deae:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800deb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	1ad3      	subs	r3, r2, r3
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3738      	adds	r7, #56	; 0x38
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	08010b54 	.word	0x08010b54

0800dec4 <__errno>:
 800dec4:	4b01      	ldr	r3, [pc, #4]	; (800decc <__errno+0x8>)
 800dec6:	6818      	ldr	r0, [r3, #0]
 800dec8:	4770      	bx	lr
 800deca:	bf00      	nop
 800decc:	20000024 	.word	0x20000024

0800ded0 <__libc_init_array>:
 800ded0:	b570      	push	{r4, r5, r6, lr}
 800ded2:	4d0d      	ldr	r5, [pc, #52]	; (800df08 <__libc_init_array+0x38>)
 800ded4:	4c0d      	ldr	r4, [pc, #52]	; (800df0c <__libc_init_array+0x3c>)
 800ded6:	1b64      	subs	r4, r4, r5
 800ded8:	10a4      	asrs	r4, r4, #2
 800deda:	2600      	movs	r6, #0
 800dedc:	42a6      	cmp	r6, r4
 800dede:	d109      	bne.n	800def4 <__libc_init_array+0x24>
 800dee0:	4d0b      	ldr	r5, [pc, #44]	; (800df10 <__libc_init_array+0x40>)
 800dee2:	4c0c      	ldr	r4, [pc, #48]	; (800df14 <__libc_init_array+0x44>)
 800dee4:	f002 fd7e 	bl	80109e4 <_init>
 800dee8:	1b64      	subs	r4, r4, r5
 800deea:	10a4      	asrs	r4, r4, #2
 800deec:	2600      	movs	r6, #0
 800deee:	42a6      	cmp	r6, r4
 800def0:	d105      	bne.n	800defe <__libc_init_array+0x2e>
 800def2:	bd70      	pop	{r4, r5, r6, pc}
 800def4:	f855 3b04 	ldr.w	r3, [r5], #4
 800def8:	4798      	blx	r3
 800defa:	3601      	adds	r6, #1
 800defc:	e7ee      	b.n	800dedc <__libc_init_array+0xc>
 800defe:	f855 3b04 	ldr.w	r3, [r5], #4
 800df02:	4798      	blx	r3
 800df04:	3601      	adds	r6, #1
 800df06:	e7f2      	b.n	800deee <__libc_init_array+0x1e>
 800df08:	0801121c 	.word	0x0801121c
 800df0c:	0801121c 	.word	0x0801121c
 800df10:	0801121c 	.word	0x0801121c
 800df14:	08011220 	.word	0x08011220

0800df18 <memcpy>:
 800df18:	440a      	add	r2, r1
 800df1a:	4291      	cmp	r1, r2
 800df1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800df20:	d100      	bne.n	800df24 <memcpy+0xc>
 800df22:	4770      	bx	lr
 800df24:	b510      	push	{r4, lr}
 800df26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df2e:	4291      	cmp	r1, r2
 800df30:	d1f9      	bne.n	800df26 <memcpy+0xe>
 800df32:	bd10      	pop	{r4, pc}

0800df34 <memset>:
 800df34:	4402      	add	r2, r0
 800df36:	4603      	mov	r3, r0
 800df38:	4293      	cmp	r3, r2
 800df3a:	d100      	bne.n	800df3e <memset+0xa>
 800df3c:	4770      	bx	lr
 800df3e:	f803 1b01 	strb.w	r1, [r3], #1
 800df42:	e7f9      	b.n	800df38 <memset+0x4>

0800df44 <__cvt>:
 800df44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df48:	b088      	sub	sp, #32
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	461f      	mov	r7, r3
 800df4e:	4614      	mov	r4, r2
 800df50:	bfb8      	it	lt
 800df52:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800df56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800df58:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800df5a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800df5e:	bfb6      	itet	lt
 800df60:	461f      	movlt	r7, r3
 800df62:	2300      	movge	r3, #0
 800df64:	232d      	movlt	r3, #45	; 0x2d
 800df66:	7013      	strb	r3, [r2, #0]
 800df68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df6a:	f023 0820 	bic.w	r8, r3, #32
 800df6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800df72:	d005      	beq.n	800df80 <__cvt+0x3c>
 800df74:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800df78:	d100      	bne.n	800df7c <__cvt+0x38>
 800df7a:	3501      	adds	r5, #1
 800df7c:	2302      	movs	r3, #2
 800df7e:	e000      	b.n	800df82 <__cvt+0x3e>
 800df80:	2303      	movs	r3, #3
 800df82:	aa07      	add	r2, sp, #28
 800df84:	9204      	str	r2, [sp, #16]
 800df86:	aa06      	add	r2, sp, #24
 800df88:	e9cd a202 	strd	sl, r2, [sp, #8]
 800df8c:	e9cd 3500 	strd	r3, r5, [sp]
 800df90:	4622      	mov	r2, r4
 800df92:	463b      	mov	r3, r7
 800df94:	f000 fd44 	bl	800ea20 <_dtoa_r>
 800df98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800df9c:	4606      	mov	r6, r0
 800df9e:	d102      	bne.n	800dfa6 <__cvt+0x62>
 800dfa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dfa2:	07db      	lsls	r3, r3, #31
 800dfa4:	d522      	bpl.n	800dfec <__cvt+0xa8>
 800dfa6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dfaa:	eb06 0905 	add.w	r9, r6, r5
 800dfae:	d110      	bne.n	800dfd2 <__cvt+0x8e>
 800dfb0:	7833      	ldrb	r3, [r6, #0]
 800dfb2:	2b30      	cmp	r3, #48	; 0x30
 800dfb4:	d10a      	bne.n	800dfcc <__cvt+0x88>
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	2300      	movs	r3, #0
 800dfba:	4620      	mov	r0, r4
 800dfbc:	4639      	mov	r1, r7
 800dfbe:	f7f2 fd5b 	bl	8000a78 <__aeabi_dcmpeq>
 800dfc2:	b918      	cbnz	r0, 800dfcc <__cvt+0x88>
 800dfc4:	f1c5 0501 	rsb	r5, r5, #1
 800dfc8:	f8ca 5000 	str.w	r5, [sl]
 800dfcc:	f8da 3000 	ldr.w	r3, [sl]
 800dfd0:	4499      	add	r9, r3
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	4639      	mov	r1, r7
 800dfda:	f7f2 fd4d 	bl	8000a78 <__aeabi_dcmpeq>
 800dfde:	b108      	cbz	r0, 800dfe4 <__cvt+0xa0>
 800dfe0:	f8cd 901c 	str.w	r9, [sp, #28]
 800dfe4:	2230      	movs	r2, #48	; 0x30
 800dfe6:	9b07      	ldr	r3, [sp, #28]
 800dfe8:	454b      	cmp	r3, r9
 800dfea:	d307      	bcc.n	800dffc <__cvt+0xb8>
 800dfec:	9b07      	ldr	r3, [sp, #28]
 800dfee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dff0:	1b9b      	subs	r3, r3, r6
 800dff2:	4630      	mov	r0, r6
 800dff4:	6013      	str	r3, [r2, #0]
 800dff6:	b008      	add	sp, #32
 800dff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dffc:	1c59      	adds	r1, r3, #1
 800dffe:	9107      	str	r1, [sp, #28]
 800e000:	701a      	strb	r2, [r3, #0]
 800e002:	e7f0      	b.n	800dfe6 <__cvt+0xa2>

0800e004 <__exponent>:
 800e004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e006:	4603      	mov	r3, r0
 800e008:	2900      	cmp	r1, #0
 800e00a:	bfb8      	it	lt
 800e00c:	4249      	neglt	r1, r1
 800e00e:	f803 2b02 	strb.w	r2, [r3], #2
 800e012:	bfb4      	ite	lt
 800e014:	222d      	movlt	r2, #45	; 0x2d
 800e016:	222b      	movge	r2, #43	; 0x2b
 800e018:	2909      	cmp	r1, #9
 800e01a:	7042      	strb	r2, [r0, #1]
 800e01c:	dd2a      	ble.n	800e074 <__exponent+0x70>
 800e01e:	f10d 0407 	add.w	r4, sp, #7
 800e022:	46a4      	mov	ip, r4
 800e024:	270a      	movs	r7, #10
 800e026:	46a6      	mov	lr, r4
 800e028:	460a      	mov	r2, r1
 800e02a:	fb91 f6f7 	sdiv	r6, r1, r7
 800e02e:	fb07 1516 	mls	r5, r7, r6, r1
 800e032:	3530      	adds	r5, #48	; 0x30
 800e034:	2a63      	cmp	r2, #99	; 0x63
 800e036:	f104 34ff 	add.w	r4, r4, #4294967295
 800e03a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e03e:	4631      	mov	r1, r6
 800e040:	dcf1      	bgt.n	800e026 <__exponent+0x22>
 800e042:	3130      	adds	r1, #48	; 0x30
 800e044:	f1ae 0502 	sub.w	r5, lr, #2
 800e048:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e04c:	1c44      	adds	r4, r0, #1
 800e04e:	4629      	mov	r1, r5
 800e050:	4561      	cmp	r1, ip
 800e052:	d30a      	bcc.n	800e06a <__exponent+0x66>
 800e054:	f10d 0209 	add.w	r2, sp, #9
 800e058:	eba2 020e 	sub.w	r2, r2, lr
 800e05c:	4565      	cmp	r5, ip
 800e05e:	bf88      	it	hi
 800e060:	2200      	movhi	r2, #0
 800e062:	4413      	add	r3, r2
 800e064:	1a18      	subs	r0, r3, r0
 800e066:	b003      	add	sp, #12
 800e068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e06a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e06e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e072:	e7ed      	b.n	800e050 <__exponent+0x4c>
 800e074:	2330      	movs	r3, #48	; 0x30
 800e076:	3130      	adds	r1, #48	; 0x30
 800e078:	7083      	strb	r3, [r0, #2]
 800e07a:	70c1      	strb	r1, [r0, #3]
 800e07c:	1d03      	adds	r3, r0, #4
 800e07e:	e7f1      	b.n	800e064 <__exponent+0x60>

0800e080 <_printf_float>:
 800e080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e084:	b091      	sub	sp, #68	; 0x44
 800e086:	460c      	mov	r4, r1
 800e088:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e08c:	4616      	mov	r6, r2
 800e08e:	461f      	mov	r7, r3
 800e090:	4605      	mov	r5, r0
 800e092:	f001 fac5 	bl	800f620 <_localeconv_r>
 800e096:	6803      	ldr	r3, [r0, #0]
 800e098:	9309      	str	r3, [sp, #36]	; 0x24
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7f2 f870 	bl	8000180 <strlen>
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	930e      	str	r3, [sp, #56]	; 0x38
 800e0a4:	f8d8 3000 	ldr.w	r3, [r8]
 800e0a8:	900a      	str	r0, [sp, #40]	; 0x28
 800e0aa:	3307      	adds	r3, #7
 800e0ac:	f023 0307 	bic.w	r3, r3, #7
 800e0b0:	f103 0208 	add.w	r2, r3, #8
 800e0b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e0b8:	f8d4 b000 	ldr.w	fp, [r4]
 800e0bc:	f8c8 2000 	str.w	r2, [r8]
 800e0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e0c8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800e0cc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800e0d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0d4:	4b9c      	ldr	r3, [pc, #624]	; (800e348 <_printf_float+0x2c8>)
 800e0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0da:	4640      	mov	r0, r8
 800e0dc:	f7f2 fcfe 	bl	8000adc <__aeabi_dcmpun>
 800e0e0:	bb70      	cbnz	r0, 800e140 <_printf_float+0xc0>
 800e0e2:	4b99      	ldr	r3, [pc, #612]	; (800e348 <_printf_float+0x2c8>)
 800e0e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ea:	4640      	mov	r0, r8
 800e0ec:	f7f2 fcd8 	bl	8000aa0 <__aeabi_dcmple>
 800e0f0:	bb30      	cbnz	r0, 800e140 <_printf_float+0xc0>
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	4640      	mov	r0, r8
 800e0f8:	4651      	mov	r1, sl
 800e0fa:	f7f2 fcc7 	bl	8000a8c <__aeabi_dcmplt>
 800e0fe:	b110      	cbz	r0, 800e106 <_printf_float+0x86>
 800e100:	232d      	movs	r3, #45	; 0x2d
 800e102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e106:	4b91      	ldr	r3, [pc, #580]	; (800e34c <_printf_float+0x2cc>)
 800e108:	4891      	ldr	r0, [pc, #580]	; (800e350 <_printf_float+0x2d0>)
 800e10a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e10e:	bf94      	ite	ls
 800e110:	4698      	movls	r8, r3
 800e112:	4680      	movhi	r8, r0
 800e114:	2303      	movs	r3, #3
 800e116:	6123      	str	r3, [r4, #16]
 800e118:	f02b 0304 	bic.w	r3, fp, #4
 800e11c:	6023      	str	r3, [r4, #0]
 800e11e:	f04f 0a00 	mov.w	sl, #0
 800e122:	9700      	str	r7, [sp, #0]
 800e124:	4633      	mov	r3, r6
 800e126:	aa0f      	add	r2, sp, #60	; 0x3c
 800e128:	4621      	mov	r1, r4
 800e12a:	4628      	mov	r0, r5
 800e12c:	f000 f9d2 	bl	800e4d4 <_printf_common>
 800e130:	3001      	adds	r0, #1
 800e132:	f040 808f 	bne.w	800e254 <_printf_float+0x1d4>
 800e136:	f04f 30ff 	mov.w	r0, #4294967295
 800e13a:	b011      	add	sp, #68	; 0x44
 800e13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e140:	4642      	mov	r2, r8
 800e142:	4653      	mov	r3, sl
 800e144:	4640      	mov	r0, r8
 800e146:	4651      	mov	r1, sl
 800e148:	f7f2 fcc8 	bl	8000adc <__aeabi_dcmpun>
 800e14c:	b140      	cbz	r0, 800e160 <_printf_float+0xe0>
 800e14e:	f1ba 0f00 	cmp.w	sl, #0
 800e152:	bfbc      	itt	lt
 800e154:	232d      	movlt	r3, #45	; 0x2d
 800e156:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e15a:	487e      	ldr	r0, [pc, #504]	; (800e354 <_printf_float+0x2d4>)
 800e15c:	4b7e      	ldr	r3, [pc, #504]	; (800e358 <_printf_float+0x2d8>)
 800e15e:	e7d4      	b.n	800e10a <_printf_float+0x8a>
 800e160:	6863      	ldr	r3, [r4, #4]
 800e162:	1c5a      	adds	r2, r3, #1
 800e164:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e168:	d142      	bne.n	800e1f0 <_printf_float+0x170>
 800e16a:	2306      	movs	r3, #6
 800e16c:	6063      	str	r3, [r4, #4]
 800e16e:	2200      	movs	r2, #0
 800e170:	9206      	str	r2, [sp, #24]
 800e172:	aa0e      	add	r2, sp, #56	; 0x38
 800e174:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800e178:	aa0d      	add	r2, sp, #52	; 0x34
 800e17a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800e17e:	9203      	str	r2, [sp, #12]
 800e180:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800e184:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e188:	6023      	str	r3, [r4, #0]
 800e18a:	6863      	ldr	r3, [r4, #4]
 800e18c:	9300      	str	r3, [sp, #0]
 800e18e:	4642      	mov	r2, r8
 800e190:	4653      	mov	r3, sl
 800e192:	4628      	mov	r0, r5
 800e194:	910b      	str	r1, [sp, #44]	; 0x2c
 800e196:	f7ff fed5 	bl	800df44 <__cvt>
 800e19a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e19c:	2947      	cmp	r1, #71	; 0x47
 800e19e:	4680      	mov	r8, r0
 800e1a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e1a2:	d108      	bne.n	800e1b6 <_printf_float+0x136>
 800e1a4:	1cc8      	adds	r0, r1, #3
 800e1a6:	db02      	blt.n	800e1ae <_printf_float+0x12e>
 800e1a8:	6863      	ldr	r3, [r4, #4]
 800e1aa:	4299      	cmp	r1, r3
 800e1ac:	dd40      	ble.n	800e230 <_printf_float+0x1b0>
 800e1ae:	f1a9 0902 	sub.w	r9, r9, #2
 800e1b2:	fa5f f989 	uxtb.w	r9, r9
 800e1b6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e1ba:	d81f      	bhi.n	800e1fc <_printf_float+0x17c>
 800e1bc:	3901      	subs	r1, #1
 800e1be:	464a      	mov	r2, r9
 800e1c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e1c4:	910d      	str	r1, [sp, #52]	; 0x34
 800e1c6:	f7ff ff1d 	bl	800e004 <__exponent>
 800e1ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1cc:	1813      	adds	r3, r2, r0
 800e1ce:	2a01      	cmp	r2, #1
 800e1d0:	4682      	mov	sl, r0
 800e1d2:	6123      	str	r3, [r4, #16]
 800e1d4:	dc02      	bgt.n	800e1dc <_printf_float+0x15c>
 800e1d6:	6822      	ldr	r2, [r4, #0]
 800e1d8:	07d2      	lsls	r2, r2, #31
 800e1da:	d501      	bpl.n	800e1e0 <_printf_float+0x160>
 800e1dc:	3301      	adds	r3, #1
 800e1de:	6123      	str	r3, [r4, #16]
 800e1e0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d09c      	beq.n	800e122 <_printf_float+0xa2>
 800e1e8:	232d      	movs	r3, #45	; 0x2d
 800e1ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1ee:	e798      	b.n	800e122 <_printf_float+0xa2>
 800e1f0:	2947      	cmp	r1, #71	; 0x47
 800e1f2:	d1bc      	bne.n	800e16e <_printf_float+0xee>
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d1ba      	bne.n	800e16e <_printf_float+0xee>
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	e7b7      	b.n	800e16c <_printf_float+0xec>
 800e1fc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e200:	d118      	bne.n	800e234 <_printf_float+0x1b4>
 800e202:	2900      	cmp	r1, #0
 800e204:	6863      	ldr	r3, [r4, #4]
 800e206:	dd0b      	ble.n	800e220 <_printf_float+0x1a0>
 800e208:	6121      	str	r1, [r4, #16]
 800e20a:	b913      	cbnz	r3, 800e212 <_printf_float+0x192>
 800e20c:	6822      	ldr	r2, [r4, #0]
 800e20e:	07d0      	lsls	r0, r2, #31
 800e210:	d502      	bpl.n	800e218 <_printf_float+0x198>
 800e212:	3301      	adds	r3, #1
 800e214:	440b      	add	r3, r1
 800e216:	6123      	str	r3, [r4, #16]
 800e218:	65a1      	str	r1, [r4, #88]	; 0x58
 800e21a:	f04f 0a00 	mov.w	sl, #0
 800e21e:	e7df      	b.n	800e1e0 <_printf_float+0x160>
 800e220:	b913      	cbnz	r3, 800e228 <_printf_float+0x1a8>
 800e222:	6822      	ldr	r2, [r4, #0]
 800e224:	07d2      	lsls	r2, r2, #31
 800e226:	d501      	bpl.n	800e22c <_printf_float+0x1ac>
 800e228:	3302      	adds	r3, #2
 800e22a:	e7f4      	b.n	800e216 <_printf_float+0x196>
 800e22c:	2301      	movs	r3, #1
 800e22e:	e7f2      	b.n	800e216 <_printf_float+0x196>
 800e230:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e236:	4299      	cmp	r1, r3
 800e238:	db05      	blt.n	800e246 <_printf_float+0x1c6>
 800e23a:	6823      	ldr	r3, [r4, #0]
 800e23c:	6121      	str	r1, [r4, #16]
 800e23e:	07d8      	lsls	r0, r3, #31
 800e240:	d5ea      	bpl.n	800e218 <_printf_float+0x198>
 800e242:	1c4b      	adds	r3, r1, #1
 800e244:	e7e7      	b.n	800e216 <_printf_float+0x196>
 800e246:	2900      	cmp	r1, #0
 800e248:	bfd4      	ite	le
 800e24a:	f1c1 0202 	rsble	r2, r1, #2
 800e24e:	2201      	movgt	r2, #1
 800e250:	4413      	add	r3, r2
 800e252:	e7e0      	b.n	800e216 <_printf_float+0x196>
 800e254:	6823      	ldr	r3, [r4, #0]
 800e256:	055a      	lsls	r2, r3, #21
 800e258:	d407      	bmi.n	800e26a <_printf_float+0x1ea>
 800e25a:	6923      	ldr	r3, [r4, #16]
 800e25c:	4642      	mov	r2, r8
 800e25e:	4631      	mov	r1, r6
 800e260:	4628      	mov	r0, r5
 800e262:	47b8      	blx	r7
 800e264:	3001      	adds	r0, #1
 800e266:	d12b      	bne.n	800e2c0 <_printf_float+0x240>
 800e268:	e765      	b.n	800e136 <_printf_float+0xb6>
 800e26a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e26e:	f240 80dc 	bls.w	800e42a <_printf_float+0x3aa>
 800e272:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e276:	2200      	movs	r2, #0
 800e278:	2300      	movs	r3, #0
 800e27a:	f7f2 fbfd 	bl	8000a78 <__aeabi_dcmpeq>
 800e27e:	2800      	cmp	r0, #0
 800e280:	d033      	beq.n	800e2ea <_printf_float+0x26a>
 800e282:	4a36      	ldr	r2, [pc, #216]	; (800e35c <_printf_float+0x2dc>)
 800e284:	2301      	movs	r3, #1
 800e286:	4631      	mov	r1, r6
 800e288:	4628      	mov	r0, r5
 800e28a:	47b8      	blx	r7
 800e28c:	3001      	adds	r0, #1
 800e28e:	f43f af52 	beq.w	800e136 <_printf_float+0xb6>
 800e292:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e296:	429a      	cmp	r2, r3
 800e298:	db02      	blt.n	800e2a0 <_printf_float+0x220>
 800e29a:	6823      	ldr	r3, [r4, #0]
 800e29c:	07d8      	lsls	r0, r3, #31
 800e29e:	d50f      	bpl.n	800e2c0 <_printf_float+0x240>
 800e2a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2a4:	4631      	mov	r1, r6
 800e2a6:	4628      	mov	r0, r5
 800e2a8:	47b8      	blx	r7
 800e2aa:	3001      	adds	r0, #1
 800e2ac:	f43f af43 	beq.w	800e136 <_printf_float+0xb6>
 800e2b0:	f04f 0800 	mov.w	r8, #0
 800e2b4:	f104 091a 	add.w	r9, r4, #26
 800e2b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2ba:	3b01      	subs	r3, #1
 800e2bc:	4543      	cmp	r3, r8
 800e2be:	dc09      	bgt.n	800e2d4 <_printf_float+0x254>
 800e2c0:	6823      	ldr	r3, [r4, #0]
 800e2c2:	079b      	lsls	r3, r3, #30
 800e2c4:	f100 8101 	bmi.w	800e4ca <_printf_float+0x44a>
 800e2c8:	68e0      	ldr	r0, [r4, #12]
 800e2ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2cc:	4298      	cmp	r0, r3
 800e2ce:	bfb8      	it	lt
 800e2d0:	4618      	movlt	r0, r3
 800e2d2:	e732      	b.n	800e13a <_printf_float+0xba>
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	464a      	mov	r2, r9
 800e2d8:	4631      	mov	r1, r6
 800e2da:	4628      	mov	r0, r5
 800e2dc:	47b8      	blx	r7
 800e2de:	3001      	adds	r0, #1
 800e2e0:	f43f af29 	beq.w	800e136 <_printf_float+0xb6>
 800e2e4:	f108 0801 	add.w	r8, r8, #1
 800e2e8:	e7e6      	b.n	800e2b8 <_printf_float+0x238>
 800e2ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	dc37      	bgt.n	800e360 <_printf_float+0x2e0>
 800e2f0:	4a1a      	ldr	r2, [pc, #104]	; (800e35c <_printf_float+0x2dc>)
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	4631      	mov	r1, r6
 800e2f6:	4628      	mov	r0, r5
 800e2f8:	47b8      	blx	r7
 800e2fa:	3001      	adds	r0, #1
 800e2fc:	f43f af1b 	beq.w	800e136 <_printf_float+0xb6>
 800e300:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e304:	4313      	orrs	r3, r2
 800e306:	d102      	bne.n	800e30e <_printf_float+0x28e>
 800e308:	6823      	ldr	r3, [r4, #0]
 800e30a:	07d9      	lsls	r1, r3, #31
 800e30c:	d5d8      	bpl.n	800e2c0 <_printf_float+0x240>
 800e30e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e312:	4631      	mov	r1, r6
 800e314:	4628      	mov	r0, r5
 800e316:	47b8      	blx	r7
 800e318:	3001      	adds	r0, #1
 800e31a:	f43f af0c 	beq.w	800e136 <_printf_float+0xb6>
 800e31e:	f04f 0900 	mov.w	r9, #0
 800e322:	f104 0a1a 	add.w	sl, r4, #26
 800e326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e328:	425b      	negs	r3, r3
 800e32a:	454b      	cmp	r3, r9
 800e32c:	dc01      	bgt.n	800e332 <_printf_float+0x2b2>
 800e32e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e330:	e794      	b.n	800e25c <_printf_float+0x1dc>
 800e332:	2301      	movs	r3, #1
 800e334:	4652      	mov	r2, sl
 800e336:	4631      	mov	r1, r6
 800e338:	4628      	mov	r0, r5
 800e33a:	47b8      	blx	r7
 800e33c:	3001      	adds	r0, #1
 800e33e:	f43f aefa 	beq.w	800e136 <_printf_float+0xb6>
 800e342:	f109 0901 	add.w	r9, r9, #1
 800e346:	e7ee      	b.n	800e326 <_printf_float+0x2a6>
 800e348:	7fefffff 	.word	0x7fefffff
 800e34c:	08010ddc 	.word	0x08010ddc
 800e350:	08010de0 	.word	0x08010de0
 800e354:	08010de8 	.word	0x08010de8
 800e358:	08010de4 	.word	0x08010de4
 800e35c:	08010dec 	.word	0x08010dec
 800e360:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e362:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e364:	429a      	cmp	r2, r3
 800e366:	bfa8      	it	ge
 800e368:	461a      	movge	r2, r3
 800e36a:	2a00      	cmp	r2, #0
 800e36c:	4691      	mov	r9, r2
 800e36e:	dc37      	bgt.n	800e3e0 <_printf_float+0x360>
 800e370:	f04f 0b00 	mov.w	fp, #0
 800e374:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e378:	f104 021a 	add.w	r2, r4, #26
 800e37c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e380:	ebaa 0309 	sub.w	r3, sl, r9
 800e384:	455b      	cmp	r3, fp
 800e386:	dc33      	bgt.n	800e3f0 <_printf_float+0x370>
 800e388:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e38c:	429a      	cmp	r2, r3
 800e38e:	db3b      	blt.n	800e408 <_printf_float+0x388>
 800e390:	6823      	ldr	r3, [r4, #0]
 800e392:	07da      	lsls	r2, r3, #31
 800e394:	d438      	bmi.n	800e408 <_printf_float+0x388>
 800e396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e398:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e39a:	eba3 020a 	sub.w	r2, r3, sl
 800e39e:	eba3 0901 	sub.w	r9, r3, r1
 800e3a2:	4591      	cmp	r9, r2
 800e3a4:	bfa8      	it	ge
 800e3a6:	4691      	movge	r9, r2
 800e3a8:	f1b9 0f00 	cmp.w	r9, #0
 800e3ac:	dc34      	bgt.n	800e418 <_printf_float+0x398>
 800e3ae:	f04f 0800 	mov.w	r8, #0
 800e3b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e3b6:	f104 0a1a 	add.w	sl, r4, #26
 800e3ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e3be:	1a9b      	subs	r3, r3, r2
 800e3c0:	eba3 0309 	sub.w	r3, r3, r9
 800e3c4:	4543      	cmp	r3, r8
 800e3c6:	f77f af7b 	ble.w	800e2c0 <_printf_float+0x240>
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	4652      	mov	r2, sl
 800e3ce:	4631      	mov	r1, r6
 800e3d0:	4628      	mov	r0, r5
 800e3d2:	47b8      	blx	r7
 800e3d4:	3001      	adds	r0, #1
 800e3d6:	f43f aeae 	beq.w	800e136 <_printf_float+0xb6>
 800e3da:	f108 0801 	add.w	r8, r8, #1
 800e3de:	e7ec      	b.n	800e3ba <_printf_float+0x33a>
 800e3e0:	4613      	mov	r3, r2
 800e3e2:	4631      	mov	r1, r6
 800e3e4:	4642      	mov	r2, r8
 800e3e6:	4628      	mov	r0, r5
 800e3e8:	47b8      	blx	r7
 800e3ea:	3001      	adds	r0, #1
 800e3ec:	d1c0      	bne.n	800e370 <_printf_float+0x2f0>
 800e3ee:	e6a2      	b.n	800e136 <_printf_float+0xb6>
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	4631      	mov	r1, r6
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	920b      	str	r2, [sp, #44]	; 0x2c
 800e3f8:	47b8      	blx	r7
 800e3fa:	3001      	adds	r0, #1
 800e3fc:	f43f ae9b 	beq.w	800e136 <_printf_float+0xb6>
 800e400:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e402:	f10b 0b01 	add.w	fp, fp, #1
 800e406:	e7b9      	b.n	800e37c <_printf_float+0x2fc>
 800e408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e40c:	4631      	mov	r1, r6
 800e40e:	4628      	mov	r0, r5
 800e410:	47b8      	blx	r7
 800e412:	3001      	adds	r0, #1
 800e414:	d1bf      	bne.n	800e396 <_printf_float+0x316>
 800e416:	e68e      	b.n	800e136 <_printf_float+0xb6>
 800e418:	464b      	mov	r3, r9
 800e41a:	eb08 020a 	add.w	r2, r8, sl
 800e41e:	4631      	mov	r1, r6
 800e420:	4628      	mov	r0, r5
 800e422:	47b8      	blx	r7
 800e424:	3001      	adds	r0, #1
 800e426:	d1c2      	bne.n	800e3ae <_printf_float+0x32e>
 800e428:	e685      	b.n	800e136 <_printf_float+0xb6>
 800e42a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e42c:	2a01      	cmp	r2, #1
 800e42e:	dc01      	bgt.n	800e434 <_printf_float+0x3b4>
 800e430:	07db      	lsls	r3, r3, #31
 800e432:	d537      	bpl.n	800e4a4 <_printf_float+0x424>
 800e434:	2301      	movs	r3, #1
 800e436:	4642      	mov	r2, r8
 800e438:	4631      	mov	r1, r6
 800e43a:	4628      	mov	r0, r5
 800e43c:	47b8      	blx	r7
 800e43e:	3001      	adds	r0, #1
 800e440:	f43f ae79 	beq.w	800e136 <_printf_float+0xb6>
 800e444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e448:	4631      	mov	r1, r6
 800e44a:	4628      	mov	r0, r5
 800e44c:	47b8      	blx	r7
 800e44e:	3001      	adds	r0, #1
 800e450:	f43f ae71 	beq.w	800e136 <_printf_float+0xb6>
 800e454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e458:	2200      	movs	r2, #0
 800e45a:	2300      	movs	r3, #0
 800e45c:	f7f2 fb0c 	bl	8000a78 <__aeabi_dcmpeq>
 800e460:	b9d8      	cbnz	r0, 800e49a <_printf_float+0x41a>
 800e462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e464:	f108 0201 	add.w	r2, r8, #1
 800e468:	3b01      	subs	r3, #1
 800e46a:	4631      	mov	r1, r6
 800e46c:	4628      	mov	r0, r5
 800e46e:	47b8      	blx	r7
 800e470:	3001      	adds	r0, #1
 800e472:	d10e      	bne.n	800e492 <_printf_float+0x412>
 800e474:	e65f      	b.n	800e136 <_printf_float+0xb6>
 800e476:	2301      	movs	r3, #1
 800e478:	464a      	mov	r2, r9
 800e47a:	4631      	mov	r1, r6
 800e47c:	4628      	mov	r0, r5
 800e47e:	47b8      	blx	r7
 800e480:	3001      	adds	r0, #1
 800e482:	f43f ae58 	beq.w	800e136 <_printf_float+0xb6>
 800e486:	f108 0801 	add.w	r8, r8, #1
 800e48a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e48c:	3b01      	subs	r3, #1
 800e48e:	4543      	cmp	r3, r8
 800e490:	dcf1      	bgt.n	800e476 <_printf_float+0x3f6>
 800e492:	4653      	mov	r3, sl
 800e494:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e498:	e6e1      	b.n	800e25e <_printf_float+0x1de>
 800e49a:	f04f 0800 	mov.w	r8, #0
 800e49e:	f104 091a 	add.w	r9, r4, #26
 800e4a2:	e7f2      	b.n	800e48a <_printf_float+0x40a>
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	4642      	mov	r2, r8
 800e4a8:	e7df      	b.n	800e46a <_printf_float+0x3ea>
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	464a      	mov	r2, r9
 800e4ae:	4631      	mov	r1, r6
 800e4b0:	4628      	mov	r0, r5
 800e4b2:	47b8      	blx	r7
 800e4b4:	3001      	adds	r0, #1
 800e4b6:	f43f ae3e 	beq.w	800e136 <_printf_float+0xb6>
 800e4ba:	f108 0801 	add.w	r8, r8, #1
 800e4be:	68e3      	ldr	r3, [r4, #12]
 800e4c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e4c2:	1a5b      	subs	r3, r3, r1
 800e4c4:	4543      	cmp	r3, r8
 800e4c6:	dcf0      	bgt.n	800e4aa <_printf_float+0x42a>
 800e4c8:	e6fe      	b.n	800e2c8 <_printf_float+0x248>
 800e4ca:	f04f 0800 	mov.w	r8, #0
 800e4ce:	f104 0919 	add.w	r9, r4, #25
 800e4d2:	e7f4      	b.n	800e4be <_printf_float+0x43e>

0800e4d4 <_printf_common>:
 800e4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d8:	4616      	mov	r6, r2
 800e4da:	4699      	mov	r9, r3
 800e4dc:	688a      	ldr	r2, [r1, #8]
 800e4de:	690b      	ldr	r3, [r1, #16]
 800e4e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	bfb8      	it	lt
 800e4e8:	4613      	movlt	r3, r2
 800e4ea:	6033      	str	r3, [r6, #0]
 800e4ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4f0:	4607      	mov	r7, r0
 800e4f2:	460c      	mov	r4, r1
 800e4f4:	b10a      	cbz	r2, 800e4fa <_printf_common+0x26>
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	6033      	str	r3, [r6, #0]
 800e4fa:	6823      	ldr	r3, [r4, #0]
 800e4fc:	0699      	lsls	r1, r3, #26
 800e4fe:	bf42      	ittt	mi
 800e500:	6833      	ldrmi	r3, [r6, #0]
 800e502:	3302      	addmi	r3, #2
 800e504:	6033      	strmi	r3, [r6, #0]
 800e506:	6825      	ldr	r5, [r4, #0]
 800e508:	f015 0506 	ands.w	r5, r5, #6
 800e50c:	d106      	bne.n	800e51c <_printf_common+0x48>
 800e50e:	f104 0a19 	add.w	sl, r4, #25
 800e512:	68e3      	ldr	r3, [r4, #12]
 800e514:	6832      	ldr	r2, [r6, #0]
 800e516:	1a9b      	subs	r3, r3, r2
 800e518:	42ab      	cmp	r3, r5
 800e51a:	dc26      	bgt.n	800e56a <_printf_common+0x96>
 800e51c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e520:	1e13      	subs	r3, r2, #0
 800e522:	6822      	ldr	r2, [r4, #0]
 800e524:	bf18      	it	ne
 800e526:	2301      	movne	r3, #1
 800e528:	0692      	lsls	r2, r2, #26
 800e52a:	d42b      	bmi.n	800e584 <_printf_common+0xb0>
 800e52c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e530:	4649      	mov	r1, r9
 800e532:	4638      	mov	r0, r7
 800e534:	47c0      	blx	r8
 800e536:	3001      	adds	r0, #1
 800e538:	d01e      	beq.n	800e578 <_printf_common+0xa4>
 800e53a:	6823      	ldr	r3, [r4, #0]
 800e53c:	68e5      	ldr	r5, [r4, #12]
 800e53e:	6832      	ldr	r2, [r6, #0]
 800e540:	f003 0306 	and.w	r3, r3, #6
 800e544:	2b04      	cmp	r3, #4
 800e546:	bf08      	it	eq
 800e548:	1aad      	subeq	r5, r5, r2
 800e54a:	68a3      	ldr	r3, [r4, #8]
 800e54c:	6922      	ldr	r2, [r4, #16]
 800e54e:	bf0c      	ite	eq
 800e550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e554:	2500      	movne	r5, #0
 800e556:	4293      	cmp	r3, r2
 800e558:	bfc4      	itt	gt
 800e55a:	1a9b      	subgt	r3, r3, r2
 800e55c:	18ed      	addgt	r5, r5, r3
 800e55e:	2600      	movs	r6, #0
 800e560:	341a      	adds	r4, #26
 800e562:	42b5      	cmp	r5, r6
 800e564:	d11a      	bne.n	800e59c <_printf_common+0xc8>
 800e566:	2000      	movs	r0, #0
 800e568:	e008      	b.n	800e57c <_printf_common+0xa8>
 800e56a:	2301      	movs	r3, #1
 800e56c:	4652      	mov	r2, sl
 800e56e:	4649      	mov	r1, r9
 800e570:	4638      	mov	r0, r7
 800e572:	47c0      	blx	r8
 800e574:	3001      	adds	r0, #1
 800e576:	d103      	bne.n	800e580 <_printf_common+0xac>
 800e578:	f04f 30ff 	mov.w	r0, #4294967295
 800e57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e580:	3501      	adds	r5, #1
 800e582:	e7c6      	b.n	800e512 <_printf_common+0x3e>
 800e584:	18e1      	adds	r1, r4, r3
 800e586:	1c5a      	adds	r2, r3, #1
 800e588:	2030      	movs	r0, #48	; 0x30
 800e58a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e58e:	4422      	add	r2, r4
 800e590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e594:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e598:	3302      	adds	r3, #2
 800e59a:	e7c7      	b.n	800e52c <_printf_common+0x58>
 800e59c:	2301      	movs	r3, #1
 800e59e:	4622      	mov	r2, r4
 800e5a0:	4649      	mov	r1, r9
 800e5a2:	4638      	mov	r0, r7
 800e5a4:	47c0      	blx	r8
 800e5a6:	3001      	adds	r0, #1
 800e5a8:	d0e6      	beq.n	800e578 <_printf_common+0xa4>
 800e5aa:	3601      	adds	r6, #1
 800e5ac:	e7d9      	b.n	800e562 <_printf_common+0x8e>
	...

0800e5b0 <_printf_i>:
 800e5b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5b4:	7e0f      	ldrb	r7, [r1, #24]
 800e5b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e5b8:	2f78      	cmp	r7, #120	; 0x78
 800e5ba:	4691      	mov	r9, r2
 800e5bc:	4680      	mov	r8, r0
 800e5be:	460c      	mov	r4, r1
 800e5c0:	469a      	mov	sl, r3
 800e5c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e5c6:	d807      	bhi.n	800e5d8 <_printf_i+0x28>
 800e5c8:	2f62      	cmp	r7, #98	; 0x62
 800e5ca:	d80a      	bhi.n	800e5e2 <_printf_i+0x32>
 800e5cc:	2f00      	cmp	r7, #0
 800e5ce:	f000 80d8 	beq.w	800e782 <_printf_i+0x1d2>
 800e5d2:	2f58      	cmp	r7, #88	; 0x58
 800e5d4:	f000 80a3 	beq.w	800e71e <_printf_i+0x16e>
 800e5d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5e0:	e03a      	b.n	800e658 <_printf_i+0xa8>
 800e5e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5e6:	2b15      	cmp	r3, #21
 800e5e8:	d8f6      	bhi.n	800e5d8 <_printf_i+0x28>
 800e5ea:	a101      	add	r1, pc, #4	; (adr r1, 800e5f0 <_printf_i+0x40>)
 800e5ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5f0:	0800e649 	.word	0x0800e649
 800e5f4:	0800e65d 	.word	0x0800e65d
 800e5f8:	0800e5d9 	.word	0x0800e5d9
 800e5fc:	0800e5d9 	.word	0x0800e5d9
 800e600:	0800e5d9 	.word	0x0800e5d9
 800e604:	0800e5d9 	.word	0x0800e5d9
 800e608:	0800e65d 	.word	0x0800e65d
 800e60c:	0800e5d9 	.word	0x0800e5d9
 800e610:	0800e5d9 	.word	0x0800e5d9
 800e614:	0800e5d9 	.word	0x0800e5d9
 800e618:	0800e5d9 	.word	0x0800e5d9
 800e61c:	0800e769 	.word	0x0800e769
 800e620:	0800e68d 	.word	0x0800e68d
 800e624:	0800e74b 	.word	0x0800e74b
 800e628:	0800e5d9 	.word	0x0800e5d9
 800e62c:	0800e5d9 	.word	0x0800e5d9
 800e630:	0800e78b 	.word	0x0800e78b
 800e634:	0800e5d9 	.word	0x0800e5d9
 800e638:	0800e68d 	.word	0x0800e68d
 800e63c:	0800e5d9 	.word	0x0800e5d9
 800e640:	0800e5d9 	.word	0x0800e5d9
 800e644:	0800e753 	.word	0x0800e753
 800e648:	682b      	ldr	r3, [r5, #0]
 800e64a:	1d1a      	adds	r2, r3, #4
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	602a      	str	r2, [r5, #0]
 800e650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e658:	2301      	movs	r3, #1
 800e65a:	e0a3      	b.n	800e7a4 <_printf_i+0x1f4>
 800e65c:	6820      	ldr	r0, [r4, #0]
 800e65e:	6829      	ldr	r1, [r5, #0]
 800e660:	0606      	lsls	r6, r0, #24
 800e662:	f101 0304 	add.w	r3, r1, #4
 800e666:	d50a      	bpl.n	800e67e <_printf_i+0xce>
 800e668:	680e      	ldr	r6, [r1, #0]
 800e66a:	602b      	str	r3, [r5, #0]
 800e66c:	2e00      	cmp	r6, #0
 800e66e:	da03      	bge.n	800e678 <_printf_i+0xc8>
 800e670:	232d      	movs	r3, #45	; 0x2d
 800e672:	4276      	negs	r6, r6
 800e674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e678:	485e      	ldr	r0, [pc, #376]	; (800e7f4 <_printf_i+0x244>)
 800e67a:	230a      	movs	r3, #10
 800e67c:	e019      	b.n	800e6b2 <_printf_i+0x102>
 800e67e:	680e      	ldr	r6, [r1, #0]
 800e680:	602b      	str	r3, [r5, #0]
 800e682:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e686:	bf18      	it	ne
 800e688:	b236      	sxthne	r6, r6
 800e68a:	e7ef      	b.n	800e66c <_printf_i+0xbc>
 800e68c:	682b      	ldr	r3, [r5, #0]
 800e68e:	6820      	ldr	r0, [r4, #0]
 800e690:	1d19      	adds	r1, r3, #4
 800e692:	6029      	str	r1, [r5, #0]
 800e694:	0601      	lsls	r1, r0, #24
 800e696:	d501      	bpl.n	800e69c <_printf_i+0xec>
 800e698:	681e      	ldr	r6, [r3, #0]
 800e69a:	e002      	b.n	800e6a2 <_printf_i+0xf2>
 800e69c:	0646      	lsls	r6, r0, #25
 800e69e:	d5fb      	bpl.n	800e698 <_printf_i+0xe8>
 800e6a0:	881e      	ldrh	r6, [r3, #0]
 800e6a2:	4854      	ldr	r0, [pc, #336]	; (800e7f4 <_printf_i+0x244>)
 800e6a4:	2f6f      	cmp	r7, #111	; 0x6f
 800e6a6:	bf0c      	ite	eq
 800e6a8:	2308      	moveq	r3, #8
 800e6aa:	230a      	movne	r3, #10
 800e6ac:	2100      	movs	r1, #0
 800e6ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e6b2:	6865      	ldr	r5, [r4, #4]
 800e6b4:	60a5      	str	r5, [r4, #8]
 800e6b6:	2d00      	cmp	r5, #0
 800e6b8:	bfa2      	ittt	ge
 800e6ba:	6821      	ldrge	r1, [r4, #0]
 800e6bc:	f021 0104 	bicge.w	r1, r1, #4
 800e6c0:	6021      	strge	r1, [r4, #0]
 800e6c2:	b90e      	cbnz	r6, 800e6c8 <_printf_i+0x118>
 800e6c4:	2d00      	cmp	r5, #0
 800e6c6:	d04d      	beq.n	800e764 <_printf_i+0x1b4>
 800e6c8:	4615      	mov	r5, r2
 800e6ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800e6ce:	fb03 6711 	mls	r7, r3, r1, r6
 800e6d2:	5dc7      	ldrb	r7, [r0, r7]
 800e6d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e6d8:	4637      	mov	r7, r6
 800e6da:	42bb      	cmp	r3, r7
 800e6dc:	460e      	mov	r6, r1
 800e6de:	d9f4      	bls.n	800e6ca <_printf_i+0x11a>
 800e6e0:	2b08      	cmp	r3, #8
 800e6e2:	d10b      	bne.n	800e6fc <_printf_i+0x14c>
 800e6e4:	6823      	ldr	r3, [r4, #0]
 800e6e6:	07de      	lsls	r6, r3, #31
 800e6e8:	d508      	bpl.n	800e6fc <_printf_i+0x14c>
 800e6ea:	6923      	ldr	r3, [r4, #16]
 800e6ec:	6861      	ldr	r1, [r4, #4]
 800e6ee:	4299      	cmp	r1, r3
 800e6f0:	bfde      	ittt	le
 800e6f2:	2330      	movle	r3, #48	; 0x30
 800e6f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6fc:	1b52      	subs	r2, r2, r5
 800e6fe:	6122      	str	r2, [r4, #16]
 800e700:	f8cd a000 	str.w	sl, [sp]
 800e704:	464b      	mov	r3, r9
 800e706:	aa03      	add	r2, sp, #12
 800e708:	4621      	mov	r1, r4
 800e70a:	4640      	mov	r0, r8
 800e70c:	f7ff fee2 	bl	800e4d4 <_printf_common>
 800e710:	3001      	adds	r0, #1
 800e712:	d14c      	bne.n	800e7ae <_printf_i+0x1fe>
 800e714:	f04f 30ff 	mov.w	r0, #4294967295
 800e718:	b004      	add	sp, #16
 800e71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e71e:	4835      	ldr	r0, [pc, #212]	; (800e7f4 <_printf_i+0x244>)
 800e720:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e724:	6829      	ldr	r1, [r5, #0]
 800e726:	6823      	ldr	r3, [r4, #0]
 800e728:	f851 6b04 	ldr.w	r6, [r1], #4
 800e72c:	6029      	str	r1, [r5, #0]
 800e72e:	061d      	lsls	r5, r3, #24
 800e730:	d514      	bpl.n	800e75c <_printf_i+0x1ac>
 800e732:	07df      	lsls	r7, r3, #31
 800e734:	bf44      	itt	mi
 800e736:	f043 0320 	orrmi.w	r3, r3, #32
 800e73a:	6023      	strmi	r3, [r4, #0]
 800e73c:	b91e      	cbnz	r6, 800e746 <_printf_i+0x196>
 800e73e:	6823      	ldr	r3, [r4, #0]
 800e740:	f023 0320 	bic.w	r3, r3, #32
 800e744:	6023      	str	r3, [r4, #0]
 800e746:	2310      	movs	r3, #16
 800e748:	e7b0      	b.n	800e6ac <_printf_i+0xfc>
 800e74a:	6823      	ldr	r3, [r4, #0]
 800e74c:	f043 0320 	orr.w	r3, r3, #32
 800e750:	6023      	str	r3, [r4, #0]
 800e752:	2378      	movs	r3, #120	; 0x78
 800e754:	4828      	ldr	r0, [pc, #160]	; (800e7f8 <_printf_i+0x248>)
 800e756:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e75a:	e7e3      	b.n	800e724 <_printf_i+0x174>
 800e75c:	0659      	lsls	r1, r3, #25
 800e75e:	bf48      	it	mi
 800e760:	b2b6      	uxthmi	r6, r6
 800e762:	e7e6      	b.n	800e732 <_printf_i+0x182>
 800e764:	4615      	mov	r5, r2
 800e766:	e7bb      	b.n	800e6e0 <_printf_i+0x130>
 800e768:	682b      	ldr	r3, [r5, #0]
 800e76a:	6826      	ldr	r6, [r4, #0]
 800e76c:	6961      	ldr	r1, [r4, #20]
 800e76e:	1d18      	adds	r0, r3, #4
 800e770:	6028      	str	r0, [r5, #0]
 800e772:	0635      	lsls	r5, r6, #24
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	d501      	bpl.n	800e77c <_printf_i+0x1cc>
 800e778:	6019      	str	r1, [r3, #0]
 800e77a:	e002      	b.n	800e782 <_printf_i+0x1d2>
 800e77c:	0670      	lsls	r0, r6, #25
 800e77e:	d5fb      	bpl.n	800e778 <_printf_i+0x1c8>
 800e780:	8019      	strh	r1, [r3, #0]
 800e782:	2300      	movs	r3, #0
 800e784:	6123      	str	r3, [r4, #16]
 800e786:	4615      	mov	r5, r2
 800e788:	e7ba      	b.n	800e700 <_printf_i+0x150>
 800e78a:	682b      	ldr	r3, [r5, #0]
 800e78c:	1d1a      	adds	r2, r3, #4
 800e78e:	602a      	str	r2, [r5, #0]
 800e790:	681d      	ldr	r5, [r3, #0]
 800e792:	6862      	ldr	r2, [r4, #4]
 800e794:	2100      	movs	r1, #0
 800e796:	4628      	mov	r0, r5
 800e798:	f7f1 fcfa 	bl	8000190 <memchr>
 800e79c:	b108      	cbz	r0, 800e7a2 <_printf_i+0x1f2>
 800e79e:	1b40      	subs	r0, r0, r5
 800e7a0:	6060      	str	r0, [r4, #4]
 800e7a2:	6863      	ldr	r3, [r4, #4]
 800e7a4:	6123      	str	r3, [r4, #16]
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7ac:	e7a8      	b.n	800e700 <_printf_i+0x150>
 800e7ae:	6923      	ldr	r3, [r4, #16]
 800e7b0:	462a      	mov	r2, r5
 800e7b2:	4649      	mov	r1, r9
 800e7b4:	4640      	mov	r0, r8
 800e7b6:	47d0      	blx	sl
 800e7b8:	3001      	adds	r0, #1
 800e7ba:	d0ab      	beq.n	800e714 <_printf_i+0x164>
 800e7bc:	6823      	ldr	r3, [r4, #0]
 800e7be:	079b      	lsls	r3, r3, #30
 800e7c0:	d413      	bmi.n	800e7ea <_printf_i+0x23a>
 800e7c2:	68e0      	ldr	r0, [r4, #12]
 800e7c4:	9b03      	ldr	r3, [sp, #12]
 800e7c6:	4298      	cmp	r0, r3
 800e7c8:	bfb8      	it	lt
 800e7ca:	4618      	movlt	r0, r3
 800e7cc:	e7a4      	b.n	800e718 <_printf_i+0x168>
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	4632      	mov	r2, r6
 800e7d2:	4649      	mov	r1, r9
 800e7d4:	4640      	mov	r0, r8
 800e7d6:	47d0      	blx	sl
 800e7d8:	3001      	adds	r0, #1
 800e7da:	d09b      	beq.n	800e714 <_printf_i+0x164>
 800e7dc:	3501      	adds	r5, #1
 800e7de:	68e3      	ldr	r3, [r4, #12]
 800e7e0:	9903      	ldr	r1, [sp, #12]
 800e7e2:	1a5b      	subs	r3, r3, r1
 800e7e4:	42ab      	cmp	r3, r5
 800e7e6:	dcf2      	bgt.n	800e7ce <_printf_i+0x21e>
 800e7e8:	e7eb      	b.n	800e7c2 <_printf_i+0x212>
 800e7ea:	2500      	movs	r5, #0
 800e7ec:	f104 0619 	add.w	r6, r4, #25
 800e7f0:	e7f5      	b.n	800e7de <_printf_i+0x22e>
 800e7f2:	bf00      	nop
 800e7f4:	08010dee 	.word	0x08010dee
 800e7f8:	08010dff 	.word	0x08010dff

0800e7fc <srand>:
 800e7fc:	b538      	push	{r3, r4, r5, lr}
 800e7fe:	4b10      	ldr	r3, [pc, #64]	; (800e840 <srand+0x44>)
 800e800:	681d      	ldr	r5, [r3, #0]
 800e802:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800e804:	4604      	mov	r4, r0
 800e806:	b9b3      	cbnz	r3, 800e836 <srand+0x3a>
 800e808:	2018      	movs	r0, #24
 800e80a:	f000 ff0d 	bl	800f628 <malloc>
 800e80e:	4602      	mov	r2, r0
 800e810:	63a8      	str	r0, [r5, #56]	; 0x38
 800e812:	b920      	cbnz	r0, 800e81e <srand+0x22>
 800e814:	4b0b      	ldr	r3, [pc, #44]	; (800e844 <srand+0x48>)
 800e816:	480c      	ldr	r0, [pc, #48]	; (800e848 <srand+0x4c>)
 800e818:	2142      	movs	r1, #66	; 0x42
 800e81a:	f000 f85b 	bl	800e8d4 <__assert_func>
 800e81e:	490b      	ldr	r1, [pc, #44]	; (800e84c <srand+0x50>)
 800e820:	4b0b      	ldr	r3, [pc, #44]	; (800e850 <srand+0x54>)
 800e822:	e9c0 1300 	strd	r1, r3, [r0]
 800e826:	4b0b      	ldr	r3, [pc, #44]	; (800e854 <srand+0x58>)
 800e828:	6083      	str	r3, [r0, #8]
 800e82a:	230b      	movs	r3, #11
 800e82c:	8183      	strh	r3, [r0, #12]
 800e82e:	2100      	movs	r1, #0
 800e830:	2001      	movs	r0, #1
 800e832:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e836:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800e838:	2200      	movs	r2, #0
 800e83a:	611c      	str	r4, [r3, #16]
 800e83c:	615a      	str	r2, [r3, #20]
 800e83e:	bd38      	pop	{r3, r4, r5, pc}
 800e840:	20000024 	.word	0x20000024
 800e844:	08010e10 	.word	0x08010e10
 800e848:	08010e27 	.word	0x08010e27
 800e84c:	abcd330e 	.word	0xabcd330e
 800e850:	e66d1234 	.word	0xe66d1234
 800e854:	0005deec 	.word	0x0005deec

0800e858 <rand>:
 800e858:	4b16      	ldr	r3, [pc, #88]	; (800e8b4 <rand+0x5c>)
 800e85a:	b510      	push	{r4, lr}
 800e85c:	681c      	ldr	r4, [r3, #0]
 800e85e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e860:	b9b3      	cbnz	r3, 800e890 <rand+0x38>
 800e862:	2018      	movs	r0, #24
 800e864:	f000 fee0 	bl	800f628 <malloc>
 800e868:	4602      	mov	r2, r0
 800e86a:	63a0      	str	r0, [r4, #56]	; 0x38
 800e86c:	b920      	cbnz	r0, 800e878 <rand+0x20>
 800e86e:	4b12      	ldr	r3, [pc, #72]	; (800e8b8 <rand+0x60>)
 800e870:	4812      	ldr	r0, [pc, #72]	; (800e8bc <rand+0x64>)
 800e872:	214e      	movs	r1, #78	; 0x4e
 800e874:	f000 f82e 	bl	800e8d4 <__assert_func>
 800e878:	4911      	ldr	r1, [pc, #68]	; (800e8c0 <rand+0x68>)
 800e87a:	4b12      	ldr	r3, [pc, #72]	; (800e8c4 <rand+0x6c>)
 800e87c:	e9c0 1300 	strd	r1, r3, [r0]
 800e880:	4b11      	ldr	r3, [pc, #68]	; (800e8c8 <rand+0x70>)
 800e882:	6083      	str	r3, [r0, #8]
 800e884:	230b      	movs	r3, #11
 800e886:	8183      	strh	r3, [r0, #12]
 800e888:	2100      	movs	r1, #0
 800e88a:	2001      	movs	r0, #1
 800e88c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e890:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800e892:	4a0e      	ldr	r2, [pc, #56]	; (800e8cc <rand+0x74>)
 800e894:	6920      	ldr	r0, [r4, #16]
 800e896:	6963      	ldr	r3, [r4, #20]
 800e898:	490d      	ldr	r1, [pc, #52]	; (800e8d0 <rand+0x78>)
 800e89a:	4342      	muls	r2, r0
 800e89c:	fb01 2203 	mla	r2, r1, r3, r2
 800e8a0:	fba0 0101 	umull	r0, r1, r0, r1
 800e8a4:	1c43      	adds	r3, r0, #1
 800e8a6:	eb42 0001 	adc.w	r0, r2, r1
 800e8aa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800e8ae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e8b2:	bd10      	pop	{r4, pc}
 800e8b4:	20000024 	.word	0x20000024
 800e8b8:	08010e10 	.word	0x08010e10
 800e8bc:	08010e27 	.word	0x08010e27
 800e8c0:	abcd330e 	.word	0xabcd330e
 800e8c4:	e66d1234 	.word	0xe66d1234
 800e8c8:	0005deec 	.word	0x0005deec
 800e8cc:	5851f42d 	.word	0x5851f42d
 800e8d0:	4c957f2d 	.word	0x4c957f2d

0800e8d4 <__assert_func>:
 800e8d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8d6:	4614      	mov	r4, r2
 800e8d8:	461a      	mov	r2, r3
 800e8da:	4b09      	ldr	r3, [pc, #36]	; (800e900 <__assert_func+0x2c>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	4605      	mov	r5, r0
 800e8e0:	68d8      	ldr	r0, [r3, #12]
 800e8e2:	b14c      	cbz	r4, 800e8f8 <__assert_func+0x24>
 800e8e4:	4b07      	ldr	r3, [pc, #28]	; (800e904 <__assert_func+0x30>)
 800e8e6:	9100      	str	r1, [sp, #0]
 800e8e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e8ec:	4906      	ldr	r1, [pc, #24]	; (800e908 <__assert_func+0x34>)
 800e8ee:	462b      	mov	r3, r5
 800e8f0:	f000 fe84 	bl	800f5fc <fiprintf>
 800e8f4:	f001 fd38 	bl	8010368 <abort>
 800e8f8:	4b04      	ldr	r3, [pc, #16]	; (800e90c <__assert_func+0x38>)
 800e8fa:	461c      	mov	r4, r3
 800e8fc:	e7f3      	b.n	800e8e6 <__assert_func+0x12>
 800e8fe:	bf00      	nop
 800e900:	20000024 	.word	0x20000024
 800e904:	08010e82 	.word	0x08010e82
 800e908:	08010e8f 	.word	0x08010e8f
 800e90c:	08010ebd 	.word	0x08010ebd

0800e910 <quorem>:
 800e910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e914:	6903      	ldr	r3, [r0, #16]
 800e916:	690c      	ldr	r4, [r1, #16]
 800e918:	42a3      	cmp	r3, r4
 800e91a:	4607      	mov	r7, r0
 800e91c:	db7d      	blt.n	800ea1a <quorem+0x10a>
 800e91e:	3c01      	subs	r4, #1
 800e920:	f101 0814 	add.w	r8, r1, #20
 800e924:	f100 0514 	add.w	r5, r0, #20
 800e928:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e92c:	9301      	str	r3, [sp, #4]
 800e92e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e932:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e936:	3301      	adds	r3, #1
 800e938:	429a      	cmp	r2, r3
 800e93a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e93e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e942:	fbb2 f6f3 	udiv	r6, r2, r3
 800e946:	d32e      	bcc.n	800e9a6 <quorem+0x96>
 800e948:	f04f 0e00 	mov.w	lr, #0
 800e94c:	4640      	mov	r0, r8
 800e94e:	46ac      	mov	ip, r5
 800e950:	46f2      	mov	sl, lr
 800e952:	f850 2b04 	ldr.w	r2, [r0], #4
 800e956:	b293      	uxth	r3, r2
 800e958:	fb06 e303 	mla	r3, r6, r3, lr
 800e95c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e960:	0c12      	lsrs	r2, r2, #16
 800e962:	b29b      	uxth	r3, r3
 800e964:	fb06 e202 	mla	r2, r6, r2, lr
 800e968:	ebaa 0303 	sub.w	r3, sl, r3
 800e96c:	f8dc a000 	ldr.w	sl, [ip]
 800e970:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e974:	b292      	uxth	r2, r2
 800e976:	fa13 f38a 	uxtah	r3, r3, sl
 800e97a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e97e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e982:	b29b      	uxth	r3, r3
 800e984:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e988:	4581      	cmp	r9, r0
 800e98a:	f84c 3b04 	str.w	r3, [ip], #4
 800e98e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e992:	d2de      	bcs.n	800e952 <quorem+0x42>
 800e994:	f855 300b 	ldr.w	r3, [r5, fp]
 800e998:	b92b      	cbnz	r3, 800e9a6 <quorem+0x96>
 800e99a:	9b01      	ldr	r3, [sp, #4]
 800e99c:	3b04      	subs	r3, #4
 800e99e:	429d      	cmp	r5, r3
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	d32e      	bcc.n	800ea02 <quorem+0xf2>
 800e9a4:	613c      	str	r4, [r7, #16]
 800e9a6:	4638      	mov	r0, r7
 800e9a8:	f001 f8c4 	bl	800fb34 <__mcmp>
 800e9ac:	2800      	cmp	r0, #0
 800e9ae:	db24      	blt.n	800e9fa <quorem+0xea>
 800e9b0:	3601      	adds	r6, #1
 800e9b2:	4628      	mov	r0, r5
 800e9b4:	f04f 0c00 	mov.w	ip, #0
 800e9b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800e9bc:	f8d0 e000 	ldr.w	lr, [r0]
 800e9c0:	b293      	uxth	r3, r2
 800e9c2:	ebac 0303 	sub.w	r3, ip, r3
 800e9c6:	0c12      	lsrs	r2, r2, #16
 800e9c8:	fa13 f38e 	uxtah	r3, r3, lr
 800e9cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e9d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9da:	45c1      	cmp	r9, r8
 800e9dc:	f840 3b04 	str.w	r3, [r0], #4
 800e9e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e9e4:	d2e8      	bcs.n	800e9b8 <quorem+0xa8>
 800e9e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e9ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e9ee:	b922      	cbnz	r2, 800e9fa <quorem+0xea>
 800e9f0:	3b04      	subs	r3, #4
 800e9f2:	429d      	cmp	r5, r3
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	d30a      	bcc.n	800ea0e <quorem+0xfe>
 800e9f8:	613c      	str	r4, [r7, #16]
 800e9fa:	4630      	mov	r0, r6
 800e9fc:	b003      	add	sp, #12
 800e9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea02:	6812      	ldr	r2, [r2, #0]
 800ea04:	3b04      	subs	r3, #4
 800ea06:	2a00      	cmp	r2, #0
 800ea08:	d1cc      	bne.n	800e9a4 <quorem+0x94>
 800ea0a:	3c01      	subs	r4, #1
 800ea0c:	e7c7      	b.n	800e99e <quorem+0x8e>
 800ea0e:	6812      	ldr	r2, [r2, #0]
 800ea10:	3b04      	subs	r3, #4
 800ea12:	2a00      	cmp	r2, #0
 800ea14:	d1f0      	bne.n	800e9f8 <quorem+0xe8>
 800ea16:	3c01      	subs	r4, #1
 800ea18:	e7eb      	b.n	800e9f2 <quorem+0xe2>
 800ea1a:	2000      	movs	r0, #0
 800ea1c:	e7ee      	b.n	800e9fc <quorem+0xec>
	...

0800ea20 <_dtoa_r>:
 800ea20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea24:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ea26:	b099      	sub	sp, #100	; 0x64
 800ea28:	4616      	mov	r6, r2
 800ea2a:	461f      	mov	r7, r3
 800ea2c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ea30:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ea34:	4605      	mov	r5, r0
 800ea36:	b974      	cbnz	r4, 800ea56 <_dtoa_r+0x36>
 800ea38:	2010      	movs	r0, #16
 800ea3a:	f000 fdf5 	bl	800f628 <malloc>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	6268      	str	r0, [r5, #36]	; 0x24
 800ea42:	b920      	cbnz	r0, 800ea4e <_dtoa_r+0x2e>
 800ea44:	4ba8      	ldr	r3, [pc, #672]	; (800ece8 <_dtoa_r+0x2c8>)
 800ea46:	21ea      	movs	r1, #234	; 0xea
 800ea48:	48a8      	ldr	r0, [pc, #672]	; (800ecec <_dtoa_r+0x2cc>)
 800ea4a:	f7ff ff43 	bl	800e8d4 <__assert_func>
 800ea4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ea52:	6004      	str	r4, [r0, #0]
 800ea54:	60c4      	str	r4, [r0, #12]
 800ea56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ea58:	6819      	ldr	r1, [r3, #0]
 800ea5a:	b151      	cbz	r1, 800ea72 <_dtoa_r+0x52>
 800ea5c:	685a      	ldr	r2, [r3, #4]
 800ea5e:	604a      	str	r2, [r1, #4]
 800ea60:	2301      	movs	r3, #1
 800ea62:	4093      	lsls	r3, r2
 800ea64:	608b      	str	r3, [r1, #8]
 800ea66:	4628      	mov	r0, r5
 800ea68:	f000 fe26 	bl	800f6b8 <_Bfree>
 800ea6c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ea6e:	2200      	movs	r2, #0
 800ea70:	601a      	str	r2, [r3, #0]
 800ea72:	1e3b      	subs	r3, r7, #0
 800ea74:	bfb9      	ittee	lt
 800ea76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ea7a:	9305      	strlt	r3, [sp, #20]
 800ea7c:	2300      	movge	r3, #0
 800ea7e:	f8c8 3000 	strge.w	r3, [r8]
 800ea82:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ea86:	4b9a      	ldr	r3, [pc, #616]	; (800ecf0 <_dtoa_r+0x2d0>)
 800ea88:	bfbc      	itt	lt
 800ea8a:	2201      	movlt	r2, #1
 800ea8c:	f8c8 2000 	strlt.w	r2, [r8]
 800ea90:	ea33 0309 	bics.w	r3, r3, r9
 800ea94:	d119      	bne.n	800eaca <_dtoa_r+0xaa>
 800ea96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ea98:	f242 730f 	movw	r3, #9999	; 0x270f
 800ea9c:	6013      	str	r3, [r2, #0]
 800ea9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eaa2:	4333      	orrs	r3, r6
 800eaa4:	f000 8580 	beq.w	800f5a8 <_dtoa_r+0xb88>
 800eaa8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eaaa:	b953      	cbnz	r3, 800eac2 <_dtoa_r+0xa2>
 800eaac:	4b91      	ldr	r3, [pc, #580]	; (800ecf4 <_dtoa_r+0x2d4>)
 800eaae:	e022      	b.n	800eaf6 <_dtoa_r+0xd6>
 800eab0:	4b91      	ldr	r3, [pc, #580]	; (800ecf8 <_dtoa_r+0x2d8>)
 800eab2:	9303      	str	r3, [sp, #12]
 800eab4:	3308      	adds	r3, #8
 800eab6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800eab8:	6013      	str	r3, [r2, #0]
 800eaba:	9803      	ldr	r0, [sp, #12]
 800eabc:	b019      	add	sp, #100	; 0x64
 800eabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac2:	4b8c      	ldr	r3, [pc, #560]	; (800ecf4 <_dtoa_r+0x2d4>)
 800eac4:	9303      	str	r3, [sp, #12]
 800eac6:	3303      	adds	r3, #3
 800eac8:	e7f5      	b.n	800eab6 <_dtoa_r+0x96>
 800eaca:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800eace:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800ead2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ead6:	2200      	movs	r2, #0
 800ead8:	2300      	movs	r3, #0
 800eada:	f7f1 ffcd 	bl	8000a78 <__aeabi_dcmpeq>
 800eade:	4680      	mov	r8, r0
 800eae0:	b158      	cbz	r0, 800eafa <_dtoa_r+0xda>
 800eae2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800eae4:	2301      	movs	r3, #1
 800eae6:	6013      	str	r3, [r2, #0]
 800eae8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	f000 8559 	beq.w	800f5a2 <_dtoa_r+0xb82>
 800eaf0:	4882      	ldr	r0, [pc, #520]	; (800ecfc <_dtoa_r+0x2dc>)
 800eaf2:	6018      	str	r0, [r3, #0]
 800eaf4:	1e43      	subs	r3, r0, #1
 800eaf6:	9303      	str	r3, [sp, #12]
 800eaf8:	e7df      	b.n	800eaba <_dtoa_r+0x9a>
 800eafa:	ab16      	add	r3, sp, #88	; 0x58
 800eafc:	9301      	str	r3, [sp, #4]
 800eafe:	ab17      	add	r3, sp, #92	; 0x5c
 800eb00:	9300      	str	r3, [sp, #0]
 800eb02:	4628      	mov	r0, r5
 800eb04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800eb08:	f001 f8b8 	bl	800fc7c <__d2b>
 800eb0c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800eb10:	4683      	mov	fp, r0
 800eb12:	2c00      	cmp	r4, #0
 800eb14:	d07e      	beq.n	800ec14 <_dtoa_r+0x1f4>
 800eb16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb18:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800eb1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb24:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800eb28:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800eb2c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800eb30:	4b73      	ldr	r3, [pc, #460]	; (800ed00 <_dtoa_r+0x2e0>)
 800eb32:	2200      	movs	r2, #0
 800eb34:	f7f1 fb80 	bl	8000238 <__aeabi_dsub>
 800eb38:	a365      	add	r3, pc, #404	; (adr r3, 800ecd0 <_dtoa_r+0x2b0>)
 800eb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3e:	f7f1 fd33 	bl	80005a8 <__aeabi_dmul>
 800eb42:	a365      	add	r3, pc, #404	; (adr r3, 800ecd8 <_dtoa_r+0x2b8>)
 800eb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb48:	f7f1 fb78 	bl	800023c <__adddf3>
 800eb4c:	4606      	mov	r6, r0
 800eb4e:	4620      	mov	r0, r4
 800eb50:	460f      	mov	r7, r1
 800eb52:	f7f1 fcbf 	bl	80004d4 <__aeabi_i2d>
 800eb56:	a362      	add	r3, pc, #392	; (adr r3, 800ece0 <_dtoa_r+0x2c0>)
 800eb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5c:	f7f1 fd24 	bl	80005a8 <__aeabi_dmul>
 800eb60:	4602      	mov	r2, r0
 800eb62:	460b      	mov	r3, r1
 800eb64:	4630      	mov	r0, r6
 800eb66:	4639      	mov	r1, r7
 800eb68:	f7f1 fb68 	bl	800023c <__adddf3>
 800eb6c:	4606      	mov	r6, r0
 800eb6e:	460f      	mov	r7, r1
 800eb70:	f7f1 ffca 	bl	8000b08 <__aeabi_d2iz>
 800eb74:	2200      	movs	r2, #0
 800eb76:	4682      	mov	sl, r0
 800eb78:	2300      	movs	r3, #0
 800eb7a:	4630      	mov	r0, r6
 800eb7c:	4639      	mov	r1, r7
 800eb7e:	f7f1 ff85 	bl	8000a8c <__aeabi_dcmplt>
 800eb82:	b148      	cbz	r0, 800eb98 <_dtoa_r+0x178>
 800eb84:	4650      	mov	r0, sl
 800eb86:	f7f1 fca5 	bl	80004d4 <__aeabi_i2d>
 800eb8a:	4632      	mov	r2, r6
 800eb8c:	463b      	mov	r3, r7
 800eb8e:	f7f1 ff73 	bl	8000a78 <__aeabi_dcmpeq>
 800eb92:	b908      	cbnz	r0, 800eb98 <_dtoa_r+0x178>
 800eb94:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb98:	f1ba 0f16 	cmp.w	sl, #22
 800eb9c:	d857      	bhi.n	800ec4e <_dtoa_r+0x22e>
 800eb9e:	4b59      	ldr	r3, [pc, #356]	; (800ed04 <_dtoa_r+0x2e4>)
 800eba0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ebac:	f7f1 ff6e 	bl	8000a8c <__aeabi_dcmplt>
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	d04e      	beq.n	800ec52 <_dtoa_r+0x232>
 800ebb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ebb8:	2300      	movs	r3, #0
 800ebba:	930f      	str	r3, [sp, #60]	; 0x3c
 800ebbc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ebbe:	1b1c      	subs	r4, r3, r4
 800ebc0:	1e63      	subs	r3, r4, #1
 800ebc2:	9309      	str	r3, [sp, #36]	; 0x24
 800ebc4:	bf45      	ittet	mi
 800ebc6:	f1c4 0301 	rsbmi	r3, r4, #1
 800ebca:	9306      	strmi	r3, [sp, #24]
 800ebcc:	2300      	movpl	r3, #0
 800ebce:	2300      	movmi	r3, #0
 800ebd0:	bf4c      	ite	mi
 800ebd2:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ebd4:	9306      	strpl	r3, [sp, #24]
 800ebd6:	f1ba 0f00 	cmp.w	sl, #0
 800ebda:	db3c      	blt.n	800ec56 <_dtoa_r+0x236>
 800ebdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebde:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ebe2:	4453      	add	r3, sl
 800ebe4:	9309      	str	r3, [sp, #36]	; 0x24
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	930a      	str	r3, [sp, #40]	; 0x28
 800ebea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ebec:	2b09      	cmp	r3, #9
 800ebee:	f200 808d 	bhi.w	800ed0c <_dtoa_r+0x2ec>
 800ebf2:	2b05      	cmp	r3, #5
 800ebf4:	bfc4      	itt	gt
 800ebf6:	3b04      	subgt	r3, #4
 800ebf8:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ebfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ebfc:	f1a3 0302 	sub.w	r3, r3, #2
 800ec00:	bfcc      	ite	gt
 800ec02:	2400      	movgt	r4, #0
 800ec04:	2401      	movle	r4, #1
 800ec06:	2b03      	cmp	r3, #3
 800ec08:	f200 808c 	bhi.w	800ed24 <_dtoa_r+0x304>
 800ec0c:	e8df f003 	tbb	[pc, r3]
 800ec10:	5b4d4f2d 	.word	0x5b4d4f2d
 800ec14:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ec18:	441c      	add	r4, r3
 800ec1a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ec1e:	2b20      	cmp	r3, #32
 800ec20:	bfc3      	ittte	gt
 800ec22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ec26:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ec2a:	fa09 f303 	lslgt.w	r3, r9, r3
 800ec2e:	f1c3 0320 	rsble	r3, r3, #32
 800ec32:	bfc6      	itte	gt
 800ec34:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ec38:	4318      	orrgt	r0, r3
 800ec3a:	fa06 f003 	lslle.w	r0, r6, r3
 800ec3e:	f7f1 fc39 	bl	80004b4 <__aeabi_ui2d>
 800ec42:	2301      	movs	r3, #1
 800ec44:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ec48:	3c01      	subs	r4, #1
 800ec4a:	9313      	str	r3, [sp, #76]	; 0x4c
 800ec4c:	e770      	b.n	800eb30 <_dtoa_r+0x110>
 800ec4e:	2301      	movs	r3, #1
 800ec50:	e7b3      	b.n	800ebba <_dtoa_r+0x19a>
 800ec52:	900f      	str	r0, [sp, #60]	; 0x3c
 800ec54:	e7b2      	b.n	800ebbc <_dtoa_r+0x19c>
 800ec56:	9b06      	ldr	r3, [sp, #24]
 800ec58:	eba3 030a 	sub.w	r3, r3, sl
 800ec5c:	9306      	str	r3, [sp, #24]
 800ec5e:	f1ca 0300 	rsb	r3, sl, #0
 800ec62:	930a      	str	r3, [sp, #40]	; 0x28
 800ec64:	2300      	movs	r3, #0
 800ec66:	930e      	str	r3, [sp, #56]	; 0x38
 800ec68:	e7bf      	b.n	800ebea <_dtoa_r+0x1ca>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	dc5a      	bgt.n	800ed2a <_dtoa_r+0x30a>
 800ec74:	f04f 0901 	mov.w	r9, #1
 800ec78:	f8cd 9020 	str.w	r9, [sp, #32]
 800ec7c:	464b      	mov	r3, r9
 800ec7e:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800ec82:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ec84:	2200      	movs	r2, #0
 800ec86:	6042      	str	r2, [r0, #4]
 800ec88:	2204      	movs	r2, #4
 800ec8a:	f102 0614 	add.w	r6, r2, #20
 800ec8e:	429e      	cmp	r6, r3
 800ec90:	6841      	ldr	r1, [r0, #4]
 800ec92:	d950      	bls.n	800ed36 <_dtoa_r+0x316>
 800ec94:	4628      	mov	r0, r5
 800ec96:	f000 fccf 	bl	800f638 <_Balloc>
 800ec9a:	9003      	str	r0, [sp, #12]
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	d14e      	bne.n	800ed3e <_dtoa_r+0x31e>
 800eca0:	4b19      	ldr	r3, [pc, #100]	; (800ed08 <_dtoa_r+0x2e8>)
 800eca2:	4602      	mov	r2, r0
 800eca4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800eca8:	e6ce      	b.n	800ea48 <_dtoa_r+0x28>
 800ecaa:	2301      	movs	r3, #1
 800ecac:	e7de      	b.n	800ec6c <_dtoa_r+0x24c>
 800ecae:	2300      	movs	r3, #0
 800ecb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ecb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ecb4:	eb0a 0903 	add.w	r9, sl, r3
 800ecb8:	f109 0301 	add.w	r3, r9, #1
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	9308      	str	r3, [sp, #32]
 800ecc0:	bfb8      	it	lt
 800ecc2:	2301      	movlt	r3, #1
 800ecc4:	e7dd      	b.n	800ec82 <_dtoa_r+0x262>
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	e7f2      	b.n	800ecb0 <_dtoa_r+0x290>
 800ecca:	bf00      	nop
 800eccc:	f3af 8000 	nop.w
 800ecd0:	636f4361 	.word	0x636f4361
 800ecd4:	3fd287a7 	.word	0x3fd287a7
 800ecd8:	8b60c8b3 	.word	0x8b60c8b3
 800ecdc:	3fc68a28 	.word	0x3fc68a28
 800ece0:	509f79fb 	.word	0x509f79fb
 800ece4:	3fd34413 	.word	0x3fd34413
 800ece8:	08010e10 	.word	0x08010e10
 800ecec:	08010ecb 	.word	0x08010ecb
 800ecf0:	7ff00000 	.word	0x7ff00000
 800ecf4:	08010ec7 	.word	0x08010ec7
 800ecf8:	08010ebe 	.word	0x08010ebe
 800ecfc:	08010ded 	.word	0x08010ded
 800ed00:	3ff80000 	.word	0x3ff80000
 800ed04:	08010fc0 	.word	0x08010fc0
 800ed08:	08010f26 	.word	0x08010f26
 800ed0c:	2401      	movs	r4, #1
 800ed0e:	2300      	movs	r3, #0
 800ed10:	9322      	str	r3, [sp, #136]	; 0x88
 800ed12:	940b      	str	r4, [sp, #44]	; 0x2c
 800ed14:	f04f 39ff 	mov.w	r9, #4294967295
 800ed18:	2200      	movs	r2, #0
 800ed1a:	f8cd 9020 	str.w	r9, [sp, #32]
 800ed1e:	2312      	movs	r3, #18
 800ed20:	9223      	str	r2, [sp, #140]	; 0x8c
 800ed22:	e7ae      	b.n	800ec82 <_dtoa_r+0x262>
 800ed24:	2301      	movs	r3, #1
 800ed26:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed28:	e7f4      	b.n	800ed14 <_dtoa_r+0x2f4>
 800ed2a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800ed2e:	f8cd 9020 	str.w	r9, [sp, #32]
 800ed32:	464b      	mov	r3, r9
 800ed34:	e7a5      	b.n	800ec82 <_dtoa_r+0x262>
 800ed36:	3101      	adds	r1, #1
 800ed38:	6041      	str	r1, [r0, #4]
 800ed3a:	0052      	lsls	r2, r2, #1
 800ed3c:	e7a5      	b.n	800ec8a <_dtoa_r+0x26a>
 800ed3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ed40:	9a03      	ldr	r2, [sp, #12]
 800ed42:	601a      	str	r2, [r3, #0]
 800ed44:	9b08      	ldr	r3, [sp, #32]
 800ed46:	2b0e      	cmp	r3, #14
 800ed48:	f200 80a8 	bhi.w	800ee9c <_dtoa_r+0x47c>
 800ed4c:	2c00      	cmp	r4, #0
 800ed4e:	f000 80a5 	beq.w	800ee9c <_dtoa_r+0x47c>
 800ed52:	f1ba 0f00 	cmp.w	sl, #0
 800ed56:	dd34      	ble.n	800edc2 <_dtoa_r+0x3a2>
 800ed58:	4a9a      	ldr	r2, [pc, #616]	; (800efc4 <_dtoa_r+0x5a4>)
 800ed5a:	f00a 030f 	and.w	r3, sl, #15
 800ed5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ed62:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ed66:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ed6a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ed6e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800ed72:	d016      	beq.n	800eda2 <_dtoa_r+0x382>
 800ed74:	4b94      	ldr	r3, [pc, #592]	; (800efc8 <_dtoa_r+0x5a8>)
 800ed76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ed7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ed7e:	f7f1 fd3d 	bl	80007fc <__aeabi_ddiv>
 800ed82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed86:	f004 040f 	and.w	r4, r4, #15
 800ed8a:	2703      	movs	r7, #3
 800ed8c:	4e8e      	ldr	r6, [pc, #568]	; (800efc8 <_dtoa_r+0x5a8>)
 800ed8e:	b954      	cbnz	r4, 800eda6 <_dtoa_r+0x386>
 800ed90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ed94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed98:	f7f1 fd30 	bl	80007fc <__aeabi_ddiv>
 800ed9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eda0:	e029      	b.n	800edf6 <_dtoa_r+0x3d6>
 800eda2:	2702      	movs	r7, #2
 800eda4:	e7f2      	b.n	800ed8c <_dtoa_r+0x36c>
 800eda6:	07e1      	lsls	r1, r4, #31
 800eda8:	d508      	bpl.n	800edbc <_dtoa_r+0x39c>
 800edaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800edae:	e9d6 2300 	ldrd	r2, r3, [r6]
 800edb2:	f7f1 fbf9 	bl	80005a8 <__aeabi_dmul>
 800edb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800edba:	3701      	adds	r7, #1
 800edbc:	1064      	asrs	r4, r4, #1
 800edbe:	3608      	adds	r6, #8
 800edc0:	e7e5      	b.n	800ed8e <_dtoa_r+0x36e>
 800edc2:	f000 80a5 	beq.w	800ef10 <_dtoa_r+0x4f0>
 800edc6:	f1ca 0400 	rsb	r4, sl, #0
 800edca:	4b7e      	ldr	r3, [pc, #504]	; (800efc4 <_dtoa_r+0x5a4>)
 800edcc:	4e7e      	ldr	r6, [pc, #504]	; (800efc8 <_dtoa_r+0x5a8>)
 800edce:	f004 020f 	and.w	r2, r4, #15
 800edd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800edde:	f7f1 fbe3 	bl	80005a8 <__aeabi_dmul>
 800ede2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ede6:	1124      	asrs	r4, r4, #4
 800ede8:	2300      	movs	r3, #0
 800edea:	2702      	movs	r7, #2
 800edec:	2c00      	cmp	r4, #0
 800edee:	f040 8084 	bne.w	800eefa <_dtoa_r+0x4da>
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d1d2      	bne.n	800ed9c <_dtoa_r+0x37c>
 800edf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	f000 808b 	beq.w	800ef14 <_dtoa_r+0x4f4>
 800edfe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ee02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ee06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ee0a:	4b70      	ldr	r3, [pc, #448]	; (800efcc <_dtoa_r+0x5ac>)
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	f7f1 fe3d 	bl	8000a8c <__aeabi_dcmplt>
 800ee12:	2800      	cmp	r0, #0
 800ee14:	d07e      	beq.n	800ef14 <_dtoa_r+0x4f4>
 800ee16:	9b08      	ldr	r3, [sp, #32]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d07b      	beq.n	800ef14 <_dtoa_r+0x4f4>
 800ee1c:	f1b9 0f00 	cmp.w	r9, #0
 800ee20:	dd38      	ble.n	800ee94 <_dtoa_r+0x474>
 800ee22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ee26:	4b6a      	ldr	r3, [pc, #424]	; (800efd0 <_dtoa_r+0x5b0>)
 800ee28:	2200      	movs	r2, #0
 800ee2a:	f7f1 fbbd 	bl	80005a8 <__aeabi_dmul>
 800ee2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee32:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ee36:	3701      	adds	r7, #1
 800ee38:	464c      	mov	r4, r9
 800ee3a:	4638      	mov	r0, r7
 800ee3c:	f7f1 fb4a 	bl	80004d4 <__aeabi_i2d>
 800ee40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee44:	f7f1 fbb0 	bl	80005a8 <__aeabi_dmul>
 800ee48:	4b62      	ldr	r3, [pc, #392]	; (800efd4 <_dtoa_r+0x5b4>)
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	f7f1 f9f6 	bl	800023c <__adddf3>
 800ee50:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ee54:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ee58:	9611      	str	r6, [sp, #68]	; 0x44
 800ee5a:	2c00      	cmp	r4, #0
 800ee5c:	d15d      	bne.n	800ef1a <_dtoa_r+0x4fa>
 800ee5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee62:	4b5d      	ldr	r3, [pc, #372]	; (800efd8 <_dtoa_r+0x5b8>)
 800ee64:	2200      	movs	r2, #0
 800ee66:	f7f1 f9e7 	bl	8000238 <__aeabi_dsub>
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	460b      	mov	r3, r1
 800ee6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ee72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee74:	4633      	mov	r3, r6
 800ee76:	f7f1 fe27 	bl	8000ac8 <__aeabi_dcmpgt>
 800ee7a:	2800      	cmp	r0, #0
 800ee7c:	f040 829c 	bne.w	800f3b8 <_dtoa_r+0x998>
 800ee80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee86:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ee8a:	f7f1 fdff 	bl	8000a8c <__aeabi_dcmplt>
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	f040 8290 	bne.w	800f3b4 <_dtoa_r+0x994>
 800ee94:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ee98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ee9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	f2c0 8152 	blt.w	800f148 <_dtoa_r+0x728>
 800eea4:	f1ba 0f0e 	cmp.w	sl, #14
 800eea8:	f300 814e 	bgt.w	800f148 <_dtoa_r+0x728>
 800eeac:	4b45      	ldr	r3, [pc, #276]	; (800efc4 <_dtoa_r+0x5a4>)
 800eeae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eeb2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eeb6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800eeba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	f280 80db 	bge.w	800f078 <_dtoa_r+0x658>
 800eec2:	9b08      	ldr	r3, [sp, #32]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f300 80d7 	bgt.w	800f078 <_dtoa_r+0x658>
 800eeca:	f040 8272 	bne.w	800f3b2 <_dtoa_r+0x992>
 800eece:	4b42      	ldr	r3, [pc, #264]	; (800efd8 <_dtoa_r+0x5b8>)
 800eed0:	2200      	movs	r2, #0
 800eed2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eed6:	f7f1 fb67 	bl	80005a8 <__aeabi_dmul>
 800eeda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eede:	f7f1 fde9 	bl	8000ab4 <__aeabi_dcmpge>
 800eee2:	9c08      	ldr	r4, [sp, #32]
 800eee4:	4626      	mov	r6, r4
 800eee6:	2800      	cmp	r0, #0
 800eee8:	f040 8248 	bne.w	800f37c <_dtoa_r+0x95c>
 800eeec:	9f03      	ldr	r7, [sp, #12]
 800eeee:	2331      	movs	r3, #49	; 0x31
 800eef0:	f807 3b01 	strb.w	r3, [r7], #1
 800eef4:	f10a 0a01 	add.w	sl, sl, #1
 800eef8:	e244      	b.n	800f384 <_dtoa_r+0x964>
 800eefa:	07e2      	lsls	r2, r4, #31
 800eefc:	d505      	bpl.n	800ef0a <_dtoa_r+0x4ea>
 800eefe:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ef02:	f7f1 fb51 	bl	80005a8 <__aeabi_dmul>
 800ef06:	3701      	adds	r7, #1
 800ef08:	2301      	movs	r3, #1
 800ef0a:	1064      	asrs	r4, r4, #1
 800ef0c:	3608      	adds	r6, #8
 800ef0e:	e76d      	b.n	800edec <_dtoa_r+0x3cc>
 800ef10:	2702      	movs	r7, #2
 800ef12:	e770      	b.n	800edf6 <_dtoa_r+0x3d6>
 800ef14:	9c08      	ldr	r4, [sp, #32]
 800ef16:	46d0      	mov	r8, sl
 800ef18:	e78f      	b.n	800ee3a <_dtoa_r+0x41a>
 800ef1a:	9903      	ldr	r1, [sp, #12]
 800ef1c:	4b29      	ldr	r3, [pc, #164]	; (800efc4 <_dtoa_r+0x5a4>)
 800ef1e:	4421      	add	r1, r4
 800ef20:	9112      	str	r1, [sp, #72]	; 0x48
 800ef22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef28:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ef2c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ef30:	2900      	cmp	r1, #0
 800ef32:	d055      	beq.n	800efe0 <_dtoa_r+0x5c0>
 800ef34:	4929      	ldr	r1, [pc, #164]	; (800efdc <_dtoa_r+0x5bc>)
 800ef36:	2000      	movs	r0, #0
 800ef38:	f7f1 fc60 	bl	80007fc <__aeabi_ddiv>
 800ef3c:	463b      	mov	r3, r7
 800ef3e:	4632      	mov	r2, r6
 800ef40:	f7f1 f97a 	bl	8000238 <__aeabi_dsub>
 800ef44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ef48:	9f03      	ldr	r7, [sp, #12]
 800ef4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef4e:	f7f1 fddb 	bl	8000b08 <__aeabi_d2iz>
 800ef52:	4604      	mov	r4, r0
 800ef54:	f7f1 fabe 	bl	80004d4 <__aeabi_i2d>
 800ef58:	4602      	mov	r2, r0
 800ef5a:	460b      	mov	r3, r1
 800ef5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef60:	f7f1 f96a 	bl	8000238 <__aeabi_dsub>
 800ef64:	3430      	adds	r4, #48	; 0x30
 800ef66:	4602      	mov	r2, r0
 800ef68:	460b      	mov	r3, r1
 800ef6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ef6e:	f807 4b01 	strb.w	r4, [r7], #1
 800ef72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ef76:	f7f1 fd89 	bl	8000a8c <__aeabi_dcmplt>
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	d174      	bne.n	800f068 <_dtoa_r+0x648>
 800ef7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef82:	4912      	ldr	r1, [pc, #72]	; (800efcc <_dtoa_r+0x5ac>)
 800ef84:	2000      	movs	r0, #0
 800ef86:	f7f1 f957 	bl	8000238 <__aeabi_dsub>
 800ef8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ef8e:	f7f1 fd7d 	bl	8000a8c <__aeabi_dcmplt>
 800ef92:	2800      	cmp	r0, #0
 800ef94:	f040 80b7 	bne.w	800f106 <_dtoa_r+0x6e6>
 800ef98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ef9a:	429f      	cmp	r7, r3
 800ef9c:	f43f af7a 	beq.w	800ee94 <_dtoa_r+0x474>
 800efa0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800efa4:	4b0a      	ldr	r3, [pc, #40]	; (800efd0 <_dtoa_r+0x5b0>)
 800efa6:	2200      	movs	r2, #0
 800efa8:	f7f1 fafe 	bl	80005a8 <__aeabi_dmul>
 800efac:	4b08      	ldr	r3, [pc, #32]	; (800efd0 <_dtoa_r+0x5b0>)
 800efae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800efb2:	2200      	movs	r2, #0
 800efb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efb8:	f7f1 faf6 	bl	80005a8 <__aeabi_dmul>
 800efbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800efc0:	e7c3      	b.n	800ef4a <_dtoa_r+0x52a>
 800efc2:	bf00      	nop
 800efc4:	08010fc0 	.word	0x08010fc0
 800efc8:	08010f98 	.word	0x08010f98
 800efcc:	3ff00000 	.word	0x3ff00000
 800efd0:	40240000 	.word	0x40240000
 800efd4:	401c0000 	.word	0x401c0000
 800efd8:	40140000 	.word	0x40140000
 800efdc:	3fe00000 	.word	0x3fe00000
 800efe0:	4630      	mov	r0, r6
 800efe2:	4639      	mov	r1, r7
 800efe4:	f7f1 fae0 	bl	80005a8 <__aeabi_dmul>
 800efe8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800efec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800efee:	9c03      	ldr	r4, [sp, #12]
 800eff0:	9314      	str	r3, [sp, #80]	; 0x50
 800eff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eff6:	f7f1 fd87 	bl	8000b08 <__aeabi_d2iz>
 800effa:	9015      	str	r0, [sp, #84]	; 0x54
 800effc:	f7f1 fa6a 	bl	80004d4 <__aeabi_i2d>
 800f000:	4602      	mov	r2, r0
 800f002:	460b      	mov	r3, r1
 800f004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f008:	f7f1 f916 	bl	8000238 <__aeabi_dsub>
 800f00c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f00e:	3330      	adds	r3, #48	; 0x30
 800f010:	f804 3b01 	strb.w	r3, [r4], #1
 800f014:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f016:	429c      	cmp	r4, r3
 800f018:	4606      	mov	r6, r0
 800f01a:	460f      	mov	r7, r1
 800f01c:	f04f 0200 	mov.w	r2, #0
 800f020:	d124      	bne.n	800f06c <_dtoa_r+0x64c>
 800f022:	4ba4      	ldr	r3, [pc, #656]	; (800f2b4 <_dtoa_r+0x894>)
 800f024:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f028:	f7f1 f908 	bl	800023c <__adddf3>
 800f02c:	4602      	mov	r2, r0
 800f02e:	460b      	mov	r3, r1
 800f030:	4630      	mov	r0, r6
 800f032:	4639      	mov	r1, r7
 800f034:	f7f1 fd48 	bl	8000ac8 <__aeabi_dcmpgt>
 800f038:	2800      	cmp	r0, #0
 800f03a:	d163      	bne.n	800f104 <_dtoa_r+0x6e4>
 800f03c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f040:	499c      	ldr	r1, [pc, #624]	; (800f2b4 <_dtoa_r+0x894>)
 800f042:	2000      	movs	r0, #0
 800f044:	f7f1 f8f8 	bl	8000238 <__aeabi_dsub>
 800f048:	4602      	mov	r2, r0
 800f04a:	460b      	mov	r3, r1
 800f04c:	4630      	mov	r0, r6
 800f04e:	4639      	mov	r1, r7
 800f050:	f7f1 fd1c 	bl	8000a8c <__aeabi_dcmplt>
 800f054:	2800      	cmp	r0, #0
 800f056:	f43f af1d 	beq.w	800ee94 <_dtoa_r+0x474>
 800f05a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f05c:	1e7b      	subs	r3, r7, #1
 800f05e:	9314      	str	r3, [sp, #80]	; 0x50
 800f060:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800f064:	2b30      	cmp	r3, #48	; 0x30
 800f066:	d0f8      	beq.n	800f05a <_dtoa_r+0x63a>
 800f068:	46c2      	mov	sl, r8
 800f06a:	e03b      	b.n	800f0e4 <_dtoa_r+0x6c4>
 800f06c:	4b92      	ldr	r3, [pc, #584]	; (800f2b8 <_dtoa_r+0x898>)
 800f06e:	f7f1 fa9b 	bl	80005a8 <__aeabi_dmul>
 800f072:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f076:	e7bc      	b.n	800eff2 <_dtoa_r+0x5d2>
 800f078:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f07c:	9f03      	ldr	r7, [sp, #12]
 800f07e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f082:	4640      	mov	r0, r8
 800f084:	4649      	mov	r1, r9
 800f086:	f7f1 fbb9 	bl	80007fc <__aeabi_ddiv>
 800f08a:	f7f1 fd3d 	bl	8000b08 <__aeabi_d2iz>
 800f08e:	4604      	mov	r4, r0
 800f090:	f7f1 fa20 	bl	80004d4 <__aeabi_i2d>
 800f094:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f098:	f7f1 fa86 	bl	80005a8 <__aeabi_dmul>
 800f09c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	460b      	mov	r3, r1
 800f0a4:	4640      	mov	r0, r8
 800f0a6:	4649      	mov	r1, r9
 800f0a8:	f7f1 f8c6 	bl	8000238 <__aeabi_dsub>
 800f0ac:	f807 6b01 	strb.w	r6, [r7], #1
 800f0b0:	9e03      	ldr	r6, [sp, #12]
 800f0b2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800f0b6:	1bbe      	subs	r6, r7, r6
 800f0b8:	45b4      	cmp	ip, r6
 800f0ba:	4602      	mov	r2, r0
 800f0bc:	460b      	mov	r3, r1
 800f0be:	d136      	bne.n	800f12e <_dtoa_r+0x70e>
 800f0c0:	f7f1 f8bc 	bl	800023c <__adddf3>
 800f0c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f0c8:	4680      	mov	r8, r0
 800f0ca:	4689      	mov	r9, r1
 800f0cc:	f7f1 fcfc 	bl	8000ac8 <__aeabi_dcmpgt>
 800f0d0:	bb58      	cbnz	r0, 800f12a <_dtoa_r+0x70a>
 800f0d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f0d6:	4640      	mov	r0, r8
 800f0d8:	4649      	mov	r1, r9
 800f0da:	f7f1 fccd 	bl	8000a78 <__aeabi_dcmpeq>
 800f0de:	b108      	cbz	r0, 800f0e4 <_dtoa_r+0x6c4>
 800f0e0:	07e1      	lsls	r1, r4, #31
 800f0e2:	d422      	bmi.n	800f12a <_dtoa_r+0x70a>
 800f0e4:	4628      	mov	r0, r5
 800f0e6:	4659      	mov	r1, fp
 800f0e8:	f000 fae6 	bl	800f6b8 <_Bfree>
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	703b      	strb	r3, [r7, #0]
 800f0f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f0f2:	f10a 0001 	add.w	r0, sl, #1
 800f0f6:	6018      	str	r0, [r3, #0]
 800f0f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	f43f acdd 	beq.w	800eaba <_dtoa_r+0x9a>
 800f100:	601f      	str	r7, [r3, #0]
 800f102:	e4da      	b.n	800eaba <_dtoa_r+0x9a>
 800f104:	4627      	mov	r7, r4
 800f106:	463b      	mov	r3, r7
 800f108:	461f      	mov	r7, r3
 800f10a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f10e:	2a39      	cmp	r2, #57	; 0x39
 800f110:	d107      	bne.n	800f122 <_dtoa_r+0x702>
 800f112:	9a03      	ldr	r2, [sp, #12]
 800f114:	429a      	cmp	r2, r3
 800f116:	d1f7      	bne.n	800f108 <_dtoa_r+0x6e8>
 800f118:	9903      	ldr	r1, [sp, #12]
 800f11a:	2230      	movs	r2, #48	; 0x30
 800f11c:	f108 0801 	add.w	r8, r8, #1
 800f120:	700a      	strb	r2, [r1, #0]
 800f122:	781a      	ldrb	r2, [r3, #0]
 800f124:	3201      	adds	r2, #1
 800f126:	701a      	strb	r2, [r3, #0]
 800f128:	e79e      	b.n	800f068 <_dtoa_r+0x648>
 800f12a:	46d0      	mov	r8, sl
 800f12c:	e7eb      	b.n	800f106 <_dtoa_r+0x6e6>
 800f12e:	4b62      	ldr	r3, [pc, #392]	; (800f2b8 <_dtoa_r+0x898>)
 800f130:	2200      	movs	r2, #0
 800f132:	f7f1 fa39 	bl	80005a8 <__aeabi_dmul>
 800f136:	2200      	movs	r2, #0
 800f138:	2300      	movs	r3, #0
 800f13a:	4680      	mov	r8, r0
 800f13c:	4689      	mov	r9, r1
 800f13e:	f7f1 fc9b 	bl	8000a78 <__aeabi_dcmpeq>
 800f142:	2800      	cmp	r0, #0
 800f144:	d09b      	beq.n	800f07e <_dtoa_r+0x65e>
 800f146:	e7cd      	b.n	800f0e4 <_dtoa_r+0x6c4>
 800f148:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f14a:	2a00      	cmp	r2, #0
 800f14c:	f000 80d0 	beq.w	800f2f0 <_dtoa_r+0x8d0>
 800f150:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f152:	2a01      	cmp	r2, #1
 800f154:	f300 80b2 	bgt.w	800f2bc <_dtoa_r+0x89c>
 800f158:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f15a:	2a00      	cmp	r2, #0
 800f15c:	f000 80a6 	beq.w	800f2ac <_dtoa_r+0x88c>
 800f160:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f164:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f166:	9f06      	ldr	r7, [sp, #24]
 800f168:	9a06      	ldr	r2, [sp, #24]
 800f16a:	441a      	add	r2, r3
 800f16c:	9206      	str	r2, [sp, #24]
 800f16e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f170:	2101      	movs	r1, #1
 800f172:	441a      	add	r2, r3
 800f174:	4628      	mov	r0, r5
 800f176:	9209      	str	r2, [sp, #36]	; 0x24
 800f178:	f000 fb54 	bl	800f824 <__i2b>
 800f17c:	4606      	mov	r6, r0
 800f17e:	2f00      	cmp	r7, #0
 800f180:	dd0c      	ble.n	800f19c <_dtoa_r+0x77c>
 800f182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f184:	2b00      	cmp	r3, #0
 800f186:	dd09      	ble.n	800f19c <_dtoa_r+0x77c>
 800f188:	42bb      	cmp	r3, r7
 800f18a:	9a06      	ldr	r2, [sp, #24]
 800f18c:	bfa8      	it	ge
 800f18e:	463b      	movge	r3, r7
 800f190:	1ad2      	subs	r2, r2, r3
 800f192:	9206      	str	r2, [sp, #24]
 800f194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f196:	1aff      	subs	r7, r7, r3
 800f198:	1ad3      	subs	r3, r2, r3
 800f19a:	9309      	str	r3, [sp, #36]	; 0x24
 800f19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f19e:	b1f3      	cbz	r3, 800f1de <_dtoa_r+0x7be>
 800f1a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	f000 80a8 	beq.w	800f2f8 <_dtoa_r+0x8d8>
 800f1a8:	2c00      	cmp	r4, #0
 800f1aa:	dd10      	ble.n	800f1ce <_dtoa_r+0x7ae>
 800f1ac:	4631      	mov	r1, r6
 800f1ae:	4622      	mov	r2, r4
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	f000 fbf5 	bl	800f9a0 <__pow5mult>
 800f1b6:	465a      	mov	r2, fp
 800f1b8:	4601      	mov	r1, r0
 800f1ba:	4606      	mov	r6, r0
 800f1bc:	4628      	mov	r0, r5
 800f1be:	f000 fb47 	bl	800f850 <__multiply>
 800f1c2:	4659      	mov	r1, fp
 800f1c4:	4680      	mov	r8, r0
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	f000 fa76 	bl	800f6b8 <_Bfree>
 800f1cc:	46c3      	mov	fp, r8
 800f1ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1d0:	1b1a      	subs	r2, r3, r4
 800f1d2:	d004      	beq.n	800f1de <_dtoa_r+0x7be>
 800f1d4:	4659      	mov	r1, fp
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	f000 fbe2 	bl	800f9a0 <__pow5mult>
 800f1dc:	4683      	mov	fp, r0
 800f1de:	2101      	movs	r1, #1
 800f1e0:	4628      	mov	r0, r5
 800f1e2:	f000 fb1f 	bl	800f824 <__i2b>
 800f1e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	4604      	mov	r4, r0
 800f1ec:	f340 8086 	ble.w	800f2fc <_dtoa_r+0x8dc>
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	4601      	mov	r1, r0
 800f1f4:	4628      	mov	r0, r5
 800f1f6:	f000 fbd3 	bl	800f9a0 <__pow5mult>
 800f1fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f1fc:	2b01      	cmp	r3, #1
 800f1fe:	4604      	mov	r4, r0
 800f200:	dd7f      	ble.n	800f302 <_dtoa_r+0x8e2>
 800f202:	f04f 0800 	mov.w	r8, #0
 800f206:	6923      	ldr	r3, [r4, #16]
 800f208:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f20c:	6918      	ldr	r0, [r3, #16]
 800f20e:	f000 fabb 	bl	800f788 <__hi0bits>
 800f212:	f1c0 0020 	rsb	r0, r0, #32
 800f216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f218:	4418      	add	r0, r3
 800f21a:	f010 001f 	ands.w	r0, r0, #31
 800f21e:	f000 8092 	beq.w	800f346 <_dtoa_r+0x926>
 800f222:	f1c0 0320 	rsb	r3, r0, #32
 800f226:	2b04      	cmp	r3, #4
 800f228:	f340 808a 	ble.w	800f340 <_dtoa_r+0x920>
 800f22c:	f1c0 001c 	rsb	r0, r0, #28
 800f230:	9b06      	ldr	r3, [sp, #24]
 800f232:	4403      	add	r3, r0
 800f234:	9306      	str	r3, [sp, #24]
 800f236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f238:	4403      	add	r3, r0
 800f23a:	4407      	add	r7, r0
 800f23c:	9309      	str	r3, [sp, #36]	; 0x24
 800f23e:	9b06      	ldr	r3, [sp, #24]
 800f240:	2b00      	cmp	r3, #0
 800f242:	dd05      	ble.n	800f250 <_dtoa_r+0x830>
 800f244:	4659      	mov	r1, fp
 800f246:	461a      	mov	r2, r3
 800f248:	4628      	mov	r0, r5
 800f24a:	f000 fc03 	bl	800fa54 <__lshift>
 800f24e:	4683      	mov	fp, r0
 800f250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f252:	2b00      	cmp	r3, #0
 800f254:	dd05      	ble.n	800f262 <_dtoa_r+0x842>
 800f256:	4621      	mov	r1, r4
 800f258:	461a      	mov	r2, r3
 800f25a:	4628      	mov	r0, r5
 800f25c:	f000 fbfa 	bl	800fa54 <__lshift>
 800f260:	4604      	mov	r4, r0
 800f262:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f264:	2b00      	cmp	r3, #0
 800f266:	d070      	beq.n	800f34a <_dtoa_r+0x92a>
 800f268:	4621      	mov	r1, r4
 800f26a:	4658      	mov	r0, fp
 800f26c:	f000 fc62 	bl	800fb34 <__mcmp>
 800f270:	2800      	cmp	r0, #0
 800f272:	da6a      	bge.n	800f34a <_dtoa_r+0x92a>
 800f274:	2300      	movs	r3, #0
 800f276:	4659      	mov	r1, fp
 800f278:	220a      	movs	r2, #10
 800f27a:	4628      	mov	r0, r5
 800f27c:	f000 fa3e 	bl	800f6fc <__multadd>
 800f280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f282:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f286:	4683      	mov	fp, r0
 800f288:	2b00      	cmp	r3, #0
 800f28a:	f000 8194 	beq.w	800f5b6 <_dtoa_r+0xb96>
 800f28e:	4631      	mov	r1, r6
 800f290:	2300      	movs	r3, #0
 800f292:	220a      	movs	r2, #10
 800f294:	4628      	mov	r0, r5
 800f296:	f000 fa31 	bl	800f6fc <__multadd>
 800f29a:	f1b9 0f00 	cmp.w	r9, #0
 800f29e:	4606      	mov	r6, r0
 800f2a0:	f300 8093 	bgt.w	800f3ca <_dtoa_r+0x9aa>
 800f2a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f2a6:	2b02      	cmp	r3, #2
 800f2a8:	dc57      	bgt.n	800f35a <_dtoa_r+0x93a>
 800f2aa:	e08e      	b.n	800f3ca <_dtoa_r+0x9aa>
 800f2ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f2ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f2b2:	e757      	b.n	800f164 <_dtoa_r+0x744>
 800f2b4:	3fe00000 	.word	0x3fe00000
 800f2b8:	40240000 	.word	0x40240000
 800f2bc:	9b08      	ldr	r3, [sp, #32]
 800f2be:	1e5c      	subs	r4, r3, #1
 800f2c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2c2:	42a3      	cmp	r3, r4
 800f2c4:	bfbf      	itttt	lt
 800f2c6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f2c8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800f2ca:	1ae2      	sublt	r2, r4, r3
 800f2cc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f2ce:	bfb6      	itet	lt
 800f2d0:	189b      	addlt	r3, r3, r2
 800f2d2:	1b1c      	subge	r4, r3, r4
 800f2d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f2d6:	9b08      	ldr	r3, [sp, #32]
 800f2d8:	bfb8      	it	lt
 800f2da:	2400      	movlt	r4, #0
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	bfb9      	ittee	lt
 800f2e0:	9b06      	ldrlt	r3, [sp, #24]
 800f2e2:	9a08      	ldrlt	r2, [sp, #32]
 800f2e4:	9f06      	ldrge	r7, [sp, #24]
 800f2e6:	9b08      	ldrge	r3, [sp, #32]
 800f2e8:	bfbc      	itt	lt
 800f2ea:	1a9f      	sublt	r7, r3, r2
 800f2ec:	2300      	movlt	r3, #0
 800f2ee:	e73b      	b.n	800f168 <_dtoa_r+0x748>
 800f2f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f2f2:	9f06      	ldr	r7, [sp, #24]
 800f2f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f2f6:	e742      	b.n	800f17e <_dtoa_r+0x75e>
 800f2f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2fa:	e76b      	b.n	800f1d4 <_dtoa_r+0x7b4>
 800f2fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f2fe:	2b01      	cmp	r3, #1
 800f300:	dc19      	bgt.n	800f336 <_dtoa_r+0x916>
 800f302:	9b04      	ldr	r3, [sp, #16]
 800f304:	b9bb      	cbnz	r3, 800f336 <_dtoa_r+0x916>
 800f306:	9b05      	ldr	r3, [sp, #20]
 800f308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f30c:	b99b      	cbnz	r3, 800f336 <_dtoa_r+0x916>
 800f30e:	9b05      	ldr	r3, [sp, #20]
 800f310:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f314:	0d1b      	lsrs	r3, r3, #20
 800f316:	051b      	lsls	r3, r3, #20
 800f318:	b183      	cbz	r3, 800f33c <_dtoa_r+0x91c>
 800f31a:	9b06      	ldr	r3, [sp, #24]
 800f31c:	3301      	adds	r3, #1
 800f31e:	9306      	str	r3, [sp, #24]
 800f320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f322:	3301      	adds	r3, #1
 800f324:	9309      	str	r3, [sp, #36]	; 0x24
 800f326:	f04f 0801 	mov.w	r8, #1
 800f32a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	f47f af6a 	bne.w	800f206 <_dtoa_r+0x7e6>
 800f332:	2001      	movs	r0, #1
 800f334:	e76f      	b.n	800f216 <_dtoa_r+0x7f6>
 800f336:	f04f 0800 	mov.w	r8, #0
 800f33a:	e7f6      	b.n	800f32a <_dtoa_r+0x90a>
 800f33c:	4698      	mov	r8, r3
 800f33e:	e7f4      	b.n	800f32a <_dtoa_r+0x90a>
 800f340:	f43f af7d 	beq.w	800f23e <_dtoa_r+0x81e>
 800f344:	4618      	mov	r0, r3
 800f346:	301c      	adds	r0, #28
 800f348:	e772      	b.n	800f230 <_dtoa_r+0x810>
 800f34a:	9b08      	ldr	r3, [sp, #32]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	dc36      	bgt.n	800f3be <_dtoa_r+0x99e>
 800f350:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f352:	2b02      	cmp	r3, #2
 800f354:	dd33      	ble.n	800f3be <_dtoa_r+0x99e>
 800f356:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f35a:	f1b9 0f00 	cmp.w	r9, #0
 800f35e:	d10d      	bne.n	800f37c <_dtoa_r+0x95c>
 800f360:	4621      	mov	r1, r4
 800f362:	464b      	mov	r3, r9
 800f364:	2205      	movs	r2, #5
 800f366:	4628      	mov	r0, r5
 800f368:	f000 f9c8 	bl	800f6fc <__multadd>
 800f36c:	4601      	mov	r1, r0
 800f36e:	4604      	mov	r4, r0
 800f370:	4658      	mov	r0, fp
 800f372:	f000 fbdf 	bl	800fb34 <__mcmp>
 800f376:	2800      	cmp	r0, #0
 800f378:	f73f adb8 	bgt.w	800eeec <_dtoa_r+0x4cc>
 800f37c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f37e:	9f03      	ldr	r7, [sp, #12]
 800f380:	ea6f 0a03 	mvn.w	sl, r3
 800f384:	f04f 0800 	mov.w	r8, #0
 800f388:	4621      	mov	r1, r4
 800f38a:	4628      	mov	r0, r5
 800f38c:	f000 f994 	bl	800f6b8 <_Bfree>
 800f390:	2e00      	cmp	r6, #0
 800f392:	f43f aea7 	beq.w	800f0e4 <_dtoa_r+0x6c4>
 800f396:	f1b8 0f00 	cmp.w	r8, #0
 800f39a:	d005      	beq.n	800f3a8 <_dtoa_r+0x988>
 800f39c:	45b0      	cmp	r8, r6
 800f39e:	d003      	beq.n	800f3a8 <_dtoa_r+0x988>
 800f3a0:	4641      	mov	r1, r8
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	f000 f988 	bl	800f6b8 <_Bfree>
 800f3a8:	4631      	mov	r1, r6
 800f3aa:	4628      	mov	r0, r5
 800f3ac:	f000 f984 	bl	800f6b8 <_Bfree>
 800f3b0:	e698      	b.n	800f0e4 <_dtoa_r+0x6c4>
 800f3b2:	2400      	movs	r4, #0
 800f3b4:	4626      	mov	r6, r4
 800f3b6:	e7e1      	b.n	800f37c <_dtoa_r+0x95c>
 800f3b8:	46c2      	mov	sl, r8
 800f3ba:	4626      	mov	r6, r4
 800f3bc:	e596      	b.n	800eeec <_dtoa_r+0x4cc>
 800f3be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	f000 80fd 	beq.w	800f5c4 <_dtoa_r+0xba4>
 800f3ca:	2f00      	cmp	r7, #0
 800f3cc:	dd05      	ble.n	800f3da <_dtoa_r+0x9ba>
 800f3ce:	4631      	mov	r1, r6
 800f3d0:	463a      	mov	r2, r7
 800f3d2:	4628      	mov	r0, r5
 800f3d4:	f000 fb3e 	bl	800fa54 <__lshift>
 800f3d8:	4606      	mov	r6, r0
 800f3da:	f1b8 0f00 	cmp.w	r8, #0
 800f3de:	d05c      	beq.n	800f49a <_dtoa_r+0xa7a>
 800f3e0:	6871      	ldr	r1, [r6, #4]
 800f3e2:	4628      	mov	r0, r5
 800f3e4:	f000 f928 	bl	800f638 <_Balloc>
 800f3e8:	4607      	mov	r7, r0
 800f3ea:	b928      	cbnz	r0, 800f3f8 <_dtoa_r+0x9d8>
 800f3ec:	4b80      	ldr	r3, [pc, #512]	; (800f5f0 <_dtoa_r+0xbd0>)
 800f3ee:	4602      	mov	r2, r0
 800f3f0:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f3f4:	f7ff bb28 	b.w	800ea48 <_dtoa_r+0x28>
 800f3f8:	6932      	ldr	r2, [r6, #16]
 800f3fa:	3202      	adds	r2, #2
 800f3fc:	0092      	lsls	r2, r2, #2
 800f3fe:	f106 010c 	add.w	r1, r6, #12
 800f402:	300c      	adds	r0, #12
 800f404:	f7fe fd88 	bl	800df18 <memcpy>
 800f408:	2201      	movs	r2, #1
 800f40a:	4639      	mov	r1, r7
 800f40c:	4628      	mov	r0, r5
 800f40e:	f000 fb21 	bl	800fa54 <__lshift>
 800f412:	9b03      	ldr	r3, [sp, #12]
 800f414:	3301      	adds	r3, #1
 800f416:	9308      	str	r3, [sp, #32]
 800f418:	9b03      	ldr	r3, [sp, #12]
 800f41a:	444b      	add	r3, r9
 800f41c:	930a      	str	r3, [sp, #40]	; 0x28
 800f41e:	9b04      	ldr	r3, [sp, #16]
 800f420:	f003 0301 	and.w	r3, r3, #1
 800f424:	46b0      	mov	r8, r6
 800f426:	9309      	str	r3, [sp, #36]	; 0x24
 800f428:	4606      	mov	r6, r0
 800f42a:	9b08      	ldr	r3, [sp, #32]
 800f42c:	4621      	mov	r1, r4
 800f42e:	3b01      	subs	r3, #1
 800f430:	4658      	mov	r0, fp
 800f432:	9304      	str	r3, [sp, #16]
 800f434:	f7ff fa6c 	bl	800e910 <quorem>
 800f438:	4603      	mov	r3, r0
 800f43a:	3330      	adds	r3, #48	; 0x30
 800f43c:	9006      	str	r0, [sp, #24]
 800f43e:	4641      	mov	r1, r8
 800f440:	4658      	mov	r0, fp
 800f442:	930b      	str	r3, [sp, #44]	; 0x2c
 800f444:	f000 fb76 	bl	800fb34 <__mcmp>
 800f448:	4632      	mov	r2, r6
 800f44a:	4681      	mov	r9, r0
 800f44c:	4621      	mov	r1, r4
 800f44e:	4628      	mov	r0, r5
 800f450:	f000 fb8c 	bl	800fb6c <__mdiff>
 800f454:	68c2      	ldr	r2, [r0, #12]
 800f456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f458:	4607      	mov	r7, r0
 800f45a:	bb02      	cbnz	r2, 800f49e <_dtoa_r+0xa7e>
 800f45c:	4601      	mov	r1, r0
 800f45e:	4658      	mov	r0, fp
 800f460:	f000 fb68 	bl	800fb34 <__mcmp>
 800f464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f466:	4602      	mov	r2, r0
 800f468:	4639      	mov	r1, r7
 800f46a:	4628      	mov	r0, r5
 800f46c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800f470:	f000 f922 	bl	800f6b8 <_Bfree>
 800f474:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f478:	9f08      	ldr	r7, [sp, #32]
 800f47a:	ea43 0102 	orr.w	r1, r3, r2
 800f47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f480:	430b      	orrs	r3, r1
 800f482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f484:	d10d      	bne.n	800f4a2 <_dtoa_r+0xa82>
 800f486:	2b39      	cmp	r3, #57	; 0x39
 800f488:	d029      	beq.n	800f4de <_dtoa_r+0xabe>
 800f48a:	f1b9 0f00 	cmp.w	r9, #0
 800f48e:	dd01      	ble.n	800f494 <_dtoa_r+0xa74>
 800f490:	9b06      	ldr	r3, [sp, #24]
 800f492:	3331      	adds	r3, #49	; 0x31
 800f494:	9a04      	ldr	r2, [sp, #16]
 800f496:	7013      	strb	r3, [r2, #0]
 800f498:	e776      	b.n	800f388 <_dtoa_r+0x968>
 800f49a:	4630      	mov	r0, r6
 800f49c:	e7b9      	b.n	800f412 <_dtoa_r+0x9f2>
 800f49e:	2201      	movs	r2, #1
 800f4a0:	e7e2      	b.n	800f468 <_dtoa_r+0xa48>
 800f4a2:	f1b9 0f00 	cmp.w	r9, #0
 800f4a6:	db06      	blt.n	800f4b6 <_dtoa_r+0xa96>
 800f4a8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f4aa:	ea41 0909 	orr.w	r9, r1, r9
 800f4ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f4b0:	ea59 0101 	orrs.w	r1, r9, r1
 800f4b4:	d120      	bne.n	800f4f8 <_dtoa_r+0xad8>
 800f4b6:	2a00      	cmp	r2, #0
 800f4b8:	ddec      	ble.n	800f494 <_dtoa_r+0xa74>
 800f4ba:	4659      	mov	r1, fp
 800f4bc:	2201      	movs	r2, #1
 800f4be:	4628      	mov	r0, r5
 800f4c0:	9308      	str	r3, [sp, #32]
 800f4c2:	f000 fac7 	bl	800fa54 <__lshift>
 800f4c6:	4621      	mov	r1, r4
 800f4c8:	4683      	mov	fp, r0
 800f4ca:	f000 fb33 	bl	800fb34 <__mcmp>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	9b08      	ldr	r3, [sp, #32]
 800f4d2:	dc02      	bgt.n	800f4da <_dtoa_r+0xaba>
 800f4d4:	d1de      	bne.n	800f494 <_dtoa_r+0xa74>
 800f4d6:	07da      	lsls	r2, r3, #31
 800f4d8:	d5dc      	bpl.n	800f494 <_dtoa_r+0xa74>
 800f4da:	2b39      	cmp	r3, #57	; 0x39
 800f4dc:	d1d8      	bne.n	800f490 <_dtoa_r+0xa70>
 800f4de:	9a04      	ldr	r2, [sp, #16]
 800f4e0:	2339      	movs	r3, #57	; 0x39
 800f4e2:	7013      	strb	r3, [r2, #0]
 800f4e4:	463b      	mov	r3, r7
 800f4e6:	461f      	mov	r7, r3
 800f4e8:	3b01      	subs	r3, #1
 800f4ea:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800f4ee:	2a39      	cmp	r2, #57	; 0x39
 800f4f0:	d050      	beq.n	800f594 <_dtoa_r+0xb74>
 800f4f2:	3201      	adds	r2, #1
 800f4f4:	701a      	strb	r2, [r3, #0]
 800f4f6:	e747      	b.n	800f388 <_dtoa_r+0x968>
 800f4f8:	2a00      	cmp	r2, #0
 800f4fa:	dd03      	ble.n	800f504 <_dtoa_r+0xae4>
 800f4fc:	2b39      	cmp	r3, #57	; 0x39
 800f4fe:	d0ee      	beq.n	800f4de <_dtoa_r+0xabe>
 800f500:	3301      	adds	r3, #1
 800f502:	e7c7      	b.n	800f494 <_dtoa_r+0xa74>
 800f504:	9a08      	ldr	r2, [sp, #32]
 800f506:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f508:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f50c:	428a      	cmp	r2, r1
 800f50e:	d02a      	beq.n	800f566 <_dtoa_r+0xb46>
 800f510:	4659      	mov	r1, fp
 800f512:	2300      	movs	r3, #0
 800f514:	220a      	movs	r2, #10
 800f516:	4628      	mov	r0, r5
 800f518:	f000 f8f0 	bl	800f6fc <__multadd>
 800f51c:	45b0      	cmp	r8, r6
 800f51e:	4683      	mov	fp, r0
 800f520:	f04f 0300 	mov.w	r3, #0
 800f524:	f04f 020a 	mov.w	r2, #10
 800f528:	4641      	mov	r1, r8
 800f52a:	4628      	mov	r0, r5
 800f52c:	d107      	bne.n	800f53e <_dtoa_r+0xb1e>
 800f52e:	f000 f8e5 	bl	800f6fc <__multadd>
 800f532:	4680      	mov	r8, r0
 800f534:	4606      	mov	r6, r0
 800f536:	9b08      	ldr	r3, [sp, #32]
 800f538:	3301      	adds	r3, #1
 800f53a:	9308      	str	r3, [sp, #32]
 800f53c:	e775      	b.n	800f42a <_dtoa_r+0xa0a>
 800f53e:	f000 f8dd 	bl	800f6fc <__multadd>
 800f542:	4631      	mov	r1, r6
 800f544:	4680      	mov	r8, r0
 800f546:	2300      	movs	r3, #0
 800f548:	220a      	movs	r2, #10
 800f54a:	4628      	mov	r0, r5
 800f54c:	f000 f8d6 	bl	800f6fc <__multadd>
 800f550:	4606      	mov	r6, r0
 800f552:	e7f0      	b.n	800f536 <_dtoa_r+0xb16>
 800f554:	f1b9 0f00 	cmp.w	r9, #0
 800f558:	9a03      	ldr	r2, [sp, #12]
 800f55a:	bfcc      	ite	gt
 800f55c:	464f      	movgt	r7, r9
 800f55e:	2701      	movle	r7, #1
 800f560:	4417      	add	r7, r2
 800f562:	f04f 0800 	mov.w	r8, #0
 800f566:	4659      	mov	r1, fp
 800f568:	2201      	movs	r2, #1
 800f56a:	4628      	mov	r0, r5
 800f56c:	9308      	str	r3, [sp, #32]
 800f56e:	f000 fa71 	bl	800fa54 <__lshift>
 800f572:	4621      	mov	r1, r4
 800f574:	4683      	mov	fp, r0
 800f576:	f000 fadd 	bl	800fb34 <__mcmp>
 800f57a:	2800      	cmp	r0, #0
 800f57c:	dcb2      	bgt.n	800f4e4 <_dtoa_r+0xac4>
 800f57e:	d102      	bne.n	800f586 <_dtoa_r+0xb66>
 800f580:	9b08      	ldr	r3, [sp, #32]
 800f582:	07db      	lsls	r3, r3, #31
 800f584:	d4ae      	bmi.n	800f4e4 <_dtoa_r+0xac4>
 800f586:	463b      	mov	r3, r7
 800f588:	461f      	mov	r7, r3
 800f58a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f58e:	2a30      	cmp	r2, #48	; 0x30
 800f590:	d0fa      	beq.n	800f588 <_dtoa_r+0xb68>
 800f592:	e6f9      	b.n	800f388 <_dtoa_r+0x968>
 800f594:	9a03      	ldr	r2, [sp, #12]
 800f596:	429a      	cmp	r2, r3
 800f598:	d1a5      	bne.n	800f4e6 <_dtoa_r+0xac6>
 800f59a:	f10a 0a01 	add.w	sl, sl, #1
 800f59e:	2331      	movs	r3, #49	; 0x31
 800f5a0:	e779      	b.n	800f496 <_dtoa_r+0xa76>
 800f5a2:	4b14      	ldr	r3, [pc, #80]	; (800f5f4 <_dtoa_r+0xbd4>)
 800f5a4:	f7ff baa7 	b.w	800eaf6 <_dtoa_r+0xd6>
 800f5a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	f47f aa80 	bne.w	800eab0 <_dtoa_r+0x90>
 800f5b0:	4b11      	ldr	r3, [pc, #68]	; (800f5f8 <_dtoa_r+0xbd8>)
 800f5b2:	f7ff baa0 	b.w	800eaf6 <_dtoa_r+0xd6>
 800f5b6:	f1b9 0f00 	cmp.w	r9, #0
 800f5ba:	dc03      	bgt.n	800f5c4 <_dtoa_r+0xba4>
 800f5bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f5be:	2b02      	cmp	r3, #2
 800f5c0:	f73f aecb 	bgt.w	800f35a <_dtoa_r+0x93a>
 800f5c4:	9f03      	ldr	r7, [sp, #12]
 800f5c6:	4621      	mov	r1, r4
 800f5c8:	4658      	mov	r0, fp
 800f5ca:	f7ff f9a1 	bl	800e910 <quorem>
 800f5ce:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f5d2:	f807 3b01 	strb.w	r3, [r7], #1
 800f5d6:	9a03      	ldr	r2, [sp, #12]
 800f5d8:	1aba      	subs	r2, r7, r2
 800f5da:	4591      	cmp	r9, r2
 800f5dc:	ddba      	ble.n	800f554 <_dtoa_r+0xb34>
 800f5de:	4659      	mov	r1, fp
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	220a      	movs	r2, #10
 800f5e4:	4628      	mov	r0, r5
 800f5e6:	f000 f889 	bl	800f6fc <__multadd>
 800f5ea:	4683      	mov	fp, r0
 800f5ec:	e7eb      	b.n	800f5c6 <_dtoa_r+0xba6>
 800f5ee:	bf00      	nop
 800f5f0:	08010f26 	.word	0x08010f26
 800f5f4:	08010dec 	.word	0x08010dec
 800f5f8:	08010ebe 	.word	0x08010ebe

0800f5fc <fiprintf>:
 800f5fc:	b40e      	push	{r1, r2, r3}
 800f5fe:	b503      	push	{r0, r1, lr}
 800f600:	4601      	mov	r1, r0
 800f602:	ab03      	add	r3, sp, #12
 800f604:	4805      	ldr	r0, [pc, #20]	; (800f61c <fiprintf+0x20>)
 800f606:	f853 2b04 	ldr.w	r2, [r3], #4
 800f60a:	6800      	ldr	r0, [r0, #0]
 800f60c:	9301      	str	r3, [sp, #4]
 800f60e:	f000 fcab 	bl	800ff68 <_vfiprintf_r>
 800f612:	b002      	add	sp, #8
 800f614:	f85d eb04 	ldr.w	lr, [sp], #4
 800f618:	b003      	add	sp, #12
 800f61a:	4770      	bx	lr
 800f61c:	20000024 	.word	0x20000024

0800f620 <_localeconv_r>:
 800f620:	4800      	ldr	r0, [pc, #0]	; (800f624 <_localeconv_r+0x4>)
 800f622:	4770      	bx	lr
 800f624:	20000178 	.word	0x20000178

0800f628 <malloc>:
 800f628:	4b02      	ldr	r3, [pc, #8]	; (800f634 <malloc+0xc>)
 800f62a:	4601      	mov	r1, r0
 800f62c:	6818      	ldr	r0, [r3, #0]
 800f62e:	f000 bbff 	b.w	800fe30 <_malloc_r>
 800f632:	bf00      	nop
 800f634:	20000024 	.word	0x20000024

0800f638 <_Balloc>:
 800f638:	b570      	push	{r4, r5, r6, lr}
 800f63a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f63c:	4604      	mov	r4, r0
 800f63e:	460d      	mov	r5, r1
 800f640:	b976      	cbnz	r6, 800f660 <_Balloc+0x28>
 800f642:	2010      	movs	r0, #16
 800f644:	f7ff fff0 	bl	800f628 <malloc>
 800f648:	4602      	mov	r2, r0
 800f64a:	6260      	str	r0, [r4, #36]	; 0x24
 800f64c:	b920      	cbnz	r0, 800f658 <_Balloc+0x20>
 800f64e:	4b18      	ldr	r3, [pc, #96]	; (800f6b0 <_Balloc+0x78>)
 800f650:	4818      	ldr	r0, [pc, #96]	; (800f6b4 <_Balloc+0x7c>)
 800f652:	2166      	movs	r1, #102	; 0x66
 800f654:	f7ff f93e 	bl	800e8d4 <__assert_func>
 800f658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f65c:	6006      	str	r6, [r0, #0]
 800f65e:	60c6      	str	r6, [r0, #12]
 800f660:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f662:	68f3      	ldr	r3, [r6, #12]
 800f664:	b183      	cbz	r3, 800f688 <_Balloc+0x50>
 800f666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f668:	68db      	ldr	r3, [r3, #12]
 800f66a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f66e:	b9b8      	cbnz	r0, 800f6a0 <_Balloc+0x68>
 800f670:	2101      	movs	r1, #1
 800f672:	fa01 f605 	lsl.w	r6, r1, r5
 800f676:	1d72      	adds	r2, r6, #5
 800f678:	0092      	lsls	r2, r2, #2
 800f67a:	4620      	mov	r0, r4
 800f67c:	f000 fb5a 	bl	800fd34 <_calloc_r>
 800f680:	b160      	cbz	r0, 800f69c <_Balloc+0x64>
 800f682:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f686:	e00e      	b.n	800f6a6 <_Balloc+0x6e>
 800f688:	2221      	movs	r2, #33	; 0x21
 800f68a:	2104      	movs	r1, #4
 800f68c:	4620      	mov	r0, r4
 800f68e:	f000 fb51 	bl	800fd34 <_calloc_r>
 800f692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f694:	60f0      	str	r0, [r6, #12]
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d1e4      	bne.n	800f666 <_Balloc+0x2e>
 800f69c:	2000      	movs	r0, #0
 800f69e:	bd70      	pop	{r4, r5, r6, pc}
 800f6a0:	6802      	ldr	r2, [r0, #0]
 800f6a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f6ac:	e7f7      	b.n	800f69e <_Balloc+0x66>
 800f6ae:	bf00      	nop
 800f6b0:	08010e10 	.word	0x08010e10
 800f6b4:	08010f37 	.word	0x08010f37

0800f6b8 <_Bfree>:
 800f6b8:	b570      	push	{r4, r5, r6, lr}
 800f6ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f6bc:	4605      	mov	r5, r0
 800f6be:	460c      	mov	r4, r1
 800f6c0:	b976      	cbnz	r6, 800f6e0 <_Bfree+0x28>
 800f6c2:	2010      	movs	r0, #16
 800f6c4:	f7ff ffb0 	bl	800f628 <malloc>
 800f6c8:	4602      	mov	r2, r0
 800f6ca:	6268      	str	r0, [r5, #36]	; 0x24
 800f6cc:	b920      	cbnz	r0, 800f6d8 <_Bfree+0x20>
 800f6ce:	4b09      	ldr	r3, [pc, #36]	; (800f6f4 <_Bfree+0x3c>)
 800f6d0:	4809      	ldr	r0, [pc, #36]	; (800f6f8 <_Bfree+0x40>)
 800f6d2:	218a      	movs	r1, #138	; 0x8a
 800f6d4:	f7ff f8fe 	bl	800e8d4 <__assert_func>
 800f6d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f6dc:	6006      	str	r6, [r0, #0]
 800f6de:	60c6      	str	r6, [r0, #12]
 800f6e0:	b13c      	cbz	r4, 800f6f2 <_Bfree+0x3a>
 800f6e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f6e4:	6862      	ldr	r2, [r4, #4]
 800f6e6:	68db      	ldr	r3, [r3, #12]
 800f6e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f6ec:	6021      	str	r1, [r4, #0]
 800f6ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f6f2:	bd70      	pop	{r4, r5, r6, pc}
 800f6f4:	08010e10 	.word	0x08010e10
 800f6f8:	08010f37 	.word	0x08010f37

0800f6fc <__multadd>:
 800f6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f700:	690d      	ldr	r5, [r1, #16]
 800f702:	4607      	mov	r7, r0
 800f704:	460c      	mov	r4, r1
 800f706:	461e      	mov	r6, r3
 800f708:	f101 0c14 	add.w	ip, r1, #20
 800f70c:	2000      	movs	r0, #0
 800f70e:	f8dc 3000 	ldr.w	r3, [ip]
 800f712:	b299      	uxth	r1, r3
 800f714:	fb02 6101 	mla	r1, r2, r1, r6
 800f718:	0c1e      	lsrs	r6, r3, #16
 800f71a:	0c0b      	lsrs	r3, r1, #16
 800f71c:	fb02 3306 	mla	r3, r2, r6, r3
 800f720:	b289      	uxth	r1, r1
 800f722:	3001      	adds	r0, #1
 800f724:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f728:	4285      	cmp	r5, r0
 800f72a:	f84c 1b04 	str.w	r1, [ip], #4
 800f72e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f732:	dcec      	bgt.n	800f70e <__multadd+0x12>
 800f734:	b30e      	cbz	r6, 800f77a <__multadd+0x7e>
 800f736:	68a3      	ldr	r3, [r4, #8]
 800f738:	42ab      	cmp	r3, r5
 800f73a:	dc19      	bgt.n	800f770 <__multadd+0x74>
 800f73c:	6861      	ldr	r1, [r4, #4]
 800f73e:	4638      	mov	r0, r7
 800f740:	3101      	adds	r1, #1
 800f742:	f7ff ff79 	bl	800f638 <_Balloc>
 800f746:	4680      	mov	r8, r0
 800f748:	b928      	cbnz	r0, 800f756 <__multadd+0x5a>
 800f74a:	4602      	mov	r2, r0
 800f74c:	4b0c      	ldr	r3, [pc, #48]	; (800f780 <__multadd+0x84>)
 800f74e:	480d      	ldr	r0, [pc, #52]	; (800f784 <__multadd+0x88>)
 800f750:	21b5      	movs	r1, #181	; 0xb5
 800f752:	f7ff f8bf 	bl	800e8d4 <__assert_func>
 800f756:	6922      	ldr	r2, [r4, #16]
 800f758:	3202      	adds	r2, #2
 800f75a:	f104 010c 	add.w	r1, r4, #12
 800f75e:	0092      	lsls	r2, r2, #2
 800f760:	300c      	adds	r0, #12
 800f762:	f7fe fbd9 	bl	800df18 <memcpy>
 800f766:	4621      	mov	r1, r4
 800f768:	4638      	mov	r0, r7
 800f76a:	f7ff ffa5 	bl	800f6b8 <_Bfree>
 800f76e:	4644      	mov	r4, r8
 800f770:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f774:	3501      	adds	r5, #1
 800f776:	615e      	str	r6, [r3, #20]
 800f778:	6125      	str	r5, [r4, #16]
 800f77a:	4620      	mov	r0, r4
 800f77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f780:	08010f26 	.word	0x08010f26
 800f784:	08010f37 	.word	0x08010f37

0800f788 <__hi0bits>:
 800f788:	0c02      	lsrs	r2, r0, #16
 800f78a:	0412      	lsls	r2, r2, #16
 800f78c:	4603      	mov	r3, r0
 800f78e:	b9ca      	cbnz	r2, 800f7c4 <__hi0bits+0x3c>
 800f790:	0403      	lsls	r3, r0, #16
 800f792:	2010      	movs	r0, #16
 800f794:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f798:	bf04      	itt	eq
 800f79a:	021b      	lsleq	r3, r3, #8
 800f79c:	3008      	addeq	r0, #8
 800f79e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f7a2:	bf04      	itt	eq
 800f7a4:	011b      	lsleq	r3, r3, #4
 800f7a6:	3004      	addeq	r0, #4
 800f7a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f7ac:	bf04      	itt	eq
 800f7ae:	009b      	lsleq	r3, r3, #2
 800f7b0:	3002      	addeq	r0, #2
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	db05      	blt.n	800f7c2 <__hi0bits+0x3a>
 800f7b6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800f7ba:	f100 0001 	add.w	r0, r0, #1
 800f7be:	bf08      	it	eq
 800f7c0:	2020      	moveq	r0, #32
 800f7c2:	4770      	bx	lr
 800f7c4:	2000      	movs	r0, #0
 800f7c6:	e7e5      	b.n	800f794 <__hi0bits+0xc>

0800f7c8 <__lo0bits>:
 800f7c8:	6803      	ldr	r3, [r0, #0]
 800f7ca:	4602      	mov	r2, r0
 800f7cc:	f013 0007 	ands.w	r0, r3, #7
 800f7d0:	d00b      	beq.n	800f7ea <__lo0bits+0x22>
 800f7d2:	07d9      	lsls	r1, r3, #31
 800f7d4:	d421      	bmi.n	800f81a <__lo0bits+0x52>
 800f7d6:	0798      	lsls	r0, r3, #30
 800f7d8:	bf49      	itett	mi
 800f7da:	085b      	lsrmi	r3, r3, #1
 800f7dc:	089b      	lsrpl	r3, r3, #2
 800f7de:	2001      	movmi	r0, #1
 800f7e0:	6013      	strmi	r3, [r2, #0]
 800f7e2:	bf5c      	itt	pl
 800f7e4:	6013      	strpl	r3, [r2, #0]
 800f7e6:	2002      	movpl	r0, #2
 800f7e8:	4770      	bx	lr
 800f7ea:	b299      	uxth	r1, r3
 800f7ec:	b909      	cbnz	r1, 800f7f2 <__lo0bits+0x2a>
 800f7ee:	0c1b      	lsrs	r3, r3, #16
 800f7f0:	2010      	movs	r0, #16
 800f7f2:	b2d9      	uxtb	r1, r3
 800f7f4:	b909      	cbnz	r1, 800f7fa <__lo0bits+0x32>
 800f7f6:	3008      	adds	r0, #8
 800f7f8:	0a1b      	lsrs	r3, r3, #8
 800f7fa:	0719      	lsls	r1, r3, #28
 800f7fc:	bf04      	itt	eq
 800f7fe:	091b      	lsreq	r3, r3, #4
 800f800:	3004      	addeq	r0, #4
 800f802:	0799      	lsls	r1, r3, #30
 800f804:	bf04      	itt	eq
 800f806:	089b      	lsreq	r3, r3, #2
 800f808:	3002      	addeq	r0, #2
 800f80a:	07d9      	lsls	r1, r3, #31
 800f80c:	d403      	bmi.n	800f816 <__lo0bits+0x4e>
 800f80e:	085b      	lsrs	r3, r3, #1
 800f810:	f100 0001 	add.w	r0, r0, #1
 800f814:	d003      	beq.n	800f81e <__lo0bits+0x56>
 800f816:	6013      	str	r3, [r2, #0]
 800f818:	4770      	bx	lr
 800f81a:	2000      	movs	r0, #0
 800f81c:	4770      	bx	lr
 800f81e:	2020      	movs	r0, #32
 800f820:	4770      	bx	lr
	...

0800f824 <__i2b>:
 800f824:	b510      	push	{r4, lr}
 800f826:	460c      	mov	r4, r1
 800f828:	2101      	movs	r1, #1
 800f82a:	f7ff ff05 	bl	800f638 <_Balloc>
 800f82e:	4602      	mov	r2, r0
 800f830:	b928      	cbnz	r0, 800f83e <__i2b+0x1a>
 800f832:	4b05      	ldr	r3, [pc, #20]	; (800f848 <__i2b+0x24>)
 800f834:	4805      	ldr	r0, [pc, #20]	; (800f84c <__i2b+0x28>)
 800f836:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f83a:	f7ff f84b 	bl	800e8d4 <__assert_func>
 800f83e:	2301      	movs	r3, #1
 800f840:	6144      	str	r4, [r0, #20]
 800f842:	6103      	str	r3, [r0, #16]
 800f844:	bd10      	pop	{r4, pc}
 800f846:	bf00      	nop
 800f848:	08010f26 	.word	0x08010f26
 800f84c:	08010f37 	.word	0x08010f37

0800f850 <__multiply>:
 800f850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f854:	4691      	mov	r9, r2
 800f856:	690a      	ldr	r2, [r1, #16]
 800f858:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f85c:	429a      	cmp	r2, r3
 800f85e:	bfb8      	it	lt
 800f860:	460b      	movlt	r3, r1
 800f862:	460c      	mov	r4, r1
 800f864:	bfbc      	itt	lt
 800f866:	464c      	movlt	r4, r9
 800f868:	4699      	movlt	r9, r3
 800f86a:	6927      	ldr	r7, [r4, #16]
 800f86c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f870:	68a3      	ldr	r3, [r4, #8]
 800f872:	6861      	ldr	r1, [r4, #4]
 800f874:	eb07 060a 	add.w	r6, r7, sl
 800f878:	42b3      	cmp	r3, r6
 800f87a:	b085      	sub	sp, #20
 800f87c:	bfb8      	it	lt
 800f87e:	3101      	addlt	r1, #1
 800f880:	f7ff feda 	bl	800f638 <_Balloc>
 800f884:	b930      	cbnz	r0, 800f894 <__multiply+0x44>
 800f886:	4602      	mov	r2, r0
 800f888:	4b43      	ldr	r3, [pc, #268]	; (800f998 <__multiply+0x148>)
 800f88a:	4844      	ldr	r0, [pc, #272]	; (800f99c <__multiply+0x14c>)
 800f88c:	f240 115d 	movw	r1, #349	; 0x15d
 800f890:	f7ff f820 	bl	800e8d4 <__assert_func>
 800f894:	f100 0514 	add.w	r5, r0, #20
 800f898:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f89c:	462b      	mov	r3, r5
 800f89e:	2200      	movs	r2, #0
 800f8a0:	4543      	cmp	r3, r8
 800f8a2:	d321      	bcc.n	800f8e8 <__multiply+0x98>
 800f8a4:	f104 0314 	add.w	r3, r4, #20
 800f8a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f8ac:	f109 0314 	add.w	r3, r9, #20
 800f8b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f8b4:	9202      	str	r2, [sp, #8]
 800f8b6:	1b3a      	subs	r2, r7, r4
 800f8b8:	3a15      	subs	r2, #21
 800f8ba:	f022 0203 	bic.w	r2, r2, #3
 800f8be:	3204      	adds	r2, #4
 800f8c0:	f104 0115 	add.w	r1, r4, #21
 800f8c4:	428f      	cmp	r7, r1
 800f8c6:	bf38      	it	cc
 800f8c8:	2204      	movcc	r2, #4
 800f8ca:	9201      	str	r2, [sp, #4]
 800f8cc:	9a02      	ldr	r2, [sp, #8]
 800f8ce:	9303      	str	r3, [sp, #12]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d80c      	bhi.n	800f8ee <__multiply+0x9e>
 800f8d4:	2e00      	cmp	r6, #0
 800f8d6:	dd03      	ble.n	800f8e0 <__multiply+0x90>
 800f8d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d059      	beq.n	800f994 <__multiply+0x144>
 800f8e0:	6106      	str	r6, [r0, #16]
 800f8e2:	b005      	add	sp, #20
 800f8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8e8:	f843 2b04 	str.w	r2, [r3], #4
 800f8ec:	e7d8      	b.n	800f8a0 <__multiply+0x50>
 800f8ee:	f8b3 a000 	ldrh.w	sl, [r3]
 800f8f2:	f1ba 0f00 	cmp.w	sl, #0
 800f8f6:	d023      	beq.n	800f940 <__multiply+0xf0>
 800f8f8:	f104 0e14 	add.w	lr, r4, #20
 800f8fc:	46a9      	mov	r9, r5
 800f8fe:	f04f 0c00 	mov.w	ip, #0
 800f902:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f906:	f8d9 1000 	ldr.w	r1, [r9]
 800f90a:	fa1f fb82 	uxth.w	fp, r2
 800f90e:	b289      	uxth	r1, r1
 800f910:	fb0a 110b 	mla	r1, sl, fp, r1
 800f914:	4461      	add	r1, ip
 800f916:	f8d9 c000 	ldr.w	ip, [r9]
 800f91a:	0c12      	lsrs	r2, r2, #16
 800f91c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800f920:	fb0a c202 	mla	r2, sl, r2, ip
 800f924:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f928:	b289      	uxth	r1, r1
 800f92a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f92e:	4577      	cmp	r7, lr
 800f930:	f849 1b04 	str.w	r1, [r9], #4
 800f934:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f938:	d8e3      	bhi.n	800f902 <__multiply+0xb2>
 800f93a:	9a01      	ldr	r2, [sp, #4]
 800f93c:	f845 c002 	str.w	ip, [r5, r2]
 800f940:	9a03      	ldr	r2, [sp, #12]
 800f942:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f946:	3304      	adds	r3, #4
 800f948:	f1b9 0f00 	cmp.w	r9, #0
 800f94c:	d020      	beq.n	800f990 <__multiply+0x140>
 800f94e:	6829      	ldr	r1, [r5, #0]
 800f950:	f104 0c14 	add.w	ip, r4, #20
 800f954:	46ae      	mov	lr, r5
 800f956:	f04f 0a00 	mov.w	sl, #0
 800f95a:	f8bc b000 	ldrh.w	fp, [ip]
 800f95e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f962:	fb09 220b 	mla	r2, r9, fp, r2
 800f966:	4492      	add	sl, r2
 800f968:	b289      	uxth	r1, r1
 800f96a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f96e:	f84e 1b04 	str.w	r1, [lr], #4
 800f972:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f976:	f8be 1000 	ldrh.w	r1, [lr]
 800f97a:	0c12      	lsrs	r2, r2, #16
 800f97c:	fb09 1102 	mla	r1, r9, r2, r1
 800f980:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f984:	4567      	cmp	r7, ip
 800f986:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f98a:	d8e6      	bhi.n	800f95a <__multiply+0x10a>
 800f98c:	9a01      	ldr	r2, [sp, #4]
 800f98e:	50a9      	str	r1, [r5, r2]
 800f990:	3504      	adds	r5, #4
 800f992:	e79b      	b.n	800f8cc <__multiply+0x7c>
 800f994:	3e01      	subs	r6, #1
 800f996:	e79d      	b.n	800f8d4 <__multiply+0x84>
 800f998:	08010f26 	.word	0x08010f26
 800f99c:	08010f37 	.word	0x08010f37

0800f9a0 <__pow5mult>:
 800f9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9a4:	4615      	mov	r5, r2
 800f9a6:	f012 0203 	ands.w	r2, r2, #3
 800f9aa:	4606      	mov	r6, r0
 800f9ac:	460f      	mov	r7, r1
 800f9ae:	d007      	beq.n	800f9c0 <__pow5mult+0x20>
 800f9b0:	4c25      	ldr	r4, [pc, #148]	; (800fa48 <__pow5mult+0xa8>)
 800f9b2:	3a01      	subs	r2, #1
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f9ba:	f7ff fe9f 	bl	800f6fc <__multadd>
 800f9be:	4607      	mov	r7, r0
 800f9c0:	10ad      	asrs	r5, r5, #2
 800f9c2:	d03d      	beq.n	800fa40 <__pow5mult+0xa0>
 800f9c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f9c6:	b97c      	cbnz	r4, 800f9e8 <__pow5mult+0x48>
 800f9c8:	2010      	movs	r0, #16
 800f9ca:	f7ff fe2d 	bl	800f628 <malloc>
 800f9ce:	4602      	mov	r2, r0
 800f9d0:	6270      	str	r0, [r6, #36]	; 0x24
 800f9d2:	b928      	cbnz	r0, 800f9e0 <__pow5mult+0x40>
 800f9d4:	4b1d      	ldr	r3, [pc, #116]	; (800fa4c <__pow5mult+0xac>)
 800f9d6:	481e      	ldr	r0, [pc, #120]	; (800fa50 <__pow5mult+0xb0>)
 800f9d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f9dc:	f7fe ff7a 	bl	800e8d4 <__assert_func>
 800f9e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f9e4:	6004      	str	r4, [r0, #0]
 800f9e6:	60c4      	str	r4, [r0, #12]
 800f9e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f9ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f9f0:	b94c      	cbnz	r4, 800fa06 <__pow5mult+0x66>
 800f9f2:	f240 2171 	movw	r1, #625	; 0x271
 800f9f6:	4630      	mov	r0, r6
 800f9f8:	f7ff ff14 	bl	800f824 <__i2b>
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa02:	4604      	mov	r4, r0
 800fa04:	6003      	str	r3, [r0, #0]
 800fa06:	f04f 0900 	mov.w	r9, #0
 800fa0a:	07eb      	lsls	r3, r5, #31
 800fa0c:	d50a      	bpl.n	800fa24 <__pow5mult+0x84>
 800fa0e:	4639      	mov	r1, r7
 800fa10:	4622      	mov	r2, r4
 800fa12:	4630      	mov	r0, r6
 800fa14:	f7ff ff1c 	bl	800f850 <__multiply>
 800fa18:	4639      	mov	r1, r7
 800fa1a:	4680      	mov	r8, r0
 800fa1c:	4630      	mov	r0, r6
 800fa1e:	f7ff fe4b 	bl	800f6b8 <_Bfree>
 800fa22:	4647      	mov	r7, r8
 800fa24:	106d      	asrs	r5, r5, #1
 800fa26:	d00b      	beq.n	800fa40 <__pow5mult+0xa0>
 800fa28:	6820      	ldr	r0, [r4, #0]
 800fa2a:	b938      	cbnz	r0, 800fa3c <__pow5mult+0x9c>
 800fa2c:	4622      	mov	r2, r4
 800fa2e:	4621      	mov	r1, r4
 800fa30:	4630      	mov	r0, r6
 800fa32:	f7ff ff0d 	bl	800f850 <__multiply>
 800fa36:	6020      	str	r0, [r4, #0]
 800fa38:	f8c0 9000 	str.w	r9, [r0]
 800fa3c:	4604      	mov	r4, r0
 800fa3e:	e7e4      	b.n	800fa0a <__pow5mult+0x6a>
 800fa40:	4638      	mov	r0, r7
 800fa42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa46:	bf00      	nop
 800fa48:	08011088 	.word	0x08011088
 800fa4c:	08010e10 	.word	0x08010e10
 800fa50:	08010f37 	.word	0x08010f37

0800fa54 <__lshift>:
 800fa54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa58:	460c      	mov	r4, r1
 800fa5a:	6849      	ldr	r1, [r1, #4]
 800fa5c:	6923      	ldr	r3, [r4, #16]
 800fa5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fa62:	68a3      	ldr	r3, [r4, #8]
 800fa64:	4607      	mov	r7, r0
 800fa66:	4691      	mov	r9, r2
 800fa68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa6c:	f108 0601 	add.w	r6, r8, #1
 800fa70:	42b3      	cmp	r3, r6
 800fa72:	db0b      	blt.n	800fa8c <__lshift+0x38>
 800fa74:	4638      	mov	r0, r7
 800fa76:	f7ff fddf 	bl	800f638 <_Balloc>
 800fa7a:	4605      	mov	r5, r0
 800fa7c:	b948      	cbnz	r0, 800fa92 <__lshift+0x3e>
 800fa7e:	4602      	mov	r2, r0
 800fa80:	4b2a      	ldr	r3, [pc, #168]	; (800fb2c <__lshift+0xd8>)
 800fa82:	482b      	ldr	r0, [pc, #172]	; (800fb30 <__lshift+0xdc>)
 800fa84:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fa88:	f7fe ff24 	bl	800e8d4 <__assert_func>
 800fa8c:	3101      	adds	r1, #1
 800fa8e:	005b      	lsls	r3, r3, #1
 800fa90:	e7ee      	b.n	800fa70 <__lshift+0x1c>
 800fa92:	2300      	movs	r3, #0
 800fa94:	f100 0114 	add.w	r1, r0, #20
 800fa98:	f100 0210 	add.w	r2, r0, #16
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	4553      	cmp	r3, sl
 800faa0:	db37      	blt.n	800fb12 <__lshift+0xbe>
 800faa2:	6920      	ldr	r0, [r4, #16]
 800faa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800faa8:	f104 0314 	add.w	r3, r4, #20
 800faac:	f019 091f 	ands.w	r9, r9, #31
 800fab0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fab4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fab8:	d02f      	beq.n	800fb1a <__lshift+0xc6>
 800faba:	f1c9 0e20 	rsb	lr, r9, #32
 800fabe:	468a      	mov	sl, r1
 800fac0:	f04f 0c00 	mov.w	ip, #0
 800fac4:	681a      	ldr	r2, [r3, #0]
 800fac6:	fa02 f209 	lsl.w	r2, r2, r9
 800faca:	ea42 020c 	orr.w	r2, r2, ip
 800face:	f84a 2b04 	str.w	r2, [sl], #4
 800fad2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fad6:	4298      	cmp	r0, r3
 800fad8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fadc:	d8f2      	bhi.n	800fac4 <__lshift+0x70>
 800fade:	1b03      	subs	r3, r0, r4
 800fae0:	3b15      	subs	r3, #21
 800fae2:	f023 0303 	bic.w	r3, r3, #3
 800fae6:	3304      	adds	r3, #4
 800fae8:	f104 0215 	add.w	r2, r4, #21
 800faec:	4290      	cmp	r0, r2
 800faee:	bf38      	it	cc
 800faf0:	2304      	movcc	r3, #4
 800faf2:	f841 c003 	str.w	ip, [r1, r3]
 800faf6:	f1bc 0f00 	cmp.w	ip, #0
 800fafa:	d001      	beq.n	800fb00 <__lshift+0xac>
 800fafc:	f108 0602 	add.w	r6, r8, #2
 800fb00:	3e01      	subs	r6, #1
 800fb02:	4638      	mov	r0, r7
 800fb04:	612e      	str	r6, [r5, #16]
 800fb06:	4621      	mov	r1, r4
 800fb08:	f7ff fdd6 	bl	800f6b8 <_Bfree>
 800fb0c:	4628      	mov	r0, r5
 800fb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb12:	f842 0f04 	str.w	r0, [r2, #4]!
 800fb16:	3301      	adds	r3, #1
 800fb18:	e7c1      	b.n	800fa9e <__lshift+0x4a>
 800fb1a:	3904      	subs	r1, #4
 800fb1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb20:	f841 2f04 	str.w	r2, [r1, #4]!
 800fb24:	4298      	cmp	r0, r3
 800fb26:	d8f9      	bhi.n	800fb1c <__lshift+0xc8>
 800fb28:	e7ea      	b.n	800fb00 <__lshift+0xac>
 800fb2a:	bf00      	nop
 800fb2c:	08010f26 	.word	0x08010f26
 800fb30:	08010f37 	.word	0x08010f37

0800fb34 <__mcmp>:
 800fb34:	690a      	ldr	r2, [r1, #16]
 800fb36:	4603      	mov	r3, r0
 800fb38:	6900      	ldr	r0, [r0, #16]
 800fb3a:	1a80      	subs	r0, r0, r2
 800fb3c:	b530      	push	{r4, r5, lr}
 800fb3e:	d10d      	bne.n	800fb5c <__mcmp+0x28>
 800fb40:	3314      	adds	r3, #20
 800fb42:	3114      	adds	r1, #20
 800fb44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fb48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fb4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fb50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fb54:	4295      	cmp	r5, r2
 800fb56:	d002      	beq.n	800fb5e <__mcmp+0x2a>
 800fb58:	d304      	bcc.n	800fb64 <__mcmp+0x30>
 800fb5a:	2001      	movs	r0, #1
 800fb5c:	bd30      	pop	{r4, r5, pc}
 800fb5e:	42a3      	cmp	r3, r4
 800fb60:	d3f4      	bcc.n	800fb4c <__mcmp+0x18>
 800fb62:	e7fb      	b.n	800fb5c <__mcmp+0x28>
 800fb64:	f04f 30ff 	mov.w	r0, #4294967295
 800fb68:	e7f8      	b.n	800fb5c <__mcmp+0x28>
	...

0800fb6c <__mdiff>:
 800fb6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb70:	460d      	mov	r5, r1
 800fb72:	4607      	mov	r7, r0
 800fb74:	4611      	mov	r1, r2
 800fb76:	4628      	mov	r0, r5
 800fb78:	4614      	mov	r4, r2
 800fb7a:	f7ff ffdb 	bl	800fb34 <__mcmp>
 800fb7e:	1e06      	subs	r6, r0, #0
 800fb80:	d111      	bne.n	800fba6 <__mdiff+0x3a>
 800fb82:	4631      	mov	r1, r6
 800fb84:	4638      	mov	r0, r7
 800fb86:	f7ff fd57 	bl	800f638 <_Balloc>
 800fb8a:	4602      	mov	r2, r0
 800fb8c:	b928      	cbnz	r0, 800fb9a <__mdiff+0x2e>
 800fb8e:	4b39      	ldr	r3, [pc, #228]	; (800fc74 <__mdiff+0x108>)
 800fb90:	f240 2132 	movw	r1, #562	; 0x232
 800fb94:	4838      	ldr	r0, [pc, #224]	; (800fc78 <__mdiff+0x10c>)
 800fb96:	f7fe fe9d 	bl	800e8d4 <__assert_func>
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fba0:	4610      	mov	r0, r2
 800fba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba6:	bfa4      	itt	ge
 800fba8:	4623      	movge	r3, r4
 800fbaa:	462c      	movge	r4, r5
 800fbac:	4638      	mov	r0, r7
 800fbae:	6861      	ldr	r1, [r4, #4]
 800fbb0:	bfa6      	itte	ge
 800fbb2:	461d      	movge	r5, r3
 800fbb4:	2600      	movge	r6, #0
 800fbb6:	2601      	movlt	r6, #1
 800fbb8:	f7ff fd3e 	bl	800f638 <_Balloc>
 800fbbc:	4602      	mov	r2, r0
 800fbbe:	b918      	cbnz	r0, 800fbc8 <__mdiff+0x5c>
 800fbc0:	4b2c      	ldr	r3, [pc, #176]	; (800fc74 <__mdiff+0x108>)
 800fbc2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fbc6:	e7e5      	b.n	800fb94 <__mdiff+0x28>
 800fbc8:	6927      	ldr	r7, [r4, #16]
 800fbca:	60c6      	str	r6, [r0, #12]
 800fbcc:	692e      	ldr	r6, [r5, #16]
 800fbce:	f104 0014 	add.w	r0, r4, #20
 800fbd2:	f105 0914 	add.w	r9, r5, #20
 800fbd6:	f102 0e14 	add.w	lr, r2, #20
 800fbda:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800fbde:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fbe2:	3410      	adds	r4, #16
 800fbe4:	46f2      	mov	sl, lr
 800fbe6:	2100      	movs	r1, #0
 800fbe8:	f859 3b04 	ldr.w	r3, [r9], #4
 800fbec:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800fbf0:	fa1f f883 	uxth.w	r8, r3
 800fbf4:	fa11 f18b 	uxtah	r1, r1, fp
 800fbf8:	0c1b      	lsrs	r3, r3, #16
 800fbfa:	eba1 0808 	sub.w	r8, r1, r8
 800fbfe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fc02:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fc06:	fa1f f888 	uxth.w	r8, r8
 800fc0a:	1419      	asrs	r1, r3, #16
 800fc0c:	454e      	cmp	r6, r9
 800fc0e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fc12:	f84a 3b04 	str.w	r3, [sl], #4
 800fc16:	d8e7      	bhi.n	800fbe8 <__mdiff+0x7c>
 800fc18:	1b73      	subs	r3, r6, r5
 800fc1a:	3b15      	subs	r3, #21
 800fc1c:	f023 0303 	bic.w	r3, r3, #3
 800fc20:	3304      	adds	r3, #4
 800fc22:	3515      	adds	r5, #21
 800fc24:	42ae      	cmp	r6, r5
 800fc26:	bf38      	it	cc
 800fc28:	2304      	movcc	r3, #4
 800fc2a:	4418      	add	r0, r3
 800fc2c:	4473      	add	r3, lr
 800fc2e:	469e      	mov	lr, r3
 800fc30:	4606      	mov	r6, r0
 800fc32:	4566      	cmp	r6, ip
 800fc34:	d30e      	bcc.n	800fc54 <__mdiff+0xe8>
 800fc36:	f10c 0103 	add.w	r1, ip, #3
 800fc3a:	1a09      	subs	r1, r1, r0
 800fc3c:	f021 0103 	bic.w	r1, r1, #3
 800fc40:	3803      	subs	r0, #3
 800fc42:	4584      	cmp	ip, r0
 800fc44:	bf38      	it	cc
 800fc46:	2100      	movcc	r1, #0
 800fc48:	4419      	add	r1, r3
 800fc4a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800fc4e:	b17b      	cbz	r3, 800fc70 <__mdiff+0x104>
 800fc50:	6117      	str	r7, [r2, #16]
 800fc52:	e7a5      	b.n	800fba0 <__mdiff+0x34>
 800fc54:	f856 8b04 	ldr.w	r8, [r6], #4
 800fc58:	fa11 f488 	uxtah	r4, r1, r8
 800fc5c:	1425      	asrs	r5, r4, #16
 800fc5e:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800fc62:	b2a4      	uxth	r4, r4
 800fc64:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800fc68:	f84e 4b04 	str.w	r4, [lr], #4
 800fc6c:	1429      	asrs	r1, r5, #16
 800fc6e:	e7e0      	b.n	800fc32 <__mdiff+0xc6>
 800fc70:	3f01      	subs	r7, #1
 800fc72:	e7ea      	b.n	800fc4a <__mdiff+0xde>
 800fc74:	08010f26 	.word	0x08010f26
 800fc78:	08010f37 	.word	0x08010f37

0800fc7c <__d2b>:
 800fc7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fc80:	2101      	movs	r1, #1
 800fc82:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800fc86:	4690      	mov	r8, r2
 800fc88:	461d      	mov	r5, r3
 800fc8a:	f7ff fcd5 	bl	800f638 <_Balloc>
 800fc8e:	4604      	mov	r4, r0
 800fc90:	b930      	cbnz	r0, 800fca0 <__d2b+0x24>
 800fc92:	4602      	mov	r2, r0
 800fc94:	4b25      	ldr	r3, [pc, #148]	; (800fd2c <__d2b+0xb0>)
 800fc96:	4826      	ldr	r0, [pc, #152]	; (800fd30 <__d2b+0xb4>)
 800fc98:	f240 310a 	movw	r1, #778	; 0x30a
 800fc9c:	f7fe fe1a 	bl	800e8d4 <__assert_func>
 800fca0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800fca4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800fca8:	bb2d      	cbnz	r5, 800fcf6 <__d2b+0x7a>
 800fcaa:	9301      	str	r3, [sp, #4]
 800fcac:	f1b8 0300 	subs.w	r3, r8, #0
 800fcb0:	d026      	beq.n	800fd00 <__d2b+0x84>
 800fcb2:	4668      	mov	r0, sp
 800fcb4:	9300      	str	r3, [sp, #0]
 800fcb6:	f7ff fd87 	bl	800f7c8 <__lo0bits>
 800fcba:	9900      	ldr	r1, [sp, #0]
 800fcbc:	b1f0      	cbz	r0, 800fcfc <__d2b+0x80>
 800fcbe:	9a01      	ldr	r2, [sp, #4]
 800fcc0:	f1c0 0320 	rsb	r3, r0, #32
 800fcc4:	fa02 f303 	lsl.w	r3, r2, r3
 800fcc8:	430b      	orrs	r3, r1
 800fcca:	40c2      	lsrs	r2, r0
 800fccc:	6163      	str	r3, [r4, #20]
 800fcce:	9201      	str	r2, [sp, #4]
 800fcd0:	9b01      	ldr	r3, [sp, #4]
 800fcd2:	61a3      	str	r3, [r4, #24]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	bf14      	ite	ne
 800fcd8:	2102      	movne	r1, #2
 800fcda:	2101      	moveq	r1, #1
 800fcdc:	6121      	str	r1, [r4, #16]
 800fcde:	b1c5      	cbz	r5, 800fd12 <__d2b+0x96>
 800fce0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fce4:	4405      	add	r5, r0
 800fce6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fcea:	603d      	str	r5, [r7, #0]
 800fcec:	6030      	str	r0, [r6, #0]
 800fcee:	4620      	mov	r0, r4
 800fcf0:	b002      	add	sp, #8
 800fcf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fcfa:	e7d6      	b.n	800fcaa <__d2b+0x2e>
 800fcfc:	6161      	str	r1, [r4, #20]
 800fcfe:	e7e7      	b.n	800fcd0 <__d2b+0x54>
 800fd00:	a801      	add	r0, sp, #4
 800fd02:	f7ff fd61 	bl	800f7c8 <__lo0bits>
 800fd06:	9b01      	ldr	r3, [sp, #4]
 800fd08:	6163      	str	r3, [r4, #20]
 800fd0a:	2101      	movs	r1, #1
 800fd0c:	6121      	str	r1, [r4, #16]
 800fd0e:	3020      	adds	r0, #32
 800fd10:	e7e5      	b.n	800fcde <__d2b+0x62>
 800fd12:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800fd16:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fd1a:	6038      	str	r0, [r7, #0]
 800fd1c:	6918      	ldr	r0, [r3, #16]
 800fd1e:	f7ff fd33 	bl	800f788 <__hi0bits>
 800fd22:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800fd26:	6031      	str	r1, [r6, #0]
 800fd28:	e7e1      	b.n	800fcee <__d2b+0x72>
 800fd2a:	bf00      	nop
 800fd2c:	08010f26 	.word	0x08010f26
 800fd30:	08010f37 	.word	0x08010f37

0800fd34 <_calloc_r>:
 800fd34:	b570      	push	{r4, r5, r6, lr}
 800fd36:	fba1 5402 	umull	r5, r4, r1, r2
 800fd3a:	b934      	cbnz	r4, 800fd4a <_calloc_r+0x16>
 800fd3c:	4629      	mov	r1, r5
 800fd3e:	f000 f877 	bl	800fe30 <_malloc_r>
 800fd42:	4606      	mov	r6, r0
 800fd44:	b928      	cbnz	r0, 800fd52 <_calloc_r+0x1e>
 800fd46:	4630      	mov	r0, r6
 800fd48:	bd70      	pop	{r4, r5, r6, pc}
 800fd4a:	220c      	movs	r2, #12
 800fd4c:	6002      	str	r2, [r0, #0]
 800fd4e:	2600      	movs	r6, #0
 800fd50:	e7f9      	b.n	800fd46 <_calloc_r+0x12>
 800fd52:	462a      	mov	r2, r5
 800fd54:	4621      	mov	r1, r4
 800fd56:	f7fe f8ed 	bl	800df34 <memset>
 800fd5a:	e7f4      	b.n	800fd46 <_calloc_r+0x12>

0800fd5c <_free_r>:
 800fd5c:	b538      	push	{r3, r4, r5, lr}
 800fd5e:	4605      	mov	r5, r0
 800fd60:	2900      	cmp	r1, #0
 800fd62:	d041      	beq.n	800fde8 <_free_r+0x8c>
 800fd64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd68:	1f0c      	subs	r4, r1, #4
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	bfb8      	it	lt
 800fd6e:	18e4      	addlt	r4, r4, r3
 800fd70:	f000 fd30 	bl	80107d4 <__malloc_lock>
 800fd74:	4a1d      	ldr	r2, [pc, #116]	; (800fdec <_free_r+0x90>)
 800fd76:	6813      	ldr	r3, [r2, #0]
 800fd78:	b933      	cbnz	r3, 800fd88 <_free_r+0x2c>
 800fd7a:	6063      	str	r3, [r4, #4]
 800fd7c:	6014      	str	r4, [r2, #0]
 800fd7e:	4628      	mov	r0, r5
 800fd80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd84:	f000 bd2c 	b.w	80107e0 <__malloc_unlock>
 800fd88:	42a3      	cmp	r3, r4
 800fd8a:	d908      	bls.n	800fd9e <_free_r+0x42>
 800fd8c:	6820      	ldr	r0, [r4, #0]
 800fd8e:	1821      	adds	r1, r4, r0
 800fd90:	428b      	cmp	r3, r1
 800fd92:	bf01      	itttt	eq
 800fd94:	6819      	ldreq	r1, [r3, #0]
 800fd96:	685b      	ldreq	r3, [r3, #4]
 800fd98:	1809      	addeq	r1, r1, r0
 800fd9a:	6021      	streq	r1, [r4, #0]
 800fd9c:	e7ed      	b.n	800fd7a <_free_r+0x1e>
 800fd9e:	461a      	mov	r2, r3
 800fda0:	685b      	ldr	r3, [r3, #4]
 800fda2:	b10b      	cbz	r3, 800fda8 <_free_r+0x4c>
 800fda4:	42a3      	cmp	r3, r4
 800fda6:	d9fa      	bls.n	800fd9e <_free_r+0x42>
 800fda8:	6811      	ldr	r1, [r2, #0]
 800fdaa:	1850      	adds	r0, r2, r1
 800fdac:	42a0      	cmp	r0, r4
 800fdae:	d10b      	bne.n	800fdc8 <_free_r+0x6c>
 800fdb0:	6820      	ldr	r0, [r4, #0]
 800fdb2:	4401      	add	r1, r0
 800fdb4:	1850      	adds	r0, r2, r1
 800fdb6:	4283      	cmp	r3, r0
 800fdb8:	6011      	str	r1, [r2, #0]
 800fdba:	d1e0      	bne.n	800fd7e <_free_r+0x22>
 800fdbc:	6818      	ldr	r0, [r3, #0]
 800fdbe:	685b      	ldr	r3, [r3, #4]
 800fdc0:	6053      	str	r3, [r2, #4]
 800fdc2:	4401      	add	r1, r0
 800fdc4:	6011      	str	r1, [r2, #0]
 800fdc6:	e7da      	b.n	800fd7e <_free_r+0x22>
 800fdc8:	d902      	bls.n	800fdd0 <_free_r+0x74>
 800fdca:	230c      	movs	r3, #12
 800fdcc:	602b      	str	r3, [r5, #0]
 800fdce:	e7d6      	b.n	800fd7e <_free_r+0x22>
 800fdd0:	6820      	ldr	r0, [r4, #0]
 800fdd2:	1821      	adds	r1, r4, r0
 800fdd4:	428b      	cmp	r3, r1
 800fdd6:	bf04      	itt	eq
 800fdd8:	6819      	ldreq	r1, [r3, #0]
 800fdda:	685b      	ldreq	r3, [r3, #4]
 800fddc:	6063      	str	r3, [r4, #4]
 800fdde:	bf04      	itt	eq
 800fde0:	1809      	addeq	r1, r1, r0
 800fde2:	6021      	streq	r1, [r4, #0]
 800fde4:	6054      	str	r4, [r2, #4]
 800fde6:	e7ca      	b.n	800fd7e <_free_r+0x22>
 800fde8:	bd38      	pop	{r3, r4, r5, pc}
 800fdea:	bf00      	nop
 800fdec:	20000934 	.word	0x20000934

0800fdf0 <sbrk_aligned>:
 800fdf0:	b570      	push	{r4, r5, r6, lr}
 800fdf2:	4e0e      	ldr	r6, [pc, #56]	; (800fe2c <sbrk_aligned+0x3c>)
 800fdf4:	460c      	mov	r4, r1
 800fdf6:	6831      	ldr	r1, [r6, #0]
 800fdf8:	4605      	mov	r5, r0
 800fdfa:	b911      	cbnz	r1, 800fe02 <sbrk_aligned+0x12>
 800fdfc:	f000 f9e4 	bl	80101c8 <_sbrk_r>
 800fe00:	6030      	str	r0, [r6, #0]
 800fe02:	4621      	mov	r1, r4
 800fe04:	4628      	mov	r0, r5
 800fe06:	f000 f9df 	bl	80101c8 <_sbrk_r>
 800fe0a:	1c43      	adds	r3, r0, #1
 800fe0c:	d00a      	beq.n	800fe24 <sbrk_aligned+0x34>
 800fe0e:	1cc4      	adds	r4, r0, #3
 800fe10:	f024 0403 	bic.w	r4, r4, #3
 800fe14:	42a0      	cmp	r0, r4
 800fe16:	d007      	beq.n	800fe28 <sbrk_aligned+0x38>
 800fe18:	1a21      	subs	r1, r4, r0
 800fe1a:	4628      	mov	r0, r5
 800fe1c:	f000 f9d4 	bl	80101c8 <_sbrk_r>
 800fe20:	3001      	adds	r0, #1
 800fe22:	d101      	bne.n	800fe28 <sbrk_aligned+0x38>
 800fe24:	f04f 34ff 	mov.w	r4, #4294967295
 800fe28:	4620      	mov	r0, r4
 800fe2a:	bd70      	pop	{r4, r5, r6, pc}
 800fe2c:	20000938 	.word	0x20000938

0800fe30 <_malloc_r>:
 800fe30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe34:	1ccd      	adds	r5, r1, #3
 800fe36:	f025 0503 	bic.w	r5, r5, #3
 800fe3a:	3508      	adds	r5, #8
 800fe3c:	2d0c      	cmp	r5, #12
 800fe3e:	bf38      	it	cc
 800fe40:	250c      	movcc	r5, #12
 800fe42:	2d00      	cmp	r5, #0
 800fe44:	4607      	mov	r7, r0
 800fe46:	db01      	blt.n	800fe4c <_malloc_r+0x1c>
 800fe48:	42a9      	cmp	r1, r5
 800fe4a:	d905      	bls.n	800fe58 <_malloc_r+0x28>
 800fe4c:	230c      	movs	r3, #12
 800fe4e:	603b      	str	r3, [r7, #0]
 800fe50:	2600      	movs	r6, #0
 800fe52:	4630      	mov	r0, r6
 800fe54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe58:	4e2e      	ldr	r6, [pc, #184]	; (800ff14 <_malloc_r+0xe4>)
 800fe5a:	f000 fcbb 	bl	80107d4 <__malloc_lock>
 800fe5e:	6833      	ldr	r3, [r6, #0]
 800fe60:	461c      	mov	r4, r3
 800fe62:	bb34      	cbnz	r4, 800feb2 <_malloc_r+0x82>
 800fe64:	4629      	mov	r1, r5
 800fe66:	4638      	mov	r0, r7
 800fe68:	f7ff ffc2 	bl	800fdf0 <sbrk_aligned>
 800fe6c:	1c43      	adds	r3, r0, #1
 800fe6e:	4604      	mov	r4, r0
 800fe70:	d14d      	bne.n	800ff0e <_malloc_r+0xde>
 800fe72:	6834      	ldr	r4, [r6, #0]
 800fe74:	4626      	mov	r6, r4
 800fe76:	2e00      	cmp	r6, #0
 800fe78:	d140      	bne.n	800fefc <_malloc_r+0xcc>
 800fe7a:	6823      	ldr	r3, [r4, #0]
 800fe7c:	4631      	mov	r1, r6
 800fe7e:	4638      	mov	r0, r7
 800fe80:	eb04 0803 	add.w	r8, r4, r3
 800fe84:	f000 f9a0 	bl	80101c8 <_sbrk_r>
 800fe88:	4580      	cmp	r8, r0
 800fe8a:	d13a      	bne.n	800ff02 <_malloc_r+0xd2>
 800fe8c:	6821      	ldr	r1, [r4, #0]
 800fe8e:	3503      	adds	r5, #3
 800fe90:	1a6d      	subs	r5, r5, r1
 800fe92:	f025 0503 	bic.w	r5, r5, #3
 800fe96:	3508      	adds	r5, #8
 800fe98:	2d0c      	cmp	r5, #12
 800fe9a:	bf38      	it	cc
 800fe9c:	250c      	movcc	r5, #12
 800fe9e:	4629      	mov	r1, r5
 800fea0:	4638      	mov	r0, r7
 800fea2:	f7ff ffa5 	bl	800fdf0 <sbrk_aligned>
 800fea6:	3001      	adds	r0, #1
 800fea8:	d02b      	beq.n	800ff02 <_malloc_r+0xd2>
 800feaa:	6823      	ldr	r3, [r4, #0]
 800feac:	442b      	add	r3, r5
 800feae:	6023      	str	r3, [r4, #0]
 800feb0:	e00e      	b.n	800fed0 <_malloc_r+0xa0>
 800feb2:	6822      	ldr	r2, [r4, #0]
 800feb4:	1b52      	subs	r2, r2, r5
 800feb6:	d41e      	bmi.n	800fef6 <_malloc_r+0xc6>
 800feb8:	2a0b      	cmp	r2, #11
 800feba:	d916      	bls.n	800feea <_malloc_r+0xba>
 800febc:	1961      	adds	r1, r4, r5
 800febe:	42a3      	cmp	r3, r4
 800fec0:	6025      	str	r5, [r4, #0]
 800fec2:	bf18      	it	ne
 800fec4:	6059      	strne	r1, [r3, #4]
 800fec6:	6863      	ldr	r3, [r4, #4]
 800fec8:	bf08      	it	eq
 800feca:	6031      	streq	r1, [r6, #0]
 800fecc:	5162      	str	r2, [r4, r5]
 800fece:	604b      	str	r3, [r1, #4]
 800fed0:	4638      	mov	r0, r7
 800fed2:	f104 060b 	add.w	r6, r4, #11
 800fed6:	f000 fc83 	bl	80107e0 <__malloc_unlock>
 800feda:	f026 0607 	bic.w	r6, r6, #7
 800fede:	1d23      	adds	r3, r4, #4
 800fee0:	1af2      	subs	r2, r6, r3
 800fee2:	d0b6      	beq.n	800fe52 <_malloc_r+0x22>
 800fee4:	1b9b      	subs	r3, r3, r6
 800fee6:	50a3      	str	r3, [r4, r2]
 800fee8:	e7b3      	b.n	800fe52 <_malloc_r+0x22>
 800feea:	6862      	ldr	r2, [r4, #4]
 800feec:	42a3      	cmp	r3, r4
 800feee:	bf0c      	ite	eq
 800fef0:	6032      	streq	r2, [r6, #0]
 800fef2:	605a      	strne	r2, [r3, #4]
 800fef4:	e7ec      	b.n	800fed0 <_malloc_r+0xa0>
 800fef6:	4623      	mov	r3, r4
 800fef8:	6864      	ldr	r4, [r4, #4]
 800fefa:	e7b2      	b.n	800fe62 <_malloc_r+0x32>
 800fefc:	4634      	mov	r4, r6
 800fefe:	6876      	ldr	r6, [r6, #4]
 800ff00:	e7b9      	b.n	800fe76 <_malloc_r+0x46>
 800ff02:	230c      	movs	r3, #12
 800ff04:	603b      	str	r3, [r7, #0]
 800ff06:	4638      	mov	r0, r7
 800ff08:	f000 fc6a 	bl	80107e0 <__malloc_unlock>
 800ff0c:	e7a1      	b.n	800fe52 <_malloc_r+0x22>
 800ff0e:	6025      	str	r5, [r4, #0]
 800ff10:	e7de      	b.n	800fed0 <_malloc_r+0xa0>
 800ff12:	bf00      	nop
 800ff14:	20000934 	.word	0x20000934

0800ff18 <__sfputc_r>:
 800ff18:	6893      	ldr	r3, [r2, #8]
 800ff1a:	3b01      	subs	r3, #1
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	b410      	push	{r4}
 800ff20:	6093      	str	r3, [r2, #8]
 800ff22:	da07      	bge.n	800ff34 <__sfputc_r+0x1c>
 800ff24:	6994      	ldr	r4, [r2, #24]
 800ff26:	42a3      	cmp	r3, r4
 800ff28:	db01      	blt.n	800ff2e <__sfputc_r+0x16>
 800ff2a:	290a      	cmp	r1, #10
 800ff2c:	d102      	bne.n	800ff34 <__sfputc_r+0x1c>
 800ff2e:	bc10      	pop	{r4}
 800ff30:	f000 b95a 	b.w	80101e8 <__swbuf_r>
 800ff34:	6813      	ldr	r3, [r2, #0]
 800ff36:	1c58      	adds	r0, r3, #1
 800ff38:	6010      	str	r0, [r2, #0]
 800ff3a:	7019      	strb	r1, [r3, #0]
 800ff3c:	4608      	mov	r0, r1
 800ff3e:	bc10      	pop	{r4}
 800ff40:	4770      	bx	lr

0800ff42 <__sfputs_r>:
 800ff42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff44:	4606      	mov	r6, r0
 800ff46:	460f      	mov	r7, r1
 800ff48:	4614      	mov	r4, r2
 800ff4a:	18d5      	adds	r5, r2, r3
 800ff4c:	42ac      	cmp	r4, r5
 800ff4e:	d101      	bne.n	800ff54 <__sfputs_r+0x12>
 800ff50:	2000      	movs	r0, #0
 800ff52:	e007      	b.n	800ff64 <__sfputs_r+0x22>
 800ff54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff58:	463a      	mov	r2, r7
 800ff5a:	4630      	mov	r0, r6
 800ff5c:	f7ff ffdc 	bl	800ff18 <__sfputc_r>
 800ff60:	1c43      	adds	r3, r0, #1
 800ff62:	d1f3      	bne.n	800ff4c <__sfputs_r+0xa>
 800ff64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ff68 <_vfiprintf_r>:
 800ff68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff6c:	460d      	mov	r5, r1
 800ff6e:	b09d      	sub	sp, #116	; 0x74
 800ff70:	4614      	mov	r4, r2
 800ff72:	4698      	mov	r8, r3
 800ff74:	4606      	mov	r6, r0
 800ff76:	b118      	cbz	r0, 800ff80 <_vfiprintf_r+0x18>
 800ff78:	6983      	ldr	r3, [r0, #24]
 800ff7a:	b90b      	cbnz	r3, 800ff80 <_vfiprintf_r+0x18>
 800ff7c:	f000 fb12 	bl	80105a4 <__sinit>
 800ff80:	4b89      	ldr	r3, [pc, #548]	; (80101a8 <_vfiprintf_r+0x240>)
 800ff82:	429d      	cmp	r5, r3
 800ff84:	d11b      	bne.n	800ffbe <_vfiprintf_r+0x56>
 800ff86:	6875      	ldr	r5, [r6, #4]
 800ff88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff8a:	07d9      	lsls	r1, r3, #31
 800ff8c:	d405      	bmi.n	800ff9a <_vfiprintf_r+0x32>
 800ff8e:	89ab      	ldrh	r3, [r5, #12]
 800ff90:	059a      	lsls	r2, r3, #22
 800ff92:	d402      	bmi.n	800ff9a <_vfiprintf_r+0x32>
 800ff94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff96:	f000 fba3 	bl	80106e0 <__retarget_lock_acquire_recursive>
 800ff9a:	89ab      	ldrh	r3, [r5, #12]
 800ff9c:	071b      	lsls	r3, r3, #28
 800ff9e:	d501      	bpl.n	800ffa4 <_vfiprintf_r+0x3c>
 800ffa0:	692b      	ldr	r3, [r5, #16]
 800ffa2:	b9eb      	cbnz	r3, 800ffe0 <_vfiprintf_r+0x78>
 800ffa4:	4629      	mov	r1, r5
 800ffa6:	4630      	mov	r0, r6
 800ffa8:	f000 f970 	bl	801028c <__swsetup_r>
 800ffac:	b1c0      	cbz	r0, 800ffe0 <_vfiprintf_r+0x78>
 800ffae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffb0:	07dc      	lsls	r4, r3, #31
 800ffb2:	d50e      	bpl.n	800ffd2 <_vfiprintf_r+0x6a>
 800ffb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffb8:	b01d      	add	sp, #116	; 0x74
 800ffba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffbe:	4b7b      	ldr	r3, [pc, #492]	; (80101ac <_vfiprintf_r+0x244>)
 800ffc0:	429d      	cmp	r5, r3
 800ffc2:	d101      	bne.n	800ffc8 <_vfiprintf_r+0x60>
 800ffc4:	68b5      	ldr	r5, [r6, #8]
 800ffc6:	e7df      	b.n	800ff88 <_vfiprintf_r+0x20>
 800ffc8:	4b79      	ldr	r3, [pc, #484]	; (80101b0 <_vfiprintf_r+0x248>)
 800ffca:	429d      	cmp	r5, r3
 800ffcc:	bf08      	it	eq
 800ffce:	68f5      	ldreq	r5, [r6, #12]
 800ffd0:	e7da      	b.n	800ff88 <_vfiprintf_r+0x20>
 800ffd2:	89ab      	ldrh	r3, [r5, #12]
 800ffd4:	0598      	lsls	r0, r3, #22
 800ffd6:	d4ed      	bmi.n	800ffb4 <_vfiprintf_r+0x4c>
 800ffd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ffda:	f000 fb82 	bl	80106e2 <__retarget_lock_release_recursive>
 800ffde:	e7e9      	b.n	800ffb4 <_vfiprintf_r+0x4c>
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	9309      	str	r3, [sp, #36]	; 0x24
 800ffe4:	2320      	movs	r3, #32
 800ffe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ffea:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffee:	2330      	movs	r3, #48	; 0x30
 800fff0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80101b4 <_vfiprintf_r+0x24c>
 800fff4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fff8:	f04f 0901 	mov.w	r9, #1
 800fffc:	4623      	mov	r3, r4
 800fffe:	469a      	mov	sl, r3
 8010000:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010004:	b10a      	cbz	r2, 801000a <_vfiprintf_r+0xa2>
 8010006:	2a25      	cmp	r2, #37	; 0x25
 8010008:	d1f9      	bne.n	800fffe <_vfiprintf_r+0x96>
 801000a:	ebba 0b04 	subs.w	fp, sl, r4
 801000e:	d00b      	beq.n	8010028 <_vfiprintf_r+0xc0>
 8010010:	465b      	mov	r3, fp
 8010012:	4622      	mov	r2, r4
 8010014:	4629      	mov	r1, r5
 8010016:	4630      	mov	r0, r6
 8010018:	f7ff ff93 	bl	800ff42 <__sfputs_r>
 801001c:	3001      	adds	r0, #1
 801001e:	f000 80aa 	beq.w	8010176 <_vfiprintf_r+0x20e>
 8010022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010024:	445a      	add	r2, fp
 8010026:	9209      	str	r2, [sp, #36]	; 0x24
 8010028:	f89a 3000 	ldrb.w	r3, [sl]
 801002c:	2b00      	cmp	r3, #0
 801002e:	f000 80a2 	beq.w	8010176 <_vfiprintf_r+0x20e>
 8010032:	2300      	movs	r3, #0
 8010034:	f04f 32ff 	mov.w	r2, #4294967295
 8010038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801003c:	f10a 0a01 	add.w	sl, sl, #1
 8010040:	9304      	str	r3, [sp, #16]
 8010042:	9307      	str	r3, [sp, #28]
 8010044:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010048:	931a      	str	r3, [sp, #104]	; 0x68
 801004a:	4654      	mov	r4, sl
 801004c:	2205      	movs	r2, #5
 801004e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010052:	4858      	ldr	r0, [pc, #352]	; (80101b4 <_vfiprintf_r+0x24c>)
 8010054:	f7f0 f89c 	bl	8000190 <memchr>
 8010058:	9a04      	ldr	r2, [sp, #16]
 801005a:	b9d8      	cbnz	r0, 8010094 <_vfiprintf_r+0x12c>
 801005c:	06d1      	lsls	r1, r2, #27
 801005e:	bf44      	itt	mi
 8010060:	2320      	movmi	r3, #32
 8010062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010066:	0713      	lsls	r3, r2, #28
 8010068:	bf44      	itt	mi
 801006a:	232b      	movmi	r3, #43	; 0x2b
 801006c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010070:	f89a 3000 	ldrb.w	r3, [sl]
 8010074:	2b2a      	cmp	r3, #42	; 0x2a
 8010076:	d015      	beq.n	80100a4 <_vfiprintf_r+0x13c>
 8010078:	9a07      	ldr	r2, [sp, #28]
 801007a:	4654      	mov	r4, sl
 801007c:	2000      	movs	r0, #0
 801007e:	f04f 0c0a 	mov.w	ip, #10
 8010082:	4621      	mov	r1, r4
 8010084:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010088:	3b30      	subs	r3, #48	; 0x30
 801008a:	2b09      	cmp	r3, #9
 801008c:	d94e      	bls.n	801012c <_vfiprintf_r+0x1c4>
 801008e:	b1b0      	cbz	r0, 80100be <_vfiprintf_r+0x156>
 8010090:	9207      	str	r2, [sp, #28]
 8010092:	e014      	b.n	80100be <_vfiprintf_r+0x156>
 8010094:	eba0 0308 	sub.w	r3, r0, r8
 8010098:	fa09 f303 	lsl.w	r3, r9, r3
 801009c:	4313      	orrs	r3, r2
 801009e:	9304      	str	r3, [sp, #16]
 80100a0:	46a2      	mov	sl, r4
 80100a2:	e7d2      	b.n	801004a <_vfiprintf_r+0xe2>
 80100a4:	9b03      	ldr	r3, [sp, #12]
 80100a6:	1d19      	adds	r1, r3, #4
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	9103      	str	r1, [sp, #12]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	bfbb      	ittet	lt
 80100b0:	425b      	neglt	r3, r3
 80100b2:	f042 0202 	orrlt.w	r2, r2, #2
 80100b6:	9307      	strge	r3, [sp, #28]
 80100b8:	9307      	strlt	r3, [sp, #28]
 80100ba:	bfb8      	it	lt
 80100bc:	9204      	strlt	r2, [sp, #16]
 80100be:	7823      	ldrb	r3, [r4, #0]
 80100c0:	2b2e      	cmp	r3, #46	; 0x2e
 80100c2:	d10c      	bne.n	80100de <_vfiprintf_r+0x176>
 80100c4:	7863      	ldrb	r3, [r4, #1]
 80100c6:	2b2a      	cmp	r3, #42	; 0x2a
 80100c8:	d135      	bne.n	8010136 <_vfiprintf_r+0x1ce>
 80100ca:	9b03      	ldr	r3, [sp, #12]
 80100cc:	1d1a      	adds	r2, r3, #4
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	9203      	str	r2, [sp, #12]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	bfb8      	it	lt
 80100d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80100da:	3402      	adds	r4, #2
 80100dc:	9305      	str	r3, [sp, #20]
 80100de:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80101b8 <_vfiprintf_r+0x250>
 80100e2:	7821      	ldrb	r1, [r4, #0]
 80100e4:	2203      	movs	r2, #3
 80100e6:	4650      	mov	r0, sl
 80100e8:	f7f0 f852 	bl	8000190 <memchr>
 80100ec:	b140      	cbz	r0, 8010100 <_vfiprintf_r+0x198>
 80100ee:	2340      	movs	r3, #64	; 0x40
 80100f0:	eba0 000a 	sub.w	r0, r0, sl
 80100f4:	fa03 f000 	lsl.w	r0, r3, r0
 80100f8:	9b04      	ldr	r3, [sp, #16]
 80100fa:	4303      	orrs	r3, r0
 80100fc:	3401      	adds	r4, #1
 80100fe:	9304      	str	r3, [sp, #16]
 8010100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010104:	482d      	ldr	r0, [pc, #180]	; (80101bc <_vfiprintf_r+0x254>)
 8010106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801010a:	2206      	movs	r2, #6
 801010c:	f7f0 f840 	bl	8000190 <memchr>
 8010110:	2800      	cmp	r0, #0
 8010112:	d03f      	beq.n	8010194 <_vfiprintf_r+0x22c>
 8010114:	4b2a      	ldr	r3, [pc, #168]	; (80101c0 <_vfiprintf_r+0x258>)
 8010116:	bb1b      	cbnz	r3, 8010160 <_vfiprintf_r+0x1f8>
 8010118:	9b03      	ldr	r3, [sp, #12]
 801011a:	3307      	adds	r3, #7
 801011c:	f023 0307 	bic.w	r3, r3, #7
 8010120:	3308      	adds	r3, #8
 8010122:	9303      	str	r3, [sp, #12]
 8010124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010126:	443b      	add	r3, r7
 8010128:	9309      	str	r3, [sp, #36]	; 0x24
 801012a:	e767      	b.n	800fffc <_vfiprintf_r+0x94>
 801012c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010130:	460c      	mov	r4, r1
 8010132:	2001      	movs	r0, #1
 8010134:	e7a5      	b.n	8010082 <_vfiprintf_r+0x11a>
 8010136:	2300      	movs	r3, #0
 8010138:	3401      	adds	r4, #1
 801013a:	9305      	str	r3, [sp, #20]
 801013c:	4619      	mov	r1, r3
 801013e:	f04f 0c0a 	mov.w	ip, #10
 8010142:	4620      	mov	r0, r4
 8010144:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010148:	3a30      	subs	r2, #48	; 0x30
 801014a:	2a09      	cmp	r2, #9
 801014c:	d903      	bls.n	8010156 <_vfiprintf_r+0x1ee>
 801014e:	2b00      	cmp	r3, #0
 8010150:	d0c5      	beq.n	80100de <_vfiprintf_r+0x176>
 8010152:	9105      	str	r1, [sp, #20]
 8010154:	e7c3      	b.n	80100de <_vfiprintf_r+0x176>
 8010156:	fb0c 2101 	mla	r1, ip, r1, r2
 801015a:	4604      	mov	r4, r0
 801015c:	2301      	movs	r3, #1
 801015e:	e7f0      	b.n	8010142 <_vfiprintf_r+0x1da>
 8010160:	ab03      	add	r3, sp, #12
 8010162:	9300      	str	r3, [sp, #0]
 8010164:	462a      	mov	r2, r5
 8010166:	4b17      	ldr	r3, [pc, #92]	; (80101c4 <_vfiprintf_r+0x25c>)
 8010168:	a904      	add	r1, sp, #16
 801016a:	4630      	mov	r0, r6
 801016c:	f7fd ff88 	bl	800e080 <_printf_float>
 8010170:	4607      	mov	r7, r0
 8010172:	1c78      	adds	r0, r7, #1
 8010174:	d1d6      	bne.n	8010124 <_vfiprintf_r+0x1bc>
 8010176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010178:	07d9      	lsls	r1, r3, #31
 801017a:	d405      	bmi.n	8010188 <_vfiprintf_r+0x220>
 801017c:	89ab      	ldrh	r3, [r5, #12]
 801017e:	059a      	lsls	r2, r3, #22
 8010180:	d402      	bmi.n	8010188 <_vfiprintf_r+0x220>
 8010182:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010184:	f000 faad 	bl	80106e2 <__retarget_lock_release_recursive>
 8010188:	89ab      	ldrh	r3, [r5, #12]
 801018a:	065b      	lsls	r3, r3, #25
 801018c:	f53f af12 	bmi.w	800ffb4 <_vfiprintf_r+0x4c>
 8010190:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010192:	e711      	b.n	800ffb8 <_vfiprintf_r+0x50>
 8010194:	ab03      	add	r3, sp, #12
 8010196:	9300      	str	r3, [sp, #0]
 8010198:	462a      	mov	r2, r5
 801019a:	4b0a      	ldr	r3, [pc, #40]	; (80101c4 <_vfiprintf_r+0x25c>)
 801019c:	a904      	add	r1, sp, #16
 801019e:	4630      	mov	r0, r6
 80101a0:	f7fe fa06 	bl	800e5b0 <_printf_i>
 80101a4:	e7e4      	b.n	8010170 <_vfiprintf_r+0x208>
 80101a6:	bf00      	nop
 80101a8:	080110c8 	.word	0x080110c8
 80101ac:	080110e8 	.word	0x080110e8
 80101b0:	080110a8 	.word	0x080110a8
 80101b4:	08011094 	.word	0x08011094
 80101b8:	0801109a 	.word	0x0801109a
 80101bc:	0801109e 	.word	0x0801109e
 80101c0:	0800e081 	.word	0x0800e081
 80101c4:	0800ff43 	.word	0x0800ff43

080101c8 <_sbrk_r>:
 80101c8:	b538      	push	{r3, r4, r5, lr}
 80101ca:	4d06      	ldr	r5, [pc, #24]	; (80101e4 <_sbrk_r+0x1c>)
 80101cc:	2300      	movs	r3, #0
 80101ce:	4604      	mov	r4, r0
 80101d0:	4608      	mov	r0, r1
 80101d2:	602b      	str	r3, [r5, #0]
 80101d4:	f7f1 ff4e 	bl	8002074 <_sbrk>
 80101d8:	1c43      	adds	r3, r0, #1
 80101da:	d102      	bne.n	80101e2 <_sbrk_r+0x1a>
 80101dc:	682b      	ldr	r3, [r5, #0]
 80101de:	b103      	cbz	r3, 80101e2 <_sbrk_r+0x1a>
 80101e0:	6023      	str	r3, [r4, #0]
 80101e2:	bd38      	pop	{r3, r4, r5, pc}
 80101e4:	20000940 	.word	0x20000940

080101e8 <__swbuf_r>:
 80101e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ea:	460e      	mov	r6, r1
 80101ec:	4614      	mov	r4, r2
 80101ee:	4605      	mov	r5, r0
 80101f0:	b118      	cbz	r0, 80101fa <__swbuf_r+0x12>
 80101f2:	6983      	ldr	r3, [r0, #24]
 80101f4:	b90b      	cbnz	r3, 80101fa <__swbuf_r+0x12>
 80101f6:	f000 f9d5 	bl	80105a4 <__sinit>
 80101fa:	4b21      	ldr	r3, [pc, #132]	; (8010280 <__swbuf_r+0x98>)
 80101fc:	429c      	cmp	r4, r3
 80101fe:	d12b      	bne.n	8010258 <__swbuf_r+0x70>
 8010200:	686c      	ldr	r4, [r5, #4]
 8010202:	69a3      	ldr	r3, [r4, #24]
 8010204:	60a3      	str	r3, [r4, #8]
 8010206:	89a3      	ldrh	r3, [r4, #12]
 8010208:	071a      	lsls	r2, r3, #28
 801020a:	d52f      	bpl.n	801026c <__swbuf_r+0x84>
 801020c:	6923      	ldr	r3, [r4, #16]
 801020e:	b36b      	cbz	r3, 801026c <__swbuf_r+0x84>
 8010210:	6923      	ldr	r3, [r4, #16]
 8010212:	6820      	ldr	r0, [r4, #0]
 8010214:	1ac0      	subs	r0, r0, r3
 8010216:	6963      	ldr	r3, [r4, #20]
 8010218:	b2f6      	uxtb	r6, r6
 801021a:	4283      	cmp	r3, r0
 801021c:	4637      	mov	r7, r6
 801021e:	dc04      	bgt.n	801022a <__swbuf_r+0x42>
 8010220:	4621      	mov	r1, r4
 8010222:	4628      	mov	r0, r5
 8010224:	f000 f92a 	bl	801047c <_fflush_r>
 8010228:	bb30      	cbnz	r0, 8010278 <__swbuf_r+0x90>
 801022a:	68a3      	ldr	r3, [r4, #8]
 801022c:	3b01      	subs	r3, #1
 801022e:	60a3      	str	r3, [r4, #8]
 8010230:	6823      	ldr	r3, [r4, #0]
 8010232:	1c5a      	adds	r2, r3, #1
 8010234:	6022      	str	r2, [r4, #0]
 8010236:	701e      	strb	r6, [r3, #0]
 8010238:	6963      	ldr	r3, [r4, #20]
 801023a:	3001      	adds	r0, #1
 801023c:	4283      	cmp	r3, r0
 801023e:	d004      	beq.n	801024a <__swbuf_r+0x62>
 8010240:	89a3      	ldrh	r3, [r4, #12]
 8010242:	07db      	lsls	r3, r3, #31
 8010244:	d506      	bpl.n	8010254 <__swbuf_r+0x6c>
 8010246:	2e0a      	cmp	r6, #10
 8010248:	d104      	bne.n	8010254 <__swbuf_r+0x6c>
 801024a:	4621      	mov	r1, r4
 801024c:	4628      	mov	r0, r5
 801024e:	f000 f915 	bl	801047c <_fflush_r>
 8010252:	b988      	cbnz	r0, 8010278 <__swbuf_r+0x90>
 8010254:	4638      	mov	r0, r7
 8010256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010258:	4b0a      	ldr	r3, [pc, #40]	; (8010284 <__swbuf_r+0x9c>)
 801025a:	429c      	cmp	r4, r3
 801025c:	d101      	bne.n	8010262 <__swbuf_r+0x7a>
 801025e:	68ac      	ldr	r4, [r5, #8]
 8010260:	e7cf      	b.n	8010202 <__swbuf_r+0x1a>
 8010262:	4b09      	ldr	r3, [pc, #36]	; (8010288 <__swbuf_r+0xa0>)
 8010264:	429c      	cmp	r4, r3
 8010266:	bf08      	it	eq
 8010268:	68ec      	ldreq	r4, [r5, #12]
 801026a:	e7ca      	b.n	8010202 <__swbuf_r+0x1a>
 801026c:	4621      	mov	r1, r4
 801026e:	4628      	mov	r0, r5
 8010270:	f000 f80c 	bl	801028c <__swsetup_r>
 8010274:	2800      	cmp	r0, #0
 8010276:	d0cb      	beq.n	8010210 <__swbuf_r+0x28>
 8010278:	f04f 37ff 	mov.w	r7, #4294967295
 801027c:	e7ea      	b.n	8010254 <__swbuf_r+0x6c>
 801027e:	bf00      	nop
 8010280:	080110c8 	.word	0x080110c8
 8010284:	080110e8 	.word	0x080110e8
 8010288:	080110a8 	.word	0x080110a8

0801028c <__swsetup_r>:
 801028c:	4b32      	ldr	r3, [pc, #200]	; (8010358 <__swsetup_r+0xcc>)
 801028e:	b570      	push	{r4, r5, r6, lr}
 8010290:	681d      	ldr	r5, [r3, #0]
 8010292:	4606      	mov	r6, r0
 8010294:	460c      	mov	r4, r1
 8010296:	b125      	cbz	r5, 80102a2 <__swsetup_r+0x16>
 8010298:	69ab      	ldr	r3, [r5, #24]
 801029a:	b913      	cbnz	r3, 80102a2 <__swsetup_r+0x16>
 801029c:	4628      	mov	r0, r5
 801029e:	f000 f981 	bl	80105a4 <__sinit>
 80102a2:	4b2e      	ldr	r3, [pc, #184]	; (801035c <__swsetup_r+0xd0>)
 80102a4:	429c      	cmp	r4, r3
 80102a6:	d10f      	bne.n	80102c8 <__swsetup_r+0x3c>
 80102a8:	686c      	ldr	r4, [r5, #4]
 80102aa:	89a3      	ldrh	r3, [r4, #12]
 80102ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102b0:	0719      	lsls	r1, r3, #28
 80102b2:	d42c      	bmi.n	801030e <__swsetup_r+0x82>
 80102b4:	06dd      	lsls	r5, r3, #27
 80102b6:	d411      	bmi.n	80102dc <__swsetup_r+0x50>
 80102b8:	2309      	movs	r3, #9
 80102ba:	6033      	str	r3, [r6, #0]
 80102bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80102c0:	81a3      	strh	r3, [r4, #12]
 80102c2:	f04f 30ff 	mov.w	r0, #4294967295
 80102c6:	e03e      	b.n	8010346 <__swsetup_r+0xba>
 80102c8:	4b25      	ldr	r3, [pc, #148]	; (8010360 <__swsetup_r+0xd4>)
 80102ca:	429c      	cmp	r4, r3
 80102cc:	d101      	bne.n	80102d2 <__swsetup_r+0x46>
 80102ce:	68ac      	ldr	r4, [r5, #8]
 80102d0:	e7eb      	b.n	80102aa <__swsetup_r+0x1e>
 80102d2:	4b24      	ldr	r3, [pc, #144]	; (8010364 <__swsetup_r+0xd8>)
 80102d4:	429c      	cmp	r4, r3
 80102d6:	bf08      	it	eq
 80102d8:	68ec      	ldreq	r4, [r5, #12]
 80102da:	e7e6      	b.n	80102aa <__swsetup_r+0x1e>
 80102dc:	0758      	lsls	r0, r3, #29
 80102de:	d512      	bpl.n	8010306 <__swsetup_r+0x7a>
 80102e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102e2:	b141      	cbz	r1, 80102f6 <__swsetup_r+0x6a>
 80102e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102e8:	4299      	cmp	r1, r3
 80102ea:	d002      	beq.n	80102f2 <__swsetup_r+0x66>
 80102ec:	4630      	mov	r0, r6
 80102ee:	f7ff fd35 	bl	800fd5c <_free_r>
 80102f2:	2300      	movs	r3, #0
 80102f4:	6363      	str	r3, [r4, #52]	; 0x34
 80102f6:	89a3      	ldrh	r3, [r4, #12]
 80102f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80102fc:	81a3      	strh	r3, [r4, #12]
 80102fe:	2300      	movs	r3, #0
 8010300:	6063      	str	r3, [r4, #4]
 8010302:	6923      	ldr	r3, [r4, #16]
 8010304:	6023      	str	r3, [r4, #0]
 8010306:	89a3      	ldrh	r3, [r4, #12]
 8010308:	f043 0308 	orr.w	r3, r3, #8
 801030c:	81a3      	strh	r3, [r4, #12]
 801030e:	6923      	ldr	r3, [r4, #16]
 8010310:	b94b      	cbnz	r3, 8010326 <__swsetup_r+0x9a>
 8010312:	89a3      	ldrh	r3, [r4, #12]
 8010314:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801031c:	d003      	beq.n	8010326 <__swsetup_r+0x9a>
 801031e:	4621      	mov	r1, r4
 8010320:	4630      	mov	r0, r6
 8010322:	f000 fa05 	bl	8010730 <__smakebuf_r>
 8010326:	89a0      	ldrh	r0, [r4, #12]
 8010328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801032c:	f010 0301 	ands.w	r3, r0, #1
 8010330:	d00a      	beq.n	8010348 <__swsetup_r+0xbc>
 8010332:	2300      	movs	r3, #0
 8010334:	60a3      	str	r3, [r4, #8]
 8010336:	6963      	ldr	r3, [r4, #20]
 8010338:	425b      	negs	r3, r3
 801033a:	61a3      	str	r3, [r4, #24]
 801033c:	6923      	ldr	r3, [r4, #16]
 801033e:	b943      	cbnz	r3, 8010352 <__swsetup_r+0xc6>
 8010340:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010344:	d1ba      	bne.n	80102bc <__swsetup_r+0x30>
 8010346:	bd70      	pop	{r4, r5, r6, pc}
 8010348:	0781      	lsls	r1, r0, #30
 801034a:	bf58      	it	pl
 801034c:	6963      	ldrpl	r3, [r4, #20]
 801034e:	60a3      	str	r3, [r4, #8]
 8010350:	e7f4      	b.n	801033c <__swsetup_r+0xb0>
 8010352:	2000      	movs	r0, #0
 8010354:	e7f7      	b.n	8010346 <__swsetup_r+0xba>
 8010356:	bf00      	nop
 8010358:	20000024 	.word	0x20000024
 801035c:	080110c8 	.word	0x080110c8
 8010360:	080110e8 	.word	0x080110e8
 8010364:	080110a8 	.word	0x080110a8

08010368 <abort>:
 8010368:	b508      	push	{r3, lr}
 801036a:	2006      	movs	r0, #6
 801036c:	f000 fa66 	bl	801083c <raise>
 8010370:	2001      	movs	r0, #1
 8010372:	f7f1 fe0c 	bl	8001f8e <_exit>
	...

08010378 <__sflush_r>:
 8010378:	898a      	ldrh	r2, [r1, #12]
 801037a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801037c:	4605      	mov	r5, r0
 801037e:	0710      	lsls	r0, r2, #28
 8010380:	460c      	mov	r4, r1
 8010382:	d457      	bmi.n	8010434 <__sflush_r+0xbc>
 8010384:	684b      	ldr	r3, [r1, #4]
 8010386:	2b00      	cmp	r3, #0
 8010388:	dc04      	bgt.n	8010394 <__sflush_r+0x1c>
 801038a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801038c:	2b00      	cmp	r3, #0
 801038e:	dc01      	bgt.n	8010394 <__sflush_r+0x1c>
 8010390:	2000      	movs	r0, #0
 8010392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010396:	2e00      	cmp	r6, #0
 8010398:	d0fa      	beq.n	8010390 <__sflush_r+0x18>
 801039a:	2300      	movs	r3, #0
 801039c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80103a0:	682f      	ldr	r7, [r5, #0]
 80103a2:	602b      	str	r3, [r5, #0]
 80103a4:	d032      	beq.n	801040c <__sflush_r+0x94>
 80103a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80103a8:	89a3      	ldrh	r3, [r4, #12]
 80103aa:	075a      	lsls	r2, r3, #29
 80103ac:	d505      	bpl.n	80103ba <__sflush_r+0x42>
 80103ae:	6863      	ldr	r3, [r4, #4]
 80103b0:	1ac0      	subs	r0, r0, r3
 80103b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80103b4:	b10b      	cbz	r3, 80103ba <__sflush_r+0x42>
 80103b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80103b8:	1ac0      	subs	r0, r0, r3
 80103ba:	2300      	movs	r3, #0
 80103bc:	4602      	mov	r2, r0
 80103be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80103c0:	6a21      	ldr	r1, [r4, #32]
 80103c2:	4628      	mov	r0, r5
 80103c4:	47b0      	blx	r6
 80103c6:	1c43      	adds	r3, r0, #1
 80103c8:	89a3      	ldrh	r3, [r4, #12]
 80103ca:	d106      	bne.n	80103da <__sflush_r+0x62>
 80103cc:	6829      	ldr	r1, [r5, #0]
 80103ce:	291d      	cmp	r1, #29
 80103d0:	d82c      	bhi.n	801042c <__sflush_r+0xb4>
 80103d2:	4a29      	ldr	r2, [pc, #164]	; (8010478 <__sflush_r+0x100>)
 80103d4:	40ca      	lsrs	r2, r1
 80103d6:	07d6      	lsls	r6, r2, #31
 80103d8:	d528      	bpl.n	801042c <__sflush_r+0xb4>
 80103da:	2200      	movs	r2, #0
 80103dc:	6062      	str	r2, [r4, #4]
 80103de:	04d9      	lsls	r1, r3, #19
 80103e0:	6922      	ldr	r2, [r4, #16]
 80103e2:	6022      	str	r2, [r4, #0]
 80103e4:	d504      	bpl.n	80103f0 <__sflush_r+0x78>
 80103e6:	1c42      	adds	r2, r0, #1
 80103e8:	d101      	bne.n	80103ee <__sflush_r+0x76>
 80103ea:	682b      	ldr	r3, [r5, #0]
 80103ec:	b903      	cbnz	r3, 80103f0 <__sflush_r+0x78>
 80103ee:	6560      	str	r0, [r4, #84]	; 0x54
 80103f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103f2:	602f      	str	r7, [r5, #0]
 80103f4:	2900      	cmp	r1, #0
 80103f6:	d0cb      	beq.n	8010390 <__sflush_r+0x18>
 80103f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103fc:	4299      	cmp	r1, r3
 80103fe:	d002      	beq.n	8010406 <__sflush_r+0x8e>
 8010400:	4628      	mov	r0, r5
 8010402:	f7ff fcab 	bl	800fd5c <_free_r>
 8010406:	2000      	movs	r0, #0
 8010408:	6360      	str	r0, [r4, #52]	; 0x34
 801040a:	e7c2      	b.n	8010392 <__sflush_r+0x1a>
 801040c:	6a21      	ldr	r1, [r4, #32]
 801040e:	2301      	movs	r3, #1
 8010410:	4628      	mov	r0, r5
 8010412:	47b0      	blx	r6
 8010414:	1c41      	adds	r1, r0, #1
 8010416:	d1c7      	bne.n	80103a8 <__sflush_r+0x30>
 8010418:	682b      	ldr	r3, [r5, #0]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d0c4      	beq.n	80103a8 <__sflush_r+0x30>
 801041e:	2b1d      	cmp	r3, #29
 8010420:	d001      	beq.n	8010426 <__sflush_r+0xae>
 8010422:	2b16      	cmp	r3, #22
 8010424:	d101      	bne.n	801042a <__sflush_r+0xb2>
 8010426:	602f      	str	r7, [r5, #0]
 8010428:	e7b2      	b.n	8010390 <__sflush_r+0x18>
 801042a:	89a3      	ldrh	r3, [r4, #12]
 801042c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010430:	81a3      	strh	r3, [r4, #12]
 8010432:	e7ae      	b.n	8010392 <__sflush_r+0x1a>
 8010434:	690f      	ldr	r7, [r1, #16]
 8010436:	2f00      	cmp	r7, #0
 8010438:	d0aa      	beq.n	8010390 <__sflush_r+0x18>
 801043a:	0793      	lsls	r3, r2, #30
 801043c:	680e      	ldr	r6, [r1, #0]
 801043e:	bf08      	it	eq
 8010440:	694b      	ldreq	r3, [r1, #20]
 8010442:	600f      	str	r7, [r1, #0]
 8010444:	bf18      	it	ne
 8010446:	2300      	movne	r3, #0
 8010448:	1bf6      	subs	r6, r6, r7
 801044a:	608b      	str	r3, [r1, #8]
 801044c:	2e00      	cmp	r6, #0
 801044e:	dd9f      	ble.n	8010390 <__sflush_r+0x18>
 8010450:	6a21      	ldr	r1, [r4, #32]
 8010452:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8010456:	4633      	mov	r3, r6
 8010458:	463a      	mov	r2, r7
 801045a:	4628      	mov	r0, r5
 801045c:	47e0      	blx	ip
 801045e:	2800      	cmp	r0, #0
 8010460:	dc06      	bgt.n	8010470 <__sflush_r+0xf8>
 8010462:	89a3      	ldrh	r3, [r4, #12]
 8010464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010468:	81a3      	strh	r3, [r4, #12]
 801046a:	f04f 30ff 	mov.w	r0, #4294967295
 801046e:	e790      	b.n	8010392 <__sflush_r+0x1a>
 8010470:	4407      	add	r7, r0
 8010472:	1a36      	subs	r6, r6, r0
 8010474:	e7ea      	b.n	801044c <__sflush_r+0xd4>
 8010476:	bf00      	nop
 8010478:	20400001 	.word	0x20400001

0801047c <_fflush_r>:
 801047c:	b538      	push	{r3, r4, r5, lr}
 801047e:	690b      	ldr	r3, [r1, #16]
 8010480:	4605      	mov	r5, r0
 8010482:	460c      	mov	r4, r1
 8010484:	b913      	cbnz	r3, 801048c <_fflush_r+0x10>
 8010486:	2500      	movs	r5, #0
 8010488:	4628      	mov	r0, r5
 801048a:	bd38      	pop	{r3, r4, r5, pc}
 801048c:	b118      	cbz	r0, 8010496 <_fflush_r+0x1a>
 801048e:	6983      	ldr	r3, [r0, #24]
 8010490:	b90b      	cbnz	r3, 8010496 <_fflush_r+0x1a>
 8010492:	f000 f887 	bl	80105a4 <__sinit>
 8010496:	4b14      	ldr	r3, [pc, #80]	; (80104e8 <_fflush_r+0x6c>)
 8010498:	429c      	cmp	r4, r3
 801049a:	d11b      	bne.n	80104d4 <_fflush_r+0x58>
 801049c:	686c      	ldr	r4, [r5, #4]
 801049e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d0ef      	beq.n	8010486 <_fflush_r+0xa>
 80104a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80104a8:	07d0      	lsls	r0, r2, #31
 80104aa:	d404      	bmi.n	80104b6 <_fflush_r+0x3a>
 80104ac:	0599      	lsls	r1, r3, #22
 80104ae:	d402      	bmi.n	80104b6 <_fflush_r+0x3a>
 80104b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104b2:	f000 f915 	bl	80106e0 <__retarget_lock_acquire_recursive>
 80104b6:	4628      	mov	r0, r5
 80104b8:	4621      	mov	r1, r4
 80104ba:	f7ff ff5d 	bl	8010378 <__sflush_r>
 80104be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80104c0:	07da      	lsls	r2, r3, #31
 80104c2:	4605      	mov	r5, r0
 80104c4:	d4e0      	bmi.n	8010488 <_fflush_r+0xc>
 80104c6:	89a3      	ldrh	r3, [r4, #12]
 80104c8:	059b      	lsls	r3, r3, #22
 80104ca:	d4dd      	bmi.n	8010488 <_fflush_r+0xc>
 80104cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104ce:	f000 f908 	bl	80106e2 <__retarget_lock_release_recursive>
 80104d2:	e7d9      	b.n	8010488 <_fflush_r+0xc>
 80104d4:	4b05      	ldr	r3, [pc, #20]	; (80104ec <_fflush_r+0x70>)
 80104d6:	429c      	cmp	r4, r3
 80104d8:	d101      	bne.n	80104de <_fflush_r+0x62>
 80104da:	68ac      	ldr	r4, [r5, #8]
 80104dc:	e7df      	b.n	801049e <_fflush_r+0x22>
 80104de:	4b04      	ldr	r3, [pc, #16]	; (80104f0 <_fflush_r+0x74>)
 80104e0:	429c      	cmp	r4, r3
 80104e2:	bf08      	it	eq
 80104e4:	68ec      	ldreq	r4, [r5, #12]
 80104e6:	e7da      	b.n	801049e <_fflush_r+0x22>
 80104e8:	080110c8 	.word	0x080110c8
 80104ec:	080110e8 	.word	0x080110e8
 80104f0:	080110a8 	.word	0x080110a8

080104f4 <std>:
 80104f4:	2300      	movs	r3, #0
 80104f6:	b510      	push	{r4, lr}
 80104f8:	4604      	mov	r4, r0
 80104fa:	e9c0 3300 	strd	r3, r3, [r0]
 80104fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010502:	6083      	str	r3, [r0, #8]
 8010504:	8181      	strh	r1, [r0, #12]
 8010506:	6643      	str	r3, [r0, #100]	; 0x64
 8010508:	81c2      	strh	r2, [r0, #14]
 801050a:	6183      	str	r3, [r0, #24]
 801050c:	4619      	mov	r1, r3
 801050e:	2208      	movs	r2, #8
 8010510:	305c      	adds	r0, #92	; 0x5c
 8010512:	f7fd fd0f 	bl	800df34 <memset>
 8010516:	4b05      	ldr	r3, [pc, #20]	; (801052c <std+0x38>)
 8010518:	6263      	str	r3, [r4, #36]	; 0x24
 801051a:	4b05      	ldr	r3, [pc, #20]	; (8010530 <std+0x3c>)
 801051c:	62a3      	str	r3, [r4, #40]	; 0x28
 801051e:	4b05      	ldr	r3, [pc, #20]	; (8010534 <std+0x40>)
 8010520:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010522:	4b05      	ldr	r3, [pc, #20]	; (8010538 <std+0x44>)
 8010524:	6224      	str	r4, [r4, #32]
 8010526:	6323      	str	r3, [r4, #48]	; 0x30
 8010528:	bd10      	pop	{r4, pc}
 801052a:	bf00      	nop
 801052c:	08010875 	.word	0x08010875
 8010530:	08010897 	.word	0x08010897
 8010534:	080108cf 	.word	0x080108cf
 8010538:	080108f3 	.word	0x080108f3

0801053c <_cleanup_r>:
 801053c:	4901      	ldr	r1, [pc, #4]	; (8010544 <_cleanup_r+0x8>)
 801053e:	f000 b8af 	b.w	80106a0 <_fwalk_reent>
 8010542:	bf00      	nop
 8010544:	0801047d 	.word	0x0801047d

08010548 <__sfmoreglue>:
 8010548:	b570      	push	{r4, r5, r6, lr}
 801054a:	2268      	movs	r2, #104	; 0x68
 801054c:	1e4d      	subs	r5, r1, #1
 801054e:	4355      	muls	r5, r2
 8010550:	460e      	mov	r6, r1
 8010552:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010556:	f7ff fc6b 	bl	800fe30 <_malloc_r>
 801055a:	4604      	mov	r4, r0
 801055c:	b140      	cbz	r0, 8010570 <__sfmoreglue+0x28>
 801055e:	2100      	movs	r1, #0
 8010560:	e9c0 1600 	strd	r1, r6, [r0]
 8010564:	300c      	adds	r0, #12
 8010566:	60a0      	str	r0, [r4, #8]
 8010568:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801056c:	f7fd fce2 	bl	800df34 <memset>
 8010570:	4620      	mov	r0, r4
 8010572:	bd70      	pop	{r4, r5, r6, pc}

08010574 <__sfp_lock_acquire>:
 8010574:	4801      	ldr	r0, [pc, #4]	; (801057c <__sfp_lock_acquire+0x8>)
 8010576:	f000 b8b3 	b.w	80106e0 <__retarget_lock_acquire_recursive>
 801057a:	bf00      	nop
 801057c:	2000093d 	.word	0x2000093d

08010580 <__sfp_lock_release>:
 8010580:	4801      	ldr	r0, [pc, #4]	; (8010588 <__sfp_lock_release+0x8>)
 8010582:	f000 b8ae 	b.w	80106e2 <__retarget_lock_release_recursive>
 8010586:	bf00      	nop
 8010588:	2000093d 	.word	0x2000093d

0801058c <__sinit_lock_acquire>:
 801058c:	4801      	ldr	r0, [pc, #4]	; (8010594 <__sinit_lock_acquire+0x8>)
 801058e:	f000 b8a7 	b.w	80106e0 <__retarget_lock_acquire_recursive>
 8010592:	bf00      	nop
 8010594:	2000093e 	.word	0x2000093e

08010598 <__sinit_lock_release>:
 8010598:	4801      	ldr	r0, [pc, #4]	; (80105a0 <__sinit_lock_release+0x8>)
 801059a:	f000 b8a2 	b.w	80106e2 <__retarget_lock_release_recursive>
 801059e:	bf00      	nop
 80105a0:	2000093e 	.word	0x2000093e

080105a4 <__sinit>:
 80105a4:	b510      	push	{r4, lr}
 80105a6:	4604      	mov	r4, r0
 80105a8:	f7ff fff0 	bl	801058c <__sinit_lock_acquire>
 80105ac:	69a3      	ldr	r3, [r4, #24]
 80105ae:	b11b      	cbz	r3, 80105b8 <__sinit+0x14>
 80105b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105b4:	f7ff bff0 	b.w	8010598 <__sinit_lock_release>
 80105b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80105bc:	6523      	str	r3, [r4, #80]	; 0x50
 80105be:	4b13      	ldr	r3, [pc, #76]	; (801060c <__sinit+0x68>)
 80105c0:	4a13      	ldr	r2, [pc, #76]	; (8010610 <__sinit+0x6c>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80105c6:	42a3      	cmp	r3, r4
 80105c8:	bf04      	itt	eq
 80105ca:	2301      	moveq	r3, #1
 80105cc:	61a3      	streq	r3, [r4, #24]
 80105ce:	4620      	mov	r0, r4
 80105d0:	f000 f820 	bl	8010614 <__sfp>
 80105d4:	6060      	str	r0, [r4, #4]
 80105d6:	4620      	mov	r0, r4
 80105d8:	f000 f81c 	bl	8010614 <__sfp>
 80105dc:	60a0      	str	r0, [r4, #8]
 80105de:	4620      	mov	r0, r4
 80105e0:	f000 f818 	bl	8010614 <__sfp>
 80105e4:	2200      	movs	r2, #0
 80105e6:	60e0      	str	r0, [r4, #12]
 80105e8:	2104      	movs	r1, #4
 80105ea:	6860      	ldr	r0, [r4, #4]
 80105ec:	f7ff ff82 	bl	80104f4 <std>
 80105f0:	68a0      	ldr	r0, [r4, #8]
 80105f2:	2201      	movs	r2, #1
 80105f4:	2109      	movs	r1, #9
 80105f6:	f7ff ff7d 	bl	80104f4 <std>
 80105fa:	68e0      	ldr	r0, [r4, #12]
 80105fc:	2202      	movs	r2, #2
 80105fe:	2112      	movs	r1, #18
 8010600:	f7ff ff78 	bl	80104f4 <std>
 8010604:	2301      	movs	r3, #1
 8010606:	61a3      	str	r3, [r4, #24]
 8010608:	e7d2      	b.n	80105b0 <__sinit+0xc>
 801060a:	bf00      	nop
 801060c:	08010dd8 	.word	0x08010dd8
 8010610:	0801053d 	.word	0x0801053d

08010614 <__sfp>:
 8010614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010616:	4607      	mov	r7, r0
 8010618:	f7ff ffac 	bl	8010574 <__sfp_lock_acquire>
 801061c:	4b1e      	ldr	r3, [pc, #120]	; (8010698 <__sfp+0x84>)
 801061e:	681e      	ldr	r6, [r3, #0]
 8010620:	69b3      	ldr	r3, [r6, #24]
 8010622:	b913      	cbnz	r3, 801062a <__sfp+0x16>
 8010624:	4630      	mov	r0, r6
 8010626:	f7ff ffbd 	bl	80105a4 <__sinit>
 801062a:	3648      	adds	r6, #72	; 0x48
 801062c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010630:	3b01      	subs	r3, #1
 8010632:	d503      	bpl.n	801063c <__sfp+0x28>
 8010634:	6833      	ldr	r3, [r6, #0]
 8010636:	b30b      	cbz	r3, 801067c <__sfp+0x68>
 8010638:	6836      	ldr	r6, [r6, #0]
 801063a:	e7f7      	b.n	801062c <__sfp+0x18>
 801063c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010640:	b9d5      	cbnz	r5, 8010678 <__sfp+0x64>
 8010642:	4b16      	ldr	r3, [pc, #88]	; (801069c <__sfp+0x88>)
 8010644:	60e3      	str	r3, [r4, #12]
 8010646:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801064a:	6665      	str	r5, [r4, #100]	; 0x64
 801064c:	f000 f847 	bl	80106de <__retarget_lock_init_recursive>
 8010650:	f7ff ff96 	bl	8010580 <__sfp_lock_release>
 8010654:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010658:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801065c:	6025      	str	r5, [r4, #0]
 801065e:	61a5      	str	r5, [r4, #24]
 8010660:	2208      	movs	r2, #8
 8010662:	4629      	mov	r1, r5
 8010664:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010668:	f7fd fc64 	bl	800df34 <memset>
 801066c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010670:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010674:	4620      	mov	r0, r4
 8010676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010678:	3468      	adds	r4, #104	; 0x68
 801067a:	e7d9      	b.n	8010630 <__sfp+0x1c>
 801067c:	2104      	movs	r1, #4
 801067e:	4638      	mov	r0, r7
 8010680:	f7ff ff62 	bl	8010548 <__sfmoreglue>
 8010684:	4604      	mov	r4, r0
 8010686:	6030      	str	r0, [r6, #0]
 8010688:	2800      	cmp	r0, #0
 801068a:	d1d5      	bne.n	8010638 <__sfp+0x24>
 801068c:	f7ff ff78 	bl	8010580 <__sfp_lock_release>
 8010690:	230c      	movs	r3, #12
 8010692:	603b      	str	r3, [r7, #0]
 8010694:	e7ee      	b.n	8010674 <__sfp+0x60>
 8010696:	bf00      	nop
 8010698:	08010dd8 	.word	0x08010dd8
 801069c:	ffff0001 	.word	0xffff0001

080106a0 <_fwalk_reent>:
 80106a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106a4:	4606      	mov	r6, r0
 80106a6:	4688      	mov	r8, r1
 80106a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80106ac:	2700      	movs	r7, #0
 80106ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80106b2:	f1b9 0901 	subs.w	r9, r9, #1
 80106b6:	d505      	bpl.n	80106c4 <_fwalk_reent+0x24>
 80106b8:	6824      	ldr	r4, [r4, #0]
 80106ba:	2c00      	cmp	r4, #0
 80106bc:	d1f7      	bne.n	80106ae <_fwalk_reent+0xe>
 80106be:	4638      	mov	r0, r7
 80106c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106c4:	89ab      	ldrh	r3, [r5, #12]
 80106c6:	2b01      	cmp	r3, #1
 80106c8:	d907      	bls.n	80106da <_fwalk_reent+0x3a>
 80106ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80106ce:	3301      	adds	r3, #1
 80106d0:	d003      	beq.n	80106da <_fwalk_reent+0x3a>
 80106d2:	4629      	mov	r1, r5
 80106d4:	4630      	mov	r0, r6
 80106d6:	47c0      	blx	r8
 80106d8:	4307      	orrs	r7, r0
 80106da:	3568      	adds	r5, #104	; 0x68
 80106dc:	e7e9      	b.n	80106b2 <_fwalk_reent+0x12>

080106de <__retarget_lock_init_recursive>:
 80106de:	4770      	bx	lr

080106e0 <__retarget_lock_acquire_recursive>:
 80106e0:	4770      	bx	lr

080106e2 <__retarget_lock_release_recursive>:
 80106e2:	4770      	bx	lr

080106e4 <__swhatbuf_r>:
 80106e4:	b570      	push	{r4, r5, r6, lr}
 80106e6:	460e      	mov	r6, r1
 80106e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106ec:	2900      	cmp	r1, #0
 80106ee:	b096      	sub	sp, #88	; 0x58
 80106f0:	4614      	mov	r4, r2
 80106f2:	461d      	mov	r5, r3
 80106f4:	da08      	bge.n	8010708 <__swhatbuf_r+0x24>
 80106f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80106fa:	2200      	movs	r2, #0
 80106fc:	602a      	str	r2, [r5, #0]
 80106fe:	061a      	lsls	r2, r3, #24
 8010700:	d410      	bmi.n	8010724 <__swhatbuf_r+0x40>
 8010702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010706:	e00e      	b.n	8010726 <__swhatbuf_r+0x42>
 8010708:	466a      	mov	r2, sp
 801070a:	f000 f925 	bl	8010958 <_fstat_r>
 801070e:	2800      	cmp	r0, #0
 8010710:	dbf1      	blt.n	80106f6 <__swhatbuf_r+0x12>
 8010712:	9a01      	ldr	r2, [sp, #4]
 8010714:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010718:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801071c:	425a      	negs	r2, r3
 801071e:	415a      	adcs	r2, r3
 8010720:	602a      	str	r2, [r5, #0]
 8010722:	e7ee      	b.n	8010702 <__swhatbuf_r+0x1e>
 8010724:	2340      	movs	r3, #64	; 0x40
 8010726:	2000      	movs	r0, #0
 8010728:	6023      	str	r3, [r4, #0]
 801072a:	b016      	add	sp, #88	; 0x58
 801072c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010730 <__smakebuf_r>:
 8010730:	898b      	ldrh	r3, [r1, #12]
 8010732:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010734:	079d      	lsls	r5, r3, #30
 8010736:	4606      	mov	r6, r0
 8010738:	460c      	mov	r4, r1
 801073a:	d507      	bpl.n	801074c <__smakebuf_r+0x1c>
 801073c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010740:	6023      	str	r3, [r4, #0]
 8010742:	6123      	str	r3, [r4, #16]
 8010744:	2301      	movs	r3, #1
 8010746:	6163      	str	r3, [r4, #20]
 8010748:	b002      	add	sp, #8
 801074a:	bd70      	pop	{r4, r5, r6, pc}
 801074c:	ab01      	add	r3, sp, #4
 801074e:	466a      	mov	r2, sp
 8010750:	f7ff ffc8 	bl	80106e4 <__swhatbuf_r>
 8010754:	9900      	ldr	r1, [sp, #0]
 8010756:	4605      	mov	r5, r0
 8010758:	4630      	mov	r0, r6
 801075a:	f7ff fb69 	bl	800fe30 <_malloc_r>
 801075e:	b948      	cbnz	r0, 8010774 <__smakebuf_r+0x44>
 8010760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010764:	059a      	lsls	r2, r3, #22
 8010766:	d4ef      	bmi.n	8010748 <__smakebuf_r+0x18>
 8010768:	f023 0303 	bic.w	r3, r3, #3
 801076c:	f043 0302 	orr.w	r3, r3, #2
 8010770:	81a3      	strh	r3, [r4, #12]
 8010772:	e7e3      	b.n	801073c <__smakebuf_r+0xc>
 8010774:	4b0d      	ldr	r3, [pc, #52]	; (80107ac <__smakebuf_r+0x7c>)
 8010776:	62b3      	str	r3, [r6, #40]	; 0x28
 8010778:	89a3      	ldrh	r3, [r4, #12]
 801077a:	6020      	str	r0, [r4, #0]
 801077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010780:	81a3      	strh	r3, [r4, #12]
 8010782:	9b00      	ldr	r3, [sp, #0]
 8010784:	6163      	str	r3, [r4, #20]
 8010786:	9b01      	ldr	r3, [sp, #4]
 8010788:	6120      	str	r0, [r4, #16]
 801078a:	b15b      	cbz	r3, 80107a4 <__smakebuf_r+0x74>
 801078c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010790:	4630      	mov	r0, r6
 8010792:	f000 f8f3 	bl	801097c <_isatty_r>
 8010796:	b128      	cbz	r0, 80107a4 <__smakebuf_r+0x74>
 8010798:	89a3      	ldrh	r3, [r4, #12]
 801079a:	f023 0303 	bic.w	r3, r3, #3
 801079e:	f043 0301 	orr.w	r3, r3, #1
 80107a2:	81a3      	strh	r3, [r4, #12]
 80107a4:	89a0      	ldrh	r0, [r4, #12]
 80107a6:	4305      	orrs	r5, r0
 80107a8:	81a5      	strh	r5, [r4, #12]
 80107aa:	e7cd      	b.n	8010748 <__smakebuf_r+0x18>
 80107ac:	0801053d 	.word	0x0801053d

080107b0 <__ascii_mbtowc>:
 80107b0:	b082      	sub	sp, #8
 80107b2:	b901      	cbnz	r1, 80107b6 <__ascii_mbtowc+0x6>
 80107b4:	a901      	add	r1, sp, #4
 80107b6:	b142      	cbz	r2, 80107ca <__ascii_mbtowc+0x1a>
 80107b8:	b14b      	cbz	r3, 80107ce <__ascii_mbtowc+0x1e>
 80107ba:	7813      	ldrb	r3, [r2, #0]
 80107bc:	600b      	str	r3, [r1, #0]
 80107be:	7812      	ldrb	r2, [r2, #0]
 80107c0:	1e10      	subs	r0, r2, #0
 80107c2:	bf18      	it	ne
 80107c4:	2001      	movne	r0, #1
 80107c6:	b002      	add	sp, #8
 80107c8:	4770      	bx	lr
 80107ca:	4610      	mov	r0, r2
 80107cc:	e7fb      	b.n	80107c6 <__ascii_mbtowc+0x16>
 80107ce:	f06f 0001 	mvn.w	r0, #1
 80107d2:	e7f8      	b.n	80107c6 <__ascii_mbtowc+0x16>

080107d4 <__malloc_lock>:
 80107d4:	4801      	ldr	r0, [pc, #4]	; (80107dc <__malloc_lock+0x8>)
 80107d6:	f7ff bf83 	b.w	80106e0 <__retarget_lock_acquire_recursive>
 80107da:	bf00      	nop
 80107dc:	2000093c 	.word	0x2000093c

080107e0 <__malloc_unlock>:
 80107e0:	4801      	ldr	r0, [pc, #4]	; (80107e8 <__malloc_unlock+0x8>)
 80107e2:	f7ff bf7e 	b.w	80106e2 <__retarget_lock_release_recursive>
 80107e6:	bf00      	nop
 80107e8:	2000093c 	.word	0x2000093c

080107ec <_raise_r>:
 80107ec:	291f      	cmp	r1, #31
 80107ee:	b538      	push	{r3, r4, r5, lr}
 80107f0:	4604      	mov	r4, r0
 80107f2:	460d      	mov	r5, r1
 80107f4:	d904      	bls.n	8010800 <_raise_r+0x14>
 80107f6:	2316      	movs	r3, #22
 80107f8:	6003      	str	r3, [r0, #0]
 80107fa:	f04f 30ff 	mov.w	r0, #4294967295
 80107fe:	bd38      	pop	{r3, r4, r5, pc}
 8010800:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010802:	b112      	cbz	r2, 801080a <_raise_r+0x1e>
 8010804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010808:	b94b      	cbnz	r3, 801081e <_raise_r+0x32>
 801080a:	4620      	mov	r0, r4
 801080c:	f000 f830 	bl	8010870 <_getpid_r>
 8010810:	462a      	mov	r2, r5
 8010812:	4601      	mov	r1, r0
 8010814:	4620      	mov	r0, r4
 8010816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801081a:	f000 b817 	b.w	801084c <_kill_r>
 801081e:	2b01      	cmp	r3, #1
 8010820:	d00a      	beq.n	8010838 <_raise_r+0x4c>
 8010822:	1c59      	adds	r1, r3, #1
 8010824:	d103      	bne.n	801082e <_raise_r+0x42>
 8010826:	2316      	movs	r3, #22
 8010828:	6003      	str	r3, [r0, #0]
 801082a:	2001      	movs	r0, #1
 801082c:	e7e7      	b.n	80107fe <_raise_r+0x12>
 801082e:	2400      	movs	r4, #0
 8010830:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010834:	4628      	mov	r0, r5
 8010836:	4798      	blx	r3
 8010838:	2000      	movs	r0, #0
 801083a:	e7e0      	b.n	80107fe <_raise_r+0x12>

0801083c <raise>:
 801083c:	4b02      	ldr	r3, [pc, #8]	; (8010848 <raise+0xc>)
 801083e:	4601      	mov	r1, r0
 8010840:	6818      	ldr	r0, [r3, #0]
 8010842:	f7ff bfd3 	b.w	80107ec <_raise_r>
 8010846:	bf00      	nop
 8010848:	20000024 	.word	0x20000024

0801084c <_kill_r>:
 801084c:	b538      	push	{r3, r4, r5, lr}
 801084e:	4d07      	ldr	r5, [pc, #28]	; (801086c <_kill_r+0x20>)
 8010850:	2300      	movs	r3, #0
 8010852:	4604      	mov	r4, r0
 8010854:	4608      	mov	r0, r1
 8010856:	4611      	mov	r1, r2
 8010858:	602b      	str	r3, [r5, #0]
 801085a:	f7f1 fb88 	bl	8001f6e <_kill>
 801085e:	1c43      	adds	r3, r0, #1
 8010860:	d102      	bne.n	8010868 <_kill_r+0x1c>
 8010862:	682b      	ldr	r3, [r5, #0]
 8010864:	b103      	cbz	r3, 8010868 <_kill_r+0x1c>
 8010866:	6023      	str	r3, [r4, #0]
 8010868:	bd38      	pop	{r3, r4, r5, pc}
 801086a:	bf00      	nop
 801086c:	20000940 	.word	0x20000940

08010870 <_getpid_r>:
 8010870:	f7f1 bb76 	b.w	8001f60 <_getpid>

08010874 <__sread>:
 8010874:	b510      	push	{r4, lr}
 8010876:	460c      	mov	r4, r1
 8010878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801087c:	f000 f8a0 	bl	80109c0 <_read_r>
 8010880:	2800      	cmp	r0, #0
 8010882:	bfab      	itete	ge
 8010884:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010886:	89a3      	ldrhlt	r3, [r4, #12]
 8010888:	181b      	addge	r3, r3, r0
 801088a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801088e:	bfac      	ite	ge
 8010890:	6563      	strge	r3, [r4, #84]	; 0x54
 8010892:	81a3      	strhlt	r3, [r4, #12]
 8010894:	bd10      	pop	{r4, pc}

08010896 <__swrite>:
 8010896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801089a:	461f      	mov	r7, r3
 801089c:	898b      	ldrh	r3, [r1, #12]
 801089e:	05db      	lsls	r3, r3, #23
 80108a0:	4605      	mov	r5, r0
 80108a2:	460c      	mov	r4, r1
 80108a4:	4616      	mov	r6, r2
 80108a6:	d505      	bpl.n	80108b4 <__swrite+0x1e>
 80108a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108ac:	2302      	movs	r3, #2
 80108ae:	2200      	movs	r2, #0
 80108b0:	f000 f874 	bl	801099c <_lseek_r>
 80108b4:	89a3      	ldrh	r3, [r4, #12]
 80108b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80108be:	81a3      	strh	r3, [r4, #12]
 80108c0:	4632      	mov	r2, r6
 80108c2:	463b      	mov	r3, r7
 80108c4:	4628      	mov	r0, r5
 80108c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108ca:	f000 b823 	b.w	8010914 <_write_r>

080108ce <__sseek>:
 80108ce:	b510      	push	{r4, lr}
 80108d0:	460c      	mov	r4, r1
 80108d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108d6:	f000 f861 	bl	801099c <_lseek_r>
 80108da:	1c43      	adds	r3, r0, #1
 80108dc:	89a3      	ldrh	r3, [r4, #12]
 80108de:	bf15      	itete	ne
 80108e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80108e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80108e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80108ea:	81a3      	strheq	r3, [r4, #12]
 80108ec:	bf18      	it	ne
 80108ee:	81a3      	strhne	r3, [r4, #12]
 80108f0:	bd10      	pop	{r4, pc}

080108f2 <__sclose>:
 80108f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108f6:	f000 b81f 	b.w	8010938 <_close_r>

080108fa <__ascii_wctomb>:
 80108fa:	4603      	mov	r3, r0
 80108fc:	4608      	mov	r0, r1
 80108fe:	b141      	cbz	r1, 8010912 <__ascii_wctomb+0x18>
 8010900:	2aff      	cmp	r2, #255	; 0xff
 8010902:	d904      	bls.n	801090e <__ascii_wctomb+0x14>
 8010904:	228a      	movs	r2, #138	; 0x8a
 8010906:	601a      	str	r2, [r3, #0]
 8010908:	f04f 30ff 	mov.w	r0, #4294967295
 801090c:	4770      	bx	lr
 801090e:	700a      	strb	r2, [r1, #0]
 8010910:	2001      	movs	r0, #1
 8010912:	4770      	bx	lr

08010914 <_write_r>:
 8010914:	b538      	push	{r3, r4, r5, lr}
 8010916:	4d07      	ldr	r5, [pc, #28]	; (8010934 <_write_r+0x20>)
 8010918:	4604      	mov	r4, r0
 801091a:	4608      	mov	r0, r1
 801091c:	4611      	mov	r1, r2
 801091e:	2200      	movs	r2, #0
 8010920:	602a      	str	r2, [r5, #0]
 8010922:	461a      	mov	r2, r3
 8010924:	f7f1 fb5a 	bl	8001fdc <_write>
 8010928:	1c43      	adds	r3, r0, #1
 801092a:	d102      	bne.n	8010932 <_write_r+0x1e>
 801092c:	682b      	ldr	r3, [r5, #0]
 801092e:	b103      	cbz	r3, 8010932 <_write_r+0x1e>
 8010930:	6023      	str	r3, [r4, #0]
 8010932:	bd38      	pop	{r3, r4, r5, pc}
 8010934:	20000940 	.word	0x20000940

08010938 <_close_r>:
 8010938:	b538      	push	{r3, r4, r5, lr}
 801093a:	4d06      	ldr	r5, [pc, #24]	; (8010954 <_close_r+0x1c>)
 801093c:	2300      	movs	r3, #0
 801093e:	4604      	mov	r4, r0
 8010940:	4608      	mov	r0, r1
 8010942:	602b      	str	r3, [r5, #0]
 8010944:	f7f1 fb66 	bl	8002014 <_close>
 8010948:	1c43      	adds	r3, r0, #1
 801094a:	d102      	bne.n	8010952 <_close_r+0x1a>
 801094c:	682b      	ldr	r3, [r5, #0]
 801094e:	b103      	cbz	r3, 8010952 <_close_r+0x1a>
 8010950:	6023      	str	r3, [r4, #0]
 8010952:	bd38      	pop	{r3, r4, r5, pc}
 8010954:	20000940 	.word	0x20000940

08010958 <_fstat_r>:
 8010958:	b538      	push	{r3, r4, r5, lr}
 801095a:	4d07      	ldr	r5, [pc, #28]	; (8010978 <_fstat_r+0x20>)
 801095c:	2300      	movs	r3, #0
 801095e:	4604      	mov	r4, r0
 8010960:	4608      	mov	r0, r1
 8010962:	4611      	mov	r1, r2
 8010964:	602b      	str	r3, [r5, #0]
 8010966:	f7f1 fb60 	bl	800202a <_fstat>
 801096a:	1c43      	adds	r3, r0, #1
 801096c:	d102      	bne.n	8010974 <_fstat_r+0x1c>
 801096e:	682b      	ldr	r3, [r5, #0]
 8010970:	b103      	cbz	r3, 8010974 <_fstat_r+0x1c>
 8010972:	6023      	str	r3, [r4, #0]
 8010974:	bd38      	pop	{r3, r4, r5, pc}
 8010976:	bf00      	nop
 8010978:	20000940 	.word	0x20000940

0801097c <_isatty_r>:
 801097c:	b538      	push	{r3, r4, r5, lr}
 801097e:	4d06      	ldr	r5, [pc, #24]	; (8010998 <_isatty_r+0x1c>)
 8010980:	2300      	movs	r3, #0
 8010982:	4604      	mov	r4, r0
 8010984:	4608      	mov	r0, r1
 8010986:	602b      	str	r3, [r5, #0]
 8010988:	f7f1 fb5e 	bl	8002048 <_isatty>
 801098c:	1c43      	adds	r3, r0, #1
 801098e:	d102      	bne.n	8010996 <_isatty_r+0x1a>
 8010990:	682b      	ldr	r3, [r5, #0]
 8010992:	b103      	cbz	r3, 8010996 <_isatty_r+0x1a>
 8010994:	6023      	str	r3, [r4, #0]
 8010996:	bd38      	pop	{r3, r4, r5, pc}
 8010998:	20000940 	.word	0x20000940

0801099c <_lseek_r>:
 801099c:	b538      	push	{r3, r4, r5, lr}
 801099e:	4d07      	ldr	r5, [pc, #28]	; (80109bc <_lseek_r+0x20>)
 80109a0:	4604      	mov	r4, r0
 80109a2:	4608      	mov	r0, r1
 80109a4:	4611      	mov	r1, r2
 80109a6:	2200      	movs	r2, #0
 80109a8:	602a      	str	r2, [r5, #0]
 80109aa:	461a      	mov	r2, r3
 80109ac:	f7f1 fb56 	bl	800205c <_lseek>
 80109b0:	1c43      	adds	r3, r0, #1
 80109b2:	d102      	bne.n	80109ba <_lseek_r+0x1e>
 80109b4:	682b      	ldr	r3, [r5, #0]
 80109b6:	b103      	cbz	r3, 80109ba <_lseek_r+0x1e>
 80109b8:	6023      	str	r3, [r4, #0]
 80109ba:	bd38      	pop	{r3, r4, r5, pc}
 80109bc:	20000940 	.word	0x20000940

080109c0 <_read_r>:
 80109c0:	b538      	push	{r3, r4, r5, lr}
 80109c2:	4d07      	ldr	r5, [pc, #28]	; (80109e0 <_read_r+0x20>)
 80109c4:	4604      	mov	r4, r0
 80109c6:	4608      	mov	r0, r1
 80109c8:	4611      	mov	r1, r2
 80109ca:	2200      	movs	r2, #0
 80109cc:	602a      	str	r2, [r5, #0]
 80109ce:	461a      	mov	r2, r3
 80109d0:	f7f1 fae7 	bl	8001fa2 <_read>
 80109d4:	1c43      	adds	r3, r0, #1
 80109d6:	d102      	bne.n	80109de <_read_r+0x1e>
 80109d8:	682b      	ldr	r3, [r5, #0]
 80109da:	b103      	cbz	r3, 80109de <_read_r+0x1e>
 80109dc:	6023      	str	r3, [r4, #0]
 80109de:	bd38      	pop	{r3, r4, r5, pc}
 80109e0:	20000940 	.word	0x20000940

080109e4 <_init>:
 80109e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109e6:	bf00      	nop
 80109e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109ea:	bc08      	pop	{r3}
 80109ec:	469e      	mov	lr, r3
 80109ee:	4770      	bx	lr

080109f0 <_fini>:
 80109f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109f2:	bf00      	nop
 80109f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109f6:	bc08      	pop	{r3}
 80109f8:	469e      	mov	lr, r3
 80109fa:	4770      	bx	lr
